US007885981B2

a2) United States Patent

Kaufman et al.

US 7,885,981 B2
Feb. 8, 2011

(0) Patent No.:
(45) Date of Patent:

(54) SYSTEM AND METHOD FOR GENERATING 5,495,567 A * 2/1996 Tizawaet al. cece 715/762
AUTOMATIC USER INTERFACE FOR 5,499,371 A * 3/1996 Henninger et al. .......... 717/108
ARBITRARILY COMPLEX OR LARGE 5,553,218 A * 9/1996 Lietal. eee 707/803
DATABASES 5,627,979 A * 5/1997 Chang etal. .... .. 715/763

5,742,813 A * 4/1998 Kavanagh etal. 0.00... 707/8

(75) Inventors: Michael Philip Kaufman, 77 E. 12th 5,778,356 A * 7/1998 Heiny w.cccceccsseeeeieee 707/2

St., Suite 2FG, New York, NY (US) 5,778,375 A * 7/1998 707/101
10003; Micah Philip Silverman, 5,835,910 A * 11/1998 Kavanagh etal. ....... 707/103 R
Huntington Station, NY (US) 5,838,965 A * 11/1998 Kavanagh etal. ....... 707/103 R
. 5,873,093 A * 2/1999 Williamson et al. ..... 707/103 R
(73) Assignee: Michael Philip Kaufman, New York, 5,950,190 A * 9/1999 Yeager etal. cscs 707/3
NY (US) 5,970,490 A * 10/1999 Morgenstern .. .. 707/10
Es
(*) Notice: Subject to any disclaimer, the term of this 6,016,394 A 1/2000 Walker oo... eee 717/104
patent is extended or adjusted under 35
U.S.C. 154(b) by 362 days.
(Continued)
(21) Appl. No.: 11/925,236 Primary Examiner—Shahid A Alam
(22) Filed: Oct. 26, 2007 (74) Attorney, Agent, or Firm—Hughes Hubbard & Reed
LLP; Ronald Abramson

(65) Prior Publication Data (57) ABSTRACT

US 2008/0046462 Al Feb. 21, 2008
Related U.S. Application Data A software system automatically and dynamically generates
(63) Continuation of application No. 10/428,209, filed on a fully functional user interface (UI) based upon, and fone
A ta: nected directly to, an underlying data model (as instantiated
pr. 30, 2003, now Pat. No. 7,318,066, which is a aon ;
: vo ae within a relational database management system (RDBMS)).
continuation-in-part of application No. 09/703,267, . : .
filed on Oct. 31. 2000. now abandoned. The UI derives from an automated interrogation of the
° ° RDBMS, and comprises all mode displays (e.g., browse,

(51) Int.Cl. search, edit, add) for all tables, and a full complement of
GO6F 1730 (2006.01) mechanisms—integrated directly into the mode displays—

(52) US. CM. eecccccceecssneees 707/802; 707/728; 707/912 {0t Tepresenting, navigating, and managing relationships

. : ; across tables, regardless of the complexity of the underlying

(58) Field of Classification Search .........0..000... 707/4, RDBMS schema, It utilizes a hierarchical “context stack” for

707/104.1, 713, 802, 704, 708, 728, 783, ding th kine state ofa particular table while “drill
707/912: 715/783: 717/113 suspending the working state of a particular table while “drill-
S lication file f let ? bhi ti ing down” to work with related-table information and return
C6 APPNCANON TNE TOF COMPILE SeAPCA NISIOFY: relevant changes to the base table. The embodiment further
(56) References Cited provides methods to enhance and extend the internal repre-

sentation of table structures, constraints, relationships, and-
special requirements (“business rules”) for improved revela-
tion of the schema structure through external interrogation.

U.S. PATENT DOCUMENTS

5,353,401 A * 10/1994 Tizawa etal. 0... 715/763
5,355,474 A * 10/1994 Thuraisngham et al. ........ 7107/9
5,418,957 A * 5/1995 Narayan... eee TLT/ALIZ 6 Claims, 35 Drawing Sheets

{Ei Scharsalive - Microsoft intamet Explorer
TT fie _Eot Yaw Fuveies Tole Help

A (Cote

- >
Fownd

gsi

SCHEMALIVE

Browse @ Search OPPORTUNITY CONTACT EVENT
[Select table to browse a

PEOPLE

STATE OR PROVINCE [BROWSE]
BROWSING STATE OR PROVINCE

State Or Province options: FULL _BROWSE, NEW SEARCH, OR ADO

Page 3 of 9 [totaling 85 retords @ {8} rows per paga) Reset Rows

Pik ier [RSET PONCE [Coury Ertarod by Users [Eruy Dete___ | odtied by Users] Last Modified Date
ri a (indiana usaf Baar. Micheal Toa Sl Es el
| Wier

16 lw lowa fusa

af
PAB. Np
ral? iks Urensas usa [Brier Mme] DST [pager eres
fads Raranty JUST i
i21'19 LA Lovisiena [usa INA nya e
azi2o ME [Maine [usa _[Bagrer. Menast ora
54 MB. Manitoba Canada| dada Hat y ay t

slr IND Maryiend [USA [BRIR=™ ESVTSRIOT Pare wesar Te

“Top of List}[Previous 8 Rows} Next 8 Rows [Bottom of List c
Bone Teed


US 7,885,981 B2

Page 2
U.S. PATENT DOCUMENTS 6,292,827 BL* 9/2001 Raz oe. eeeeceeeeseeeeeeees 709/217
6,487,552 BL* 11/2002 707/4
6,035,300 A * 3/2000 Cason etal. 0... 707/102 6,591,272 BL* 7/2003 Williams oo... 707/802
6,061,515 A * 5/2000 Chang etal. ... vee TIT/L1A 2001/0034733 A1* 10/2001 Promptet al... 707/102
6,199,068 B1* 3/2001 Carpenter ......... w+ 707/100 2001/0037331 AL* 11/2001 Lloyd voceccceeseeeecees 7107/4
6,275,824 B1* 8/2001 O’Flaherty et al. we 707/9
6,279,008 B1* 8/2001 TungNgetal. .. . 707/102 * cited by examiner


US 7,885,981 B2

Sheet 1 of 35

Feb. 8, 2011

U.S. Patent

| “Ola

PUA ®

is11 0 wonog|[ smou @ Xen I{sMou 8 snonada(isr jo doy |

Bon vel] joel won weg] YSN] PURGE],

one ‘coon an gion ls 7) eqoyUeW ain] ~_¥s)
| _oRB/Et/OE | reeuony vou Loe at ee Lleeuowy ‘veus | wsn auleW| IW 4
[oR ELST roeuowy ‘ued Oe ET Loeuowy ved], SN] BuRIsino] vii 6i itz

eieUL eau i i etree veld] vsn] —— Ayomuey| ET
LL OBuEL/E1 | eeuony ‘we ‘ue LOCuIEL/OL EYOIA, wveuiitd| [ven SeSuey Sy TR
i soteuetian oe LOReie LG [seu ‘ue it vSny PMO} Vip j i
| Loreeuenl |eeyo! vue | Ray dad VSO] evap UN : Sl 2T
[area DOIDOW ise] [siasn fq pauipow| ayeq Aqua siesp Aq posequg|(Anuno5 @OUIADIY 2 cote CT eu ~ eouAOly a #

(aed 19d sMoJ { slo spi0da: gg Buyeyo}) 6 jo © aGeg

GV YO ‘HOUW3S MIN "3SMOUG Tind :suondo aoulnolg 19 ales

| FONIAOHd HO 3LV1S ONISMOHE

[3SMOUG! SONIAOHd HO SLVLS

FERN ANN

@SMOlq 0} B/qe] [08/05
31d03d INJAF LOYINOD = ALINALHOddO CYURBS @ BSMOIQ

dais DIeMiO4

me a| a .
Sod] SOUFOAR4 MO Waly |]
a al SOICIOR YOURE MOSOUOUN - BATBUIELOS [ey

" auOH

v

USBOH

#

dsf- eno /oMeuevog rue OM EUOLES RM


US 7,885,981 B2

Sheet 2 of 35

Feb. 8, 2011

U.S. Patent

6 Ols

i

:@1EQ POINPOW 1627
[ora POUR
reyeg Aug
ON] S®{]]|:e1e}0q ue9
ONE] seA(_]||:ppY ue
ONC] s24(7]]|[sypa weg
ONL] saat] esmorg ueg

| SEL ATTNSEG
[SROID ATIS6g

RQUINN a1qeL dnow Ayinges

==
=
=
=
=

Ape ssaidxe, aiqeug []
a1qeL dnoin Ajunoas ul spiodey J0j yueag | GOV YO "HYVES M3N‘JSMOUS T1Nd  ‘suondo aiqey dnoly Aunoas

re eee
JTAVL dNOYD ALIUNDSS ONIHOHVAS

eee

[yorees] aiqey dnosg Anges
| SIANWWAHDS

fa] yorees 0} ajqey 19/85 |
WdOjd = LN3A3 LIVLNOD ALINNLYOddO @yoees © asmolg

S ERidainRRERInIRnIIne semis See E Ee een

9 [= [now an IanO 3S-SuENeU Ww HPAP PARLEY GALS MMA Cael | F |

BA SOUL sewoKky ma HOS ay ||
J81010X3 EWE HOSOIOWN - GAIBUAUOS (2


US 7,885,981 B2

Sheet 3 of 35

Feb. 8, 2011

U.S. Patent

€ Old

ih

RUE EA

l

SOLUS Z

[a ysn

[| 20 J tat eoupnoug 9 orm

E | |4equNN B9UPAOLY JO e}EIS

JONIAOUd HO SLVLS ONILICS

Gq¥ YO ‘HYVES MIN "3SMOUS Tind :suondo sounoig Jo aEIg

LLIGS] SONIAOYd HO SLVLS

3SMOlq 0} BIqE) 105/66
W1dO3d = LNAATLOVINOD = ALINALYOddO ~OuyseeS © asmolg

ie i reweyog/woo ( mo

SS TT “ rs * =»
deH S100, sewoxej mak yo} ag |]
J820}0X3 JOLIET YOSC.IW - SAPLUBLIOS [9


US 7,885,981 B2

Sheet 4 of 35

Feb. 8, 2011

U.S. Patent

a)

/ANTEWSYOS (WOT aAieWOYOS AMM/CIY Ce

I

!

ETAT AREA

t

[:Anunog
BOUIADIg IO 6 SIRS
OWEN AyD

suequiny Ay

iPpe 1aMmod, aqeuz

Aug 0} piooey ppy GQV YO HEWES MIN 3SMOUE Ting -suoydo Ag

ALID OL ONIGAY

[dav] ALIO

Yyoreas 0} 8[qe] j98/aS
AidO3d = INSAALOVINOD ALINNLYOddO @usees CO BSMOlg

|_| SAIWWSHDs

premio "
o- S|

GeA SiOSL saworBs Me wp and |]
JO1O}XG JOUEIU! YOSDIOWW - eANTUEUDS @

++ | BPRBPe=spoUrR |G -aUR NINE: ds ULO-Up pp /eANFeWeLDS UCD aAFEWeKDS MMAYr day LS] sserppy


U.S. Patent Feb. 8, 2011 Sheet 5 of 35 US 7,885,981 B2

SECURITY_GROUP_TABLE

SECURITY_TABLE_KEY

SECURITY_TABLE

SECURITY_TABLE_KEY
SECURITY_TABLE_NAME
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

Fig. 5A

U.S. Patent Feb. 8, 2011 Sheet 6 of 35 US 7,885,981 B2

SECURITY_GROUP_USER

USERS_KEY a
PEOPLE_KEY USERS_KEY
LOGIN_ID =

ENTERED_BY_USERS_KEY
ENTRY_DATE PEOPLE
MODIFIED_BY_USERS_KEY

~BY_USERS_ PEOPLE_KEY
IAST MODIFIED_DATE

Fig. 5B

U.S. Patent Feb. 8, 2011 Sheet 7 of 35 US 7,885,981 B2

SECURITY_GROUP_TABLE

SECURITY_GROUP_TABLE_KEY
SECURITY_GROUP_KEY

SECURITY_GROUP
SECURITY_GROUP_KEY

SECURITY_TABLE
SECURITY_TABLE_KEY

ENTERED_BY_USERS_KEY
ENTRY_DATE

MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

Fig. 5C

U.S. Patent Feb. 8, 2011 Sheet 8 of 35 US 7,885,981 B2

SECURITY_GROUP_USER

SECURITY_GROUP_USER_KEY
SECURITY_GROUP_KEY
USERS_KEY
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

SECURITY_GROUP
SECURITY_GROUP_KEY

USERS
USERS_KEY

Fig. 5D

U.S. Patent Feb. 8, 2011 Sheet 9 of 35 US 7,885,981 B2

PEOPLE

PEOPLE_KEY
LAST_NAME
FIRST_NAME
MIDDLE_NAME
COMPANY_KEY
JOB_TITLE
SALUTATION_NAME
ADDRESS_1
ADDRESS_2
CITY_KEY
STATE_OR_PROVINCE_KEY

CONTACT_PARTICIPANTS

PEOPLE_KEY
OPPORTUNITY

CONTACT _PERSON_KEY

REFERRED_BY_KEY

COMPANY
COMPANY_KEY

CITY_KEY
STATE_OR_PROVINCE
STATE_OR_PROVINCE_KEY

COUNTRY

COUNTRY_KEY
Fig. 5E a

WORK_FAX
WORK_PAGER
WORK_EMAIL
ACTIVE_FLAG

NOTES

ENTERED. BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE


U.S. Patent Feb. 8, 2011 Sheet 10 of 35 US 7,885,981 B2

CONTRACTUAL_RELATIONSHIP

CONTRACTUAL_RELATIONSHIP_KEY
CONTRACTUAL_RELATIONSHIP_NAME
DESCRIPTION
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

COMPANY

CONTRACTUAL_RELATIONSHIP_KEY

Fig. 5F

U.S. Patent Feb. 8, 2011 Sheet 11 of 35 US 7,885,981 B2

COMPANY

PRIORITY_KEY
PRIORITY_NAME
DESCRIPTION
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

PRIORITY_KEY

|
.
«

Fig. 5G

U.S. Patent Feb. 8, 2011 Sheet 12 of 35 US 7,885,981 B2

SECURITY_GROUP

SECURITY_GROUP_KEY
SECURIT Y_GROUP_NAME
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

SECURITY_GROUP_TABLE
SECURITY_GROUP_KEY

SECURITY_GROUP_USER

SECURITY_GROUP_KEY

Fig. 5H

U.S. Patent Feb. 8, 2011 Sheet 13 of 35 US 7,885,981 B2

CONTACT_PARTICIPANTS

CONTACT_PARTICIPANT_KEY

FOLLOW_UP_ACTIONS

CONTACT_PARTICIPANT_KEY

CONTACT_EVENT

CONTACT_EVENT_KEY

ENTERED_BY_USERS_KEY
ENTRY_DATE

MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

PREVIOUS_EVENT_KEY

PEOPLE

PEOPLE_KEY

Fig. 5l

U.S. Patent Feb. 8, 2011 Sheet 14 of 35 US 7,885,981 B2

PEOPLE

COMPANY

COMPANY_KEY
COMPANY_NAME

NDA_FLAG
CONTRACTUAL_RELATIONSHIP_

COMPANY_KEY

CONTRACTUAL_RELATION

KEY
PRIORITY_KEY CONTRACTUAL_RELATION
ADDRESS_1 SHIP_KEY
ADDRESS_2
CITY_KEY

STATE_OR_PROVINCE_KEY
POSTAL_CODE

PRIORITY
PRIORITY_KEY

COMPANY_URL
NOTES
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

CITY_KEY

STATE_OR_PROVINCE
STATE_OR_PROVINCE_KEY

i) - olol - O12
fe 4 3 | |:
<z

=

wv

“<

COUNTRY_KEY

Fig. 5J

U.S. Patent Feb. 8, 2011 Sheet 15 of 35 US 7,885,981 B2

OPPORTUNITY_TYPE

OPPORTUNITY OPPORTUNITY_KEY

OPPORTUNITY_KEY
OPPORTUNITY_TITLE

OPPORTUNITY_DATE
CONTACT_PERSON_KEY
REGION_KEY

REFERRED_BY_KEY
OPPORTUNITY_STATUS_KEY PEOPLE_KEY
NOTES us

ENTERED_BY_USERS_KEY
ENTRY_DATE

MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

REGION OPPORTUNITY_STATUS
REGION_KEY OPPORTUNITY_STATUS_KEY

Fig. 5K

U.S. Patent Feb. 8, 2011 Sheet 16 of 35 US 7,885,981 B2

FOLLOW_UP_ACTION

FOLLOW_UP_ACTIONS_KEY
CONTACT_PARTICIPANT_KEY
DESCRIPTION

DUE_DATE
COMPLETED_DATE
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

CONTACT_PARTICIPANTS

CONTACT_PARTICIPANT_KEY

Fig. 5L

U.S. Patent Feb. 8, 2011 Sheet 17 of 35 US 7,885,981 B2

CITY

CITY_KEY

CITY_NAME
STATE_OR_PROVINCE_KEY
COUNTRY_KEY

PEOPLE

CITY_KEY

ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

COMPANY

CITY_KEY

STATE_OR_PROVINCE
STATE_OR_PROVINCE_KEY

COUNTRY
COUNTRY_KEY

.

Fig. 5M

U.S. Patent Feb. 8, 2011 Sheet 18 of 35 US 7,885,981 B2

HELP_OBJECT

HELP_OBJECT_KEY
HELP_OBJECT_NAME
HELP_SCHEMA_KEY
POP_UP_TEXT
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

HELP_SCHEMA
HELP_SCHEMA_KEY

Fig .5 N

U.S. Patent Feb. 8, 2011 Sheet 19 of 35 US 7,885,981 B2

OPPORTUNITY_TYPE

OPPORTUNITY_TYPE_KEY
OPPORTUNITY_KEY
PRODUCTS_AND_SERVICES_KEY
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

PRODUCTS_AND_SERVICES
PRODUCTS_AND_SERVICES_KEY

OPPORTUNITY
OPPORTUNITY_KEY

Fig. 50

U.S. Patent Feb. 8, 2011 Sheet 20 of 35 US 7,885,981 B2

OPPORTUNITY_STATUS OPPORTUNITY

OPPORTUNITY_STATUS_KEY
OPPORTUNITY_STATUS_NAME
DESCRIPTION
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

OPPORTUNITY_STATUS_ KEY

Fig. 5P

U.S. Patent Feb. 8, 2011 Sheet 21 of 35 US 7,885,981 B2

CONTACT_EVENT
CONTACT_PARTICIPANTS

CONTACT_EVENT_KEY

| CONTACT_EVENT_KEY

DESCRIPTION

ENTERED _BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

CONTACT_TYPE
CONTACT_TYPE_KEY

OPPORTUNITY
OPPORTUNITY_KEY

Fig. 5Q

U.S. Patent Feb. 8, 2011 Sheet 22 of 35 US 7,885,981 B2

STATE_OR_PROVINCE
CITY

STATE_OR_PROVINCE_KEY
STATE_OR_PROVINCE_ID
STATE_OR_PROVINCE_NAME
COUNTRY_KEY
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

STATE_OR_PROVINCE_KEY

PEOPLE

STATE_OR_PROVINCE_KEY

COMPANY

STATE_OR_PROVINCE_KEY

COUNTRY
COUNTRY_KEY

Fig. 5R

U.S. Patent Feb. 8, 2011 Sheet 23 of 35 US 7,885,981 B2

HELP_SCHEMA

HELP_SCHEMA_KEY
HELP_SCHEMA_TABLE
HELP_SCHEMA_COLUMN
POPUP_TEXT
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

HELP_OBJECT

HELP_SCHEMA_KEY

Fig. 5S

U.S. Patent Feb. 8, 2011 Sheet 24 of 35 US 7,885,981 B2

PRODUCTS_AND_SERVICES

PRODUCTS_AND_SERVICES_KEY
PRODUCTS_AND_SERVICES_NAME
DESCRIPTION
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

OPPORTUNITY_TYPE

PRODUCTS_AND_SERVICES_KEY

Fig. 5T

U.S. Patent Feb. 8, 2011 Sheet 25 of 35 US 7,885,981 B2

CONTACT_TYPE

CONTACT_TYPE_KEY
CONTACT_TYPE_NAME
DESCRIPTION
ENTERED_BY_USERS_KEY
ENTRY_DATE
MODIFIED_BY_USERS_KEY
LAST_MODIFIED_DATE

CONTACT_EVENT

CONTACT_TYPE_KEY

Fig. 5U

U.S. Patent Feb. 8, 2011 Sheet 26 of 35 US 7,885,981 B2

COUNTRY
CITY

COUNTRY_KEY

COUNTRY_NAME Lee
REGION_KEY COUNTRY_KEY
ENTERED_BY_USERS_KEY Lee

ENTRY_DATE
MODIFIED_BY_USERS_KEY

LAST_MODIFIED_ DATE PEOPLE

COUNTRY_KEY

COMPANY
COUNTRY_KEY
STATE_OR_ PROVINCE

COUNTRY_KEY

ane
m
&)
z

REGION_KEY

Fig. 5V

U.S. Patent Feb. 8, 2011 Sheet 27 of 35 US 7,885,981 B2

REGION

REGION_KEY

REGION_NAME vee
DESCRIPTION REGION_KEY
ENTERED_BY_USERS_KEY Lee
ENTRY_DATE

MODIFIED_BY_USERS_KEY

LAST_MODIFIED_DATE

OPPORTUNITY

REGION_KEY

Fig. 5W

US 7,885,981 B2

Sheet 28 of 35

Feb. 8, 2011

U.S. Patent

9 Sls

J1EVL AYVWIYd
TeV AYVWYd

—

y09

4 18VL NSISYOS

J18Vl NOlSeOS

—


US 7,885,981 B2

Sheet 29 of 35

Feb. 8, 2011

U.S. Patent

‘VIA

e

| [sar wowoa] [snou aay) [Bros snonera] Temode ~~ 802 90/

jeuaiy] ® (1

=1(q = a
_||peee Lo0e/2 olf dug eeuony ‘weuurey | VE 21-21 1002/21/01 Fdiiug ioeuoW ‘veUyney| [x] x SOUIAOL JO 9}P}S opeasiUIUDY
= Mevt ' Th ‘ “- =
2 | [[M412) toozr2 von /duud reeuowy ‘ueuyney | Le-Zi:21 00g 1/04 Faye eeu 'VEUirey _ |x [xT x [ aigeL Aunoag ioyensiuupy|
= Ir ; Seep rar’ 7 [ = = T
= frecech ‘ooze voi dua JEU uewiney) KELELE 1002/21/01 Hdtiud jeeysiy ‘ueuney xX 1X x | asp dno Aunoag|soveasiuuipyy
LELELL 10022 WOH dyud jeeuaiy ‘ue KELEZL 1008/21/01 Hid leBuoWy ueWyN ly | = = | [
ifdivud reeyoun wayne 00zre My itd ISByOHN “UEUINeY X x [x | aigey~dnoip” Aunoag Loesiuupy)
WELELL booerevvol dig |BUY ‘vewney LE-LEZL 1002/21/01 Idtiug ieeuoy ‘veUyTey x Ix | x dnoin Aunoas Lorensiuwupy,
L. a | — JL . a
LE:LI-Zt 1002/2 1/01] dud jeeuouNy ‘wewyney 16:21:21 1002/21/01 [dud jaeuouN ‘ueUney Xx ix | x uoibaylovensiumupy.
L. Ld Ln Ld ‘ L _
JELELS boozrewo ding eRUOIN ‘vewne VELEZ1 1002/21/01 Hdtv] leeyoWy ‘vewine] x lx | x [S80\Mlag "pu" sionpold|oreNsiUUpY
REZELI 100ze ON diug jeeyoyy ‘vewiney E2021 Loge OL | [Gina eeu "ue wren “TX TX TX Auoud Joyesisiuiwipy|
SSOSMOON SLE . 0 ro 7 og sas ~ oo FT aly
| g ue WNdSS § nog Ansag

80 {snot se)

OL/-2_+ dQ¥ YO HDUV3S GISIARU/HDUVaS MINISMOUG GI¥RLUd'ISMONa TING ‘suondo aigey dnouy Ajunoag

(G3Y31 14)
FIGVL dNOYWD ALINNDSS ONISMOHE 802
STFIWINSHDS Cc creer arse
31d03d = IN3AF LVINOD = AIINTLUOddO  @uaieas © asmoig |
i | ae |
ae | Ge sid] sowoaBy M8iK yoy aig |]!
er JSIOFGXE JOUIBIL YOSOIDIN - BAPBWEUOS [9


US 7,885,981 B2

Sheet 30 of 35

Feb. 8, 2011

8 ‘Sls

918

eo

sepwez_|[:aig ee |

OL8— ~~ _vsn]|[™aom05-——-908 |

LL8-—— su07ty ]|[:SwWeN eounord 10 sims

[Z¥ ]|}:c1 eoujaoug 20 eng

€ |[:zequinn eou)A01g 20 ewig |

Gav. YO HOYVSS MIN 'ISMONG TING ‘suondo BIUIADI JO 8jB]S
Z1g-7

~08———LLGAl SONIAOHd HO SLVIS

YQIROS 0} aiqe} [3818S

U.S. Patent

Hoo PY) - ish We sUPSPPYeMPURRS/INO BAHBWOYS MMM -CDIY | an oor “o. oe |

ima _ Boo, seyonBy mak wy eng ||
es JBLOIEX] JeUSW! YOSCIIN, - SABES [9


US 7,885,981 B2

Sheet 31 of 35

Feb. 8, 2011

U.S. Patent

V6

VIA

il

y
t

{_1817 J0 doy |

[SwOn 1552U |

ABLNNOD ONISMOUE

sV/\NNIN3SHS

(ebed sad smos [Zi] ® spiooe: 1z Buyeyo) z 40 2 3d

31dO3d

aay

ses

ae

YO ‘HDUVIS M3N ‘3SMOHS TINS

INJAJ LOVINOD = ALINNLYOddO OlpRes © EsMolg

2 t 9:02:24 tooz/zvoll itd (eeyoIy ‘vewyney[9¥'02-21 L00z/Z 1/01 Tdwwug IseuoWy ‘vewyney | VS BIARISOBNAT

Z|] 16-60-L1 1002/21/01] dug ieeuowy “uewney | 6:60:21 1002/2 1/0} ind [SELENA “ueUyMEN || VvaWa) SaeEM] St

2 | SE-ES-21 1002/21/01] ditud reeyony ‘vewney | LEeS:Z1 booge ol dinud JSBYOIW “UEWNEY SOM HN] WSN a et

| Bi [BE°12:L1 1002/2 701 Jd WELW “veWITE Vaal “Aayiny 2ST

e|[eszzi $002/2 1/01] duc yaeyoIN ‘wouyney [es-22:z4 +002/2 1/01 dna (eeYRHA ‘UeUNey| [ VaN3| Uapaems) O€

a! Conaeal a eRYOHY ‘URWYME | SSPL:L1 LOOZ/Z OL diud peWNIW UeWINey || VAN} uredg | 02101
JOL:60:21 LO0Z/Z1/01) ciyual eeyoqy ‘uEWMeD | 01:60:21 LOOZ/Z1/08 [dinda jaeyoW ‘UEUyNey| VAN] __puenoog] plist!
182:91-21 LO0e/L1/01/ dud eeuoHy ‘wewyney ) €2:91-L1 LOOG/L1/01 dita FaeUOW “uewyney| Vana PURIOd) 7 22 {$1
ferzect toog/2./0y Chie BUI ‘UeWNEY | 29:22:21 1002/21/01 ditug jeyOW ‘UeUNNEYy WAN Kenuon) _ 6 ser
[eerkLt LOOZ/L OL] ditug jeeuoryy ‘ueUyNeny i REPEL booe/.i0 fduud jeeyOHY ‘UEWIINED) VAW3 a fey 61 /eT
OLOLZ1 LOOg/Z LOL dinug jeeuoyy “ueWINEy [ovou.t Looziziros Fatt (BELOIN ‘UeWITEY || Vana - pue|all] 91 Tr
ZEISLE MOOSE HON dyiug joByowy ‘UewsNEY || 22-12:2b LOOZ/Z1/04 dud jeeUoWY ‘LEWNES VaNa 309015) ] 92/07
BIeQ PayIpoy Ise] suaspy Aq pay:powy areq Aquat siasp Aq a uolbey auleN Anunog, —_ dequann Anunog FF

—
a

‘suondo Ajunoy

[ASMOH8l AHLNNOD
ASMOIQ 0} B/GE} }08|8S

der sOoL sewonty meq wa ag [|

JS1O}GXS JSLUUSYU! YOSOIOIW - AIRES (7

606


US 7,885,981 B2

Sheet 32 of 35

Feb. 8, 2011

U.S. Patent

d6

Ola

ua ® CE)

i

LA A TRE

SOUILE 1G || UKeTg
seuueg {24S
vsn || [ owen Anuno

z | | wequiny AUNE>

Anunos ui spiooey ayepdr

dqgvy YO ‘HDWVES MAN ‘3SMONS TINd ‘suondo Anunog

AYLNNOD HOI ONILIGS

L11da] AYLNNOD

s/\N/WaHS

ASMOIq 0} |GEl 99185
LNSAZ LOVINOD = ALINNIBOddO Cues @ easmoig

31dO3d

 aWOH

VW

usayoy

@)

dH soo] saworBy Maik wy ang ||
Fal hel JOOHOXS] OUENLY YOSOOHW - GAIBUBLOS (3


US 7,885,981 B2

Sheet 33 of 35

Feb. 8, 2011

U.S. Patent

pula] ®

| [RETO WORE) [SMORTe WAR]

Or LL:2 L002 Vol} did feeUoIN ‘ueugne | BP:21:2 LOOZ/EL/O1] dinud reeyo ‘uEWREy|T Yor) L azemelaq|| | 8
| eee eeenene |S | L
| BP:L1:2 LOOZEL/OL dintud jeeyoNN ‘veuyney | er-Li2 poogre 04 | diitud Jeu ‘UEWINEY [ vsn] ynojo@uuog || 19) LIZ
“LL diiug jaeyoiyy ‘ue cL d j Wy yen! 1
| @¥:22 Looee von] dua eeuoun wine ere weve] a FPeuoyN “ue vsn| opei0}09| 09 gid
nLb diye 198 ‘ nL ‘ wall ~ ~ Y
ic: | WWMd BYONN ‘UEWINEY || BPZ12 LOOZEL/OL | dyud feeuoNN ‘ueUyney ysn| Buoyed) vol git
BP-LL-2 LOOCEL/O dniud eeu ‘vewjney] er 142 LOOZ/E OL} dinud jeeuoIN ‘ueWney| Wor! sesuR IY “HY, rt 3
| ar2k2 Loocre oul dine etoHN vewne] SPLie bOoereWOL] dius eo uewiney|! YEAT euozMy|, Zvi ele
| BY:LE:2 LOOeE LOL: did faBuOIN ‘ueUyney [ erie booze o1 did BEYOIN "URWINEN |) WSOP) BYSEIy| yy L. _ ate
ZV-LL2 LOE L/ON dug BLOWN ‘uEUNMEy|) ZP:Z1:Z LOONEL/OLY diya eu “UPI Wi LIT
Corr a NENT OT BSR —— aaa
L 50 aye}S 10 8}8\S feouIAd:g JO B1e1S

| SMOY JOS} | abed iad smoi{” 8] @ spsooel 4g Bulyeyoy) / Jo | abeg

Ol6-2_, Gav uo ‘iouvas MIN ‘IsmOua TInd ‘SUONdO BOUIADId 10 BIS

c#AMLNNOD HOS Z16
JONIAOUd HO FLVLS SNISMOUS 806

906~2_,T3SMOUE] SONIAOUd HO SLVIS <- IGS] ANINNOD

SSMO1q 0} S|GEI 195|05
31d04d LN3AZ LOVINOD ALINALYOddO Obes © BSMOIg

an

asf Sf esmoseyenreetngnueo SATEWOUNS pe mmc Cal

er a

x[eT] 102010x] JOLUE}U} YORI - SnIRWOLDS Je)


US 7,885,981 B2

Sheet 34 of 35

Feb. 8, 2011

U.S. Patent

G6 ‘Sls

awa @® CC)

10}8q POIHPOW 1st)
SISStV AG PSIDOW
[980 Anuy

"8S 7] Aq parsiuy

Tt

:AqunOD

u

7oweN eoUIAOld 40 27815

at SOUIA0ld JO 9383

pa ssaidxa, aqeuz (]

816 Gdv YO ‘HDEVES MIN ‘3SMOUS TInd ‘SUONO BOUIADLY 40 A}e1S

BOUIADg JQ AJE}S Ul SP1DIEH JO} YOIBAS

@# AMLNNOD HOS 026
JONIAOUd HO SLVLS ONIHOHVaS

Vl6~ 2_+[HouWas] SONIAOHd HO SLVLS <- Lida] AHLNNOD

fa[___ 8SMOIq 0} BjqE} j99}85 |
AidOAd = LNSASLOVINOD = ALINALYOddO Cuoeag @ esmaig

eR NE SRE A AR EEA

a


US 7,885,981 B2

Sheet 35 of 35

Feb. 8, 2011

U.S. Patent

JOUIAIU] D [|

[av-ct'20 ,o0z/Z1/0 oF Gig }ORYOIN ‘veuyne | 87-41-20 LO0z/E 01
BLO LODE LOL! dyud jeeUOW ‘WEWNeY || 8:21:20 LOOZ/EL/O

dit J@E4OIN ‘vewyne vsni| ei0¥e q HON a i
ONT pe

did ]eUOIN ‘uRWyNey|; WS) BUNOIED YON IT
aed Paylpow iseq| = asp) Aq paipipoyy ayeq Aquy] = svar) Aq pazequaliAnunog || OWEN “0 arele al “10 eS eoUIAOg 10 81619 if
[SMOy 19894 | (afed sad smoi [9] @ Spiooad 2 Burjeyoy) | 4O | 3DWd
GOV YOHDHVES G3SIAIY‘HOYWaS MANJ3SMOUG Ga¥alid ‘3SMON TiNd ‘SUONGO SOUIADI 10 BIEIS

7e6

(34314)
Z#AHLNNOD HOA 926
JONIAOUd HO SLIVLS ONISMOHE

706 TaSMOUE] JONIAOHd HO ALVIS <~ LLIdS] AHLNNOD

S/\TININSHDS ——_—__ [=| 8SMOIq 0} B/qe} 199185]
¥1dO4d LN3AF LOVINOD ALINALYOddO ORES @ BSMOIg

GH SiS] saworky mak wy ony
Xie 16.100} OUIOTUL YORO.OIW - BANBUIUDS (g

dsl ypIPPyOCyeAIewayoSg WOT aAeLUEYOS"

useyey «dS emo

mM Y (alssonev


US 7,885,981 B2

1
SYSTEM AND METHOD FOR GENERATING
AUTOMATIC USER INTERFACE FOR
ARBITRARILY COMPLEX OR LARGE
DATABASES

CROSS-REFERENCE TO RELATED

APPLICATIONS
This application is a continuation of U.S. patent applica-
tion Ser. No. 10/428,209 filed Apr. 30, 2003 (now issued as
USS. Pat. No. 7,318,066), which is a continuation of Interna-
tional Application No. PCT/US01/42867, filed Oct. 31, 2001,
which claims priority to U.S. patent application Ser. No.
09/703,267, now abandoned, filed Oct. 31, 2000, and U.S.
provisional patent application Ser. No. 60/276,385 filed Mar.
16, 2001.
COMPUTER PROGRAM LISTING
The computer program listing submitted on compact disc
is hereby incorporated by reference. The compact disc con-
tains the following directory structure:
Date of Size in
File Name and Path Creation Bytes
SchemaliVe/AddEditForm.jsp 0/30/2001 36,431
Schemalive/BalloonHelp.jsp 0/30/2001 2,375
Schemalive/Browse.jsp 0/30/2001 42,376
Schemalive/DataDictionary.jsp 0/30/200 1,501
Schemalive/DoAddEdit.jsp 0/30/2001 18,925
Schemalive/DoViewGenerator.jsp 0/30/200 1,356
Schemalive/Error500.jsp 0/30/2001 3,670
Schemalive/ExpiredSession.jsp 0/30/2001 3,853
Schemalive/OutOfSequence.jsp 0/30/2001 4,306
Schemalive/showSession.jsp 0/30/2001 5,317
Schemalive/common/EmptyParamCheck.jsp 0/30/200 592
Schemalive/common/EntryPoints.jsp 0/30/200 319
Schemalive/common/GlobalHeaderHTML.jsp 0/30/2001 4,096
Schemalive/common/GlobalHeaderJavascript.jsp 0/30/2001 13,557
Schemalive/common/GlobalHeaderVARS jsp 0/30/200 952
Schemalive/WEB-INF/web.xml 0/30/200 3,783
Schemalive/WEB-INF/classes/Connection. properties 0/30/200 186
Schemalive/WEB-INF/classes/common/Debug.java 0/30/200 1,591
Schemalive/WEB- 0/30/200 552
NF/classes/dbUtils/CustomCaps.java
Schemalive/WEB- 0/30/200 1,218
NF/classes/dbUtils/CustomDrillDown.java
Schemalive/WEB- 0/30/200 1,094
NF/classes/dbUtils/CustomDropDown.java
Schemalive/WEB- 0/30/200 968
NF/classes/dbUtils/CustomDropDownComponent.java
Schemalive/WEB- 0/30/200 8,892
NF/classes/dbUtils/DataDictionary. java
Schemalive/WEB- 0/30/200 6,864
NF/classes/dbUtils/DataDictionaryServlet.java
Schemalive/WEB- 0/30/2001 11,537
NF/classes/dbUtils/DataDictionaryTD.java
Schemalive/WEB- 0/30/200 2,537
NF/classes/dbUtils/MasterDetail java
Schemalive/WEB- 0/30/200 3,922
NF/classes/dbUtils/MasterDetailServlet.java
Schemalive/WEB-INF/classes/dbUtils/SQLUtiL java 0/30/2001 3,390
Schemalive/WEB- 0/30/2001 21,728
NF/classes/dbUtils/TableDescriptor.java
Schemalive/WEB- 0/30/2001 21,979
NF/classes/dbUtils. ViewGenerator.java
Schemalive/WEB- 0/30/200 1,325
NF/classes/HTMLUtils/Balloon.java
Schemalive/WEB- 0/30/200 5,264
NF/classes/HTMLUtils/BalloonHelp.java
Schemalive/WEB- 0/30/2001 41,339
NF/classes/HTMLUtils/TableDescriptorDisplay.java

10

20

25

45

60

65

2
-continued
Date of Size in
File Name and Path Creation Bytes
Schemalive/WEB- 0/30/200 1,319
NF/classes/sessionUtils/ManageSession.java
Schemalive/WEB- 0/30/200 5,045
NF/classes/sessionUtils/StackElement.java
Schemalive/WEB- 0/30/200 8,732
NF/classes/sessionUtils/StackTag.java
Schemalive/WEB- 0/30/200 581
NF/classes/sessionUtils/StackTagExtraInfo.java
Schemalive/WEB-INF/classes/tagUtils/ViewTag.java 0/30/2001 2,461
Schemalive/WEB- 0/30/200 785
NF/classes/tagUtils/ViewTagExtralnfo.java
Schemalive/WEB-INF/taglib/stack.tld 0/30/200 1,219
Schemalive/WEB-INF/taglib/view.tld 0/30/200 922
SQL/CreateSchema.sql 0/30/2001 32,698

BACKGROUND OF THE INVENTION

1. Field of the Invention

The present invention relates to the field of data processing,
and more particularly to relational computer databases, and to
systems and methods for automatically generating without
any custom programming a user interface for the database,
and/or a complete application utilizing the database.

2. Description of the Related Art

Modern databases—and in particular, complex or large
databases which serve many concurrent users—are con-
structed as “client/server” or “n-tier” (client/server/server)
systems, wherein specialized components perform separate
(and carefully delineated) functions. At a minimum, such
systems are generally composed of a “back-end” relational
database management system (RDBMS)—which maintains
and manipulates information according to requests submitted
by other components or software processes (or expert human
administrators) via open-standard query languages (i.e.,
SQL)—and a “front-end” presentation layer or user interface,
which mediates the end-users’ work with the back-end data.

Developing such a database system consists both in defin-
ing the organizational structure to be used by the back-end for
storing data (that is, the complement of tables which store
data, and the relational links between these tables)—known
as a “schema” or “data model”—and in building a front-end
program (or “application”) via which end-users can manipu-
late this data (and which communicates with the back-end on
the users’ behalf). And although the back- and front-end
components must be closely synchronized and reflect similar
structures, these respective development efforts are typically
rather separate—with the requisite synchronization and par-
allels in structuring being effected only manually.

Moreover, the construction of front-end applications is
generally undertaken using conventional third- or fourth-gen-
eration computer languages, which require by-hand coding at
avery low level of functionality. Current tools for easing the
development burden are limited to fairly specific (and, still,
fairly low-level) uses—among them, providing more-sophis-
ticated or “richer” controls for manipulating individual data
elements; associating individual user-interface elements with
specific back-end storage locations; or—at best—offering
“form generator” or “wizard” facilities to automatically gen-
erate the code for a simple UI display which manipulates a
single underlying (back-end) data table.

Even with such tools, considerable work remains in build-
ing a complete, fully-functional UI for a back-end schema of
any appreciable size or complexity—especially where indus-

US 7,885,981 B2

3

trial-grade performance and reliability is required. And as
enterprise-scale data models continue to grow, the attendant
explosion of manual-coding requirements quickly becomes
unwieldy—and eventually, untenable.

BRIEF SUMMARY OF THE INVENTION

It is an object of the invention to provide a complete and
fully functional user interface (UI) for any arbitrarily com-
plex or large database schema, without any custom software
programming.

It is another object of the invention that, once a back-end
schema has been designed and constructed within the
RDBMS, the system can automatically “interrogate” this
schema, and “absorb” its structure into an internal cache (or,
at the cost of real-time performance, the internal caching
mechanism can be sidestepped).

It is a further object of the invention to present to end-users,
for any arbitrarily complex or large database, a comprehen-
sive application through which the back-end can be operated,
and through which all conventional database activities—
searching, listing, adding, editing—can be supported, across
all base-tables comprising the schema.

It is yet a further object of the invention that the application
so presented reveals (and enforces) the relational/hierarchical
organization among the tables within the back-end via
smoothly integrated UI mechanisms which are embedded
directly into the base-table screen displays—providing a
natural, powerful, and easy-to-use environment for managing
complex data relationships and interactions.

One embodiment (the “reference implementation”) of the
present invention achieves these and other objects by provid-
ing a system, currently written in Java and JSP, which auto-
matically and dynamically (“on-the-fly”) generates (in
HTML, Javascript, and HTTP/CGI code), a fully functional
UI system, based upon, and connected directly to, the under-
lying data model (as instantiated within an Oracle8i SQL
RDBMS). The UI is built based on an automated interroga-
tion of the RDBMS, either as needed (on-the-fly) or by build-
ing an in-memory representation of the data model. The gen-
erated UI comprises all mode displays (e.g., browse, search,
edit, and add) for all tables, and a full complement of mecha-
nisms, integrated into the mode displays for representing,
navigating, and managing relationships across tables. This
embodiment has the capability of creating such a UI where
the underlying RDBMS is complex and comprises a plurality
of tables, constraints, and relationships. It utilizes a hierar-
chical “context stack” for maintaining (and suspending) the
working state of a particular table (comprising selected
record, display “mode”, pending form-field entries, in-effect
search-filter parameters, Browse-mode scroll position, and
any filter constraints imposed from above stack contexts)
while “drilling down” across relationships to work with
related information (in a possibly constrained working con-
text) and returning relevant changes to the parent-context
table, and a corresponding UI convention for displaying and
navigating this stack. The embodiment provides a set of rules
for traversing/navigating the context stack. It further provides
naming conventions and annotational methods for enhancing
and extending the representation of table structures, con-
straints, and relationships within the back-end so as to more
fully support revelation of the schema structure through
external interrogation.

10

15

20

25

30

35

40

45

50

55

60

65

4
BRIEF DESCRIPTION OF THE DRAWINGS

The following briefly describes the accompanying draw-
ings:

FIG. 1 is a normal “browse mode” display from the refer-
ence implementation.

FIG. 2 is a normal “search mode” display from the refer-
ence implementation.

FIG. 3 is anormal “edit mode” display from the reference
implementation.

FIG. 4 is a normal “add mode” display from the reference
implementation.

FIGS. 5A-5W is a diagram of the demonstration RDBMS
schema from the reference implementation.

FIG. 6 is a diagram of the relationship types comprised in
the paradigm of the present invention.

FIG. 7 is an annotated screen dump showing the active
elements in a “browse mode” display.

FIG. 8 is an annotated screen dump showing the active
elements in an “edit” “add” or “search” mode display.

FIGS. 9A-9E show an exemplary “master/detail drill-
down” and a doubly-constrained subordinate table search as
rendered in the reference implementation.

In addition, the complete source code for the reference
implementation, and scripts for creating the reference dem-
onstration schema (and demonstrating the extended back-end
annotational methods employed) are set forth in the annexed
appendix.

DETAILED DESCRIPTION OF THE PREFERRED
EMBODIMENT

The preferred embodiment of the invention, as illustrated
in FIGS. 1 through 9E, corresponds in most respects to an
implementation of the invention being developed under the
trademark SCHEMALIVE™ which is herein referred to as
the “reference implementation.” The preferred embodiment
is further represented substantially in full by the reference-
implementation source code files, documentation and scripts
in the appendices accompanying and incorporated by refer-
ence into this application, as further described in the text that
follows. The preferred embodiment includes in addition some
further developments which are herein described which have
not as yet been rendered in the reference implementation.

Although the invention has been most specifically illus-
trated with a particular preferred embodiment, it should be
understood that the invention concerns the principles by
which such embodiment may be designed, and 1s by no means
limited to the configuration shown.

As can be more fully appreciated by studying the accom-
panying source code, the preferred embodiment operates in
accordance with a comprehensive and formalized paradigm
for presenting a(n end-)user interface to any arbitrarily large
or complex relational database schema (or “data model”’), as
represented via generally accepted data-modeling conven-
tions (comprising the explicit declaration of any cross-table
“referential integrity” [RI] constraints, and full exploitation
of available native-RDBMS datatype- and constraint-at-
tribute declaration mechanisms) and instantiated within a
commercial-grade SQL RDBMS engine (racle8i, for
example, in the reference implementation). The paradigm
encompasses:

A set of “modes” for interacting with a(ny) given database

table (which modes, taken together, cover all desired
end-user operations which may be effected upon such

US 7,885,981 B2

5

tables), and a corresponding display format (“‘screen” or

“window” architecture) for each mode. These modes

comprise:

Browse (full or filtered, possibly context-constrained)
(see FIG. 1)

SEARCH (new or revised, full or context-constrained) (see
FIG. 2)

Eprr (full or context-constrained) (see FIG. 3)

Aop (full or context-constrained) (see FIG. 4)

Certain key screen elements for navigation control/support

are shared across all of these displays (see FIGS. 7-8):

A Trrte Bar 712, 814 which indicates current mode,
current table, context-constraint (if any), and filter
indicator (if search-filter is in effect)

A Tasie-NavicaTion HEaper 702, 802 which provides
direct “random access” to any system table, in either
Browse or Search mode, via either a full (dropdown-)
list of all (available) system tables or a short list of
(clickable) “quick links” to key tables. Use of this
header will also reset (and abandon) any nested stack-
contexts in effect

A Context-Stack Dispiay 704, 804 which indicates the
active table and mode at each level in the context stack
(described below), and also allows direct navigation
(“pop-up”) to any suspended (“higher”) stack-level
(with abandonment of all lower levels)

A Mope-NavicaTION Bar 710, 812 which allows the user
to move amongst the various available mode displays
for the current working table (or “stack level’’). The
list of available modes varies, dynamically, according
to both the user’s access rights (described below) and
the current state of the working session (i.e., whether
a search-filter is currently in effect). The full list of
possible mode-navigation options is: FULL
BROWSE, FILTERED BROWSE, NEW SEARCH,
REVISED SEARCH, and ADD. Note that FIL-
TERED BROWSE and REVISED SEARCH appear
only when a search-filter is currently in effect; if so,
the former restores a Browse-mode display with the
most recent filter and scroll-position, while the latter
pre-populates a Search-mode display with the current
filter parameters

Additional Mope-Navication 706 to allow “edit mode”
for a single table record

Scroit Navication 708 allowing a(n end) user to navigate
through all the records in a table and also allowing the
user to dynamically change the number of records
contained in the webpage displayed (i.e., dynamic
page-sizing)

Hor Linx 806 for “drill-down” to cross-reference table
(e.g., in the embodiment shown in FIG. 8, “Country”’)

Hor Linx 808 for “drill-down” to master-detail table
(e.g., in the embodiment shown in FIG. 8, “City”)

Cross-REFERENCE FIELD 810 to generate dropdown lists of
available foreign-key values (with automatic correla-
tion to display-name labels)

FreLp 811 for free-form text entry, to provide automatic
client-side data validation according to back-end
datatype (for edit/add mode only)

Supmir Button 816 commits changes, and executes
appropriate mode-switch (and stack-context return, if
appropriate)

Note that, although not shown in the reference implemen-

tation, DELETE capability is also readily incorporated—
as either (or both) true record-removal from the under-
lying table, and/or record “flagging” for UI suppression
(with continued underlying-table record retention)—

20

25

40

45

60

65

6

simply by adding (according to the user’s access rights,
potentially) another pushbutton within the Edit-mode
display

A set of rules and methods for moving among the modes

(and, hence, displays) for a given table (see “mode navi-

gation” in FIG. 7), comprising:

Explicit (manual) mode-selection via the mode-naviga-
tion bar

Browse-to-Edit mode-transition for a specific record, by
clicking on a Browse-row’s leftmost-column “row
label” link

Implicit return-to-Browse transitions from other modes:

From Edit mode, upon record commit (Uppate push-
button)

From Add-mode, upon record commit (App pushbut-
ton), with optional override via an on-screen check-
box setting which “locks” user into Add mode for
the current table until checkbox is cleared, or until
user explicitly navigates away

From Search mode, upon filter commit (SEaRcH push-
button), with optional override via an on-screen
checkbox setting which enables direct Search-to-
Edit transitions for single-row result-sets, provided
user has requisite edit rights. In the reference
implementation, this checkbox setting is session-
persistent (that is, it remains in effect until the
user’s session terminates, so long as the user does
not explicitly turn it off); it could as easily be made
“sticky” to a variety of degrees—lasting for only a
single search, for a single stack-context session, or
even across system sessions (via database-stored
user “preferences’’)

A set of “relationship types” between individual database

tables (which types, taken together, cover all desired
connections between any two tables), and a correspond-
ing UI convention for representing each type of relation-
ship “in-place” within the (single-table mode displays.
As shown in FIG. 6, these “relationship types” comprise:
CROSS-REFERENCE 602 (a.k.a. “foreign key” or “FK’?)}—
single primary-table record keeps pointer to any
single foreign-table record
Master/Detar 604 (a.k.a. “parent/child” or “one-to-
many”)—imultiple foreign-table records keep point-
ers to single primary-table record

A set of rules and methods both for extending the repre-

sentation of any single table (according to its relation-

ships to other tables) (FIGS. 7 and 8), and for managing

(and navigating across) these relationships (comprising

the resolution, display, and manipulation of cross-refer-

enced elements within a primary table’s display context,
and the creation or revision of related-table information
within the context of a primary table by “drilling down”
toa secondary table, constraining the “working context”
of that secondary table as necessary, and “passing back”
relevant changes to the primary-table context) (see FIG.

9). Said rules and methods comprise:

Foreign-key fields occurring within a table—that is,
fields which contain “keys” that uniquely identify
cross-referenced records from secondary (a.k.a. “for-
eign”, or “referenced’”) tables—are automatically
“resolved” for display purposes, so as to substitute a
corresponding (and, presumably, more meaningful)
“name” field from the foreign-table record (in lieu of
the key value itself—which, per generally accepted
data-modeling conventions, is generally intentionally
devoid of intrinsic meaning):

US 7,885,981 B2

7

The paradigm specifies a “default” behavior for deter-
mining this name field within the foreign-table
record, based (optionally) upon a combination of
field-naming conventions, field datatype (i.e., char-
acter data), field constraints (i.e., unique values),
and/or order of appearance within the table defini-
tion (1.e., first non-primary-key field meeting other
requirements)

In the reference implementation, this field is the first
one whose name ends with “_NAME”’—or, in spe-
cial-case handling for tables containing “LAST_
NAME”, “FIRST_NAME”, and “MIDDLE_
NAME” columns, a composite “Last, First
Middle” value. Additional special-case processing
supports successive cross-referencing through
multiple tables until a “_NAME” field is discov-
ered, if (and only if) intervening tables include
unique-value constrained FK columns. If no name
field can be resolved, the UI displays the actual key
values (that is, the primary-key values from the
foreign table) themselves

Alternatively, the rules for determining the name field
can themselves be made “soft’”—that is, specified
once (globally) by a system administrator, and used
thereafter to drive all (default) name-field construc-
tions. (See the discussion of naming conventions
and annotational methods, below.)

The default behavior for name-field resolution can
also be overridden with (either or both) “global”
and/or “local” custom-name definitions for specific
tables, as described below (within the discussion of
extensions to, and customization of, the baseline UI
paradigm)

Auto-resolution of display-names applies to both
Browse-mode cells (where a single display-name is
derived and substituted for a given foreign-key
value), and Add/Edit/Search form-fields (where a
dropdown list includes the display-names for all
foreign-table records, and UI actions on this list are
correlated to the underlying keys)

For “master” tables in any master/detail relationships (as

specified via the core complement of naming conven-

tions and annotational methods, discussed below),
record displays incorporate a “pseudo-field” for each
associated detail-table, which indicates the number

(i.e., count) of corresponding detail (or “child’’)

records belonging to the displayed master (or “par-

ent’) record:

In the reference implementation, the master/detail
pseudo-fields are included only for Edit-mode dis-
plays (so as to allow for streamlined system logic
and, therefore, improved run-time performance)

Alternatively, these pseudo-fields can also be (and
have been, in alternate implementations) readily
incorporated into the Browse-, Search-, and Add-
mode displays, at the cost of added complexity in
supporting views (1.e., correlated-subqueries for
Browse-mode displays) and state-management
logic (.e., transitioning to Edit mode for not-yet-
completed Add-mode transactions before allowing
navigation to associated detail-table contexts
where the user might add dependent “child”
records), and the attendant performance implica-
tions

To enhance the run-time performance of Browse-mode

displays, the system automatically generates a corre-

sponding back-end “view” for every table, which:

15

20

25

40

45

60

65

8

Resolves all FK displays, per above
Incorporates any and all default-behavior overrides
By rendering (and, subsequently, executing) this view
in the native language of the underlying RDBMS
(1.e., SQL), effectively “projects” this extended
representation of the table (according to its rela-
tionships to other tables) from the software (where
it is derived) back into the RDBMS environment
itself, for significantly improved rendering perfor-
mance and reduced network- and application-
server loading
See the discussion, below, of rules and methods for travers-
ing/navigating the context stack, for more information
on the creation and revision of related-table information
within the context of a primary table
A set of user-interface conventions for signaling other

(non-referential) data constraints, and for enforcing

adherence to same, across all Add/Edit/Search forms,

comprising:

For “required” fields (i.e., underlying table-columns
with “NOT NULL” CHECK constraints, in the refer-
ence implementation), the corresponding data-field
labels (descriptive names appearing to the left of the
entry areas) are displayed in boldface (see FIG. 3)

The physical width of text-entry (vs. dropdown) fields—
as well as the maximum permitted length for entered
text—is driven directly by the specified data-length of
the underlying table columns.

For text fields whose length-limit exceeds a certain
threshold (globally defined, in the reference imple-
mentation, though potentially user-preference config-
urable), the on-screen field is presented as a multiline,
vertically scrollable control with multiple-row vis-
ibility, rather than the default single-row (and non-
scrollable) entry field. (In the reference implementa-
tion, this is an HTML “TEXTAREA” rather than an
“INPUT” field.) Note that this functionality is also
applied to Browse-mode table cells, so that occasional
lengthy cell-entries are made scrollable (and therefore
don’t distort an otherwise reasonable table-layout)

Required fields (per above)—along with numeric, date,
and text fields (whose length might exceed the thresh-
old specification described above)—also generate
automatic validation logic which prompts the user to
correct any erroneous or problematic data-entries
locally—that is, on the end-user’s (or “client”) com-
puter, before any communication with the database
takes place. In the reference implementation (whichis
web-based), this manifests as client-side Javascript
routines—along with all requisite invocation logic,
automatically embedded into the appropriate entry-
field specifications—which are delivered along with
the (system-generated) web-page. Failed validation
(upon field-exit and/or at page-submission time,
depending on the type of validation) puts the “focus”
back into the corresponding problem-field (or the first
of several), highlights (“selects”’) the entire field con-
tents, and displays an informational pop-up dialog
box explaining the problem. This effectively
“projects” constraint-awareness from the back-end
RDBMS (where the constraints are defined) into the
front-end client, for significantly improved perfor-
mance and reduced network- and database-loading

A hierarchical “context stack” for maintaining (and sus-
pending) the working state of a particular table (com-
prising selected record, display mode, pending form-
field entries, in-effect search-filter parameters, Browse-

US 7,885,981 B2

9

mode scroll position, and any filter constraints imposed

from above stack contexts) while “drilling down” across

relationships to work with related information (in a pos-
sibly constrained working context) and returning rel-
evant changes to the parent-context table, and a corre-
sponding UI convention for displaying and navigating
this stack

A set of rules and methods for traversing/navigating the
context stack, among them:

The user is always working at the “bottom” (or right-
most, within the stack display) level of the context
stack. Typically (i.e., at initial system entry, or follow-
ing direct access via the table-navigation header),
there is only one level in the stack (that is, no nested or
suspended stack contexts are in effect)

Changing modes fora given table (or “stack context’) is
referred to as “lateral” or “horizontal” movement
(see, e.g., FIG. 7)

e.g., in the embodiment shown in FIG. 9A, a click on
a mode transition button 902 (shown in this
example as “19”) allows for a “lateral” or “horizon-
tal” mode transition to “edit” (shown in FIG. 9B)

Traversing relationships (either cross-reference or mas-
ter/detail) is referred to as “drill-down” (and, upon
return, “pop-up”) or “vertical” movement across
tables (and nested stack contexts) (see, e.g., FIG. 9)
e.g., in the embodiment shown in FIG. 9B, a click on

a “drill-down” button 904 (shown in this example
as “State or Province’’) allows for a “drill-down” to
related detail records (shown in FIG. 9C)

Vertical navigation therefore always increases or
decreases the “stack depth”, while horizontal naviga-
tion merely alters the “view” of the current table—
affecting only the current (bottom-most) stack level

Drill-downs are supported by enabling “hot-linked” (or
“clickable’”’) labels for the related data fields in the
primary table (stack context) (see FIGS. 9B and 9C)

A drill-down traversal “suspends” the above stack con-
text

Drilling-down across a cross-reference relationship
imposes no “context constraints” on the lower stack
context, while drilling-down across a master/detail
link constrains the subordinate table to only those
records “belonging” to the above stack-context table-
record (see, e.g., FIG. 9C), such that:

A superseding filter is applied to all detail-table mode
displays, separate from (and invisible to) any
lower-context search-filters which may subse-
quently be applied by the user

Even a “full browse” request (with no explicit search-
filter) therefore shows only related child-records

The title bar 912, 920, 926 (across all modes) sepa-
rately indicates the subordinate-table context con-
straint with a “FOR <PARENT-
TABLE><PARENT RECORD>’-style suffix (vs.
the “(FILTERED)” suffix, which indicates a user-
applied search-filter). (For example, Title Bar 912
of FIG. 9C shows constraint from above stack con-
text, Title Bar 920 of FIG. 9D still shows the con-
text-constraint, and Title Bar 926 of FIG. 9E
reflects both the above context-constraint and the
presence of a current-context “filter.”)

In Edit mode (for a specific child-table record), the
user is prevented from changing the datum that
links the child record to its parent record, by filter-
ing the dropdown-list for the corresponding FK
field so that it contains only the parent-record value

5

10

20

25

35

40

45

50

55

60

65

10

Full lateral movement (mode-switching) is supported
within the subordinate stack context

User can “return” (ascend the context stack) either by
“committing” a lower-level action (a database edit or
addition), or by abandoning the subordinate stack
context (via the context-stack display or table-navi-
gation header). In the former case, committed
changes are automatically propagated to the above
stack context and displayed in the corresponding
mode display (i.e., “results” are “returned’’) unless the
user has enabled Power App in the lower context; in
the latter case, any pending changes are abandoned,
and the above stack context is restored exactly as
originally suspended

Cross-reference drill-downs are “context sensitive” to
the parent-field status: A drill-down from a blank
parent-field enters the subordinate stack context in
“Add” mode, while a drill-down from a non-blank
parent-field enters the subordinate stack context in
“Edit” mode for the already-selected (cross-refer-
enced) secondary-table record. Nevertheless, the
default drill-down mode can be “overridden” (that is,
abandoned) via a lateral or horizontal mode-switch in
the lower stack context. In any event (and regardless
of intervening actions), a “committed” return from a
subordinate stack context will always properly update
the parent record

Master/detail drill-downs generally enter the subordi-
nate stack context in “Browse” mode, although this
behavior can be modified as a “business rule” via the
described customization mechanisms (see FIG. 9 and
the CreateSchema.sql script)

The user may always return directly to any suspended
(“higher”) stack-context by clicking on the corre-
sponding stack-display entry 908. Doing so effec-
tively “pops” the stack, and abandons any work-in-
progress in all lower contexts. (For the embodiment
shown in FIG. 9C, for example, clicking on “COUN-
TRY [EDIT]’ abandons the current stack content and
restores the above context exactly as originally sus-
pended, i.e., as shown in FIG. 9B.)

The user may further search or filter records at the sub-
ordinate stack context level by clicking on the “New
Search” link in Mode Navigation 910. In the embodi-
ment shown, the further search page (see, e.g., FIG.
9D) comprises the following screen elements:

Stack Disptay 914 which still shows the nested con-
texts
SEARCH FIELD 916. In the embodiment shown in FIG.
9D, search field 916 is free-form text entry, wherein
the text “North” adds an additional “filter,” requir-
ing that “State or Province Name” begins with
“NORTH”.
TrrLe Bar 920 which still shows the context constraint
Sear CH InitiaTING Button 918, which, when clicked,
initiates a “lateral” or “horizontal” mode transition
to (filtered) “browse” mode (see, e.g., FIG. 9E).
The embodiment shown in FIG. 9E comprises the
following screen elements:
Stack Disptay 922 which still shows nested con-
texts
Tite Bar 926 which now reflects both the above
context-restraint (as shown, e.g., in FIG. 9D) and
the presence of current-context “filter”
Scroit Navication 924 allowing the user to navigate
through all the records in a table and also allow-
ing the user to dynamically change the number


US 7,885,981 B2

11

of records displayed. In the embodiment shown

in FIG. 9F, manipulating the Scroll Navigation

924 has no effect because all the records under

the current constraint and filter are displayed on

one page, since only two rows now meet both

parent-context constraint and the current “filter.”

Integrated, group-based security mediation, “granular”

both in scope (1.e., global-, table-, row-, or field-level)

and by task (browse, edit, add, delete), which dynami-

cally adjusts all system displays (throughout the entire

UI paradigm) according to the user’s granted access-
rights, such that prohibited options are always hidden

Note, finally, that while the preferred embodiment operates
according to the particular paradigm described above, it
remains possible to effect alternate paradigms which would
nevertheless be consistent with the basic principles of the
invention. For instance, it may be desirable in some instances
to realize instead a “modeless” UI paradigm, such that all
end-user activities (browsing, searching, editing, adding) are
supported by a single, unified display context (such as a
“spreadsheet” display).

Software (written in Java and JSP, in the reference imple-
mentation) automatically and dynamically (“on-the-fly”)
generates a fully functional UI system (written in HTML,
Javascript, and HTTP/CGI in the reference implementation)
based upon, and connected directly to, the underlying data
model (as instantiated within the RDBMS), and in full con-
formance to the described paradigm. In order to generate the
UI, the RDBMS is first interrogated or scanned by this soft-
ware, applying a body of rules to interpret the data model
(comprising its tables; their column-complements, datatypes,
and constraints; and relationships across the tables), and to
correlate same to the UI paradigm (either “on-the-fly”, or by
building an in-memory representation, or “cache”, of said
data model, and by automatically deriving enhanced back-
end “views” of all tables, which are consistent with the para-
digm and which, further, coherently incorporate any and all
extensions, customizations, adaptations, or overrides which
may have been specified as described below). In the reference
implementation, the results of this RDBMS interrogation are
used to construct an internal object representation of the
schema, conforming to a graph in which the nodes represent
database tables, and the edges represent relationships (.e.,
referential integrity links) between these tables. As the UI is
rendered for any given database table, this underlying object
representation is referenced, and appropriate components for
depicting and traversing all cross table links are automatically
included in the resulting display.

A core complement of naming conventions and annota-
tional methods (written in XML, in the reference implemen-
tation) is used for enhancing and extending the representation
of the table structures and relationships (entirely within the
back-end representation of the data model, in the reference
implementation) so as to more fully support revelation of the
schema structure through external interrogation. Said meth-
ods consist of “annotations” (or “comments”) which are
“attached to” (or “associated with’) individual tables or table-
columns within the back-end RDBMS; in discussing these
methods, it is important to note that although there are any
number of alternative embodiments for the formatting, stor-
age, and association of such annotations with their corre-
sponding objects—including (but not limited to): formatting
as XML -tagged, name/value-paired, or fixed-sequence data;
storage within native-RDBMS “comment” fields, applica-
tion-defined database tables, or external (operating system)
disk files; and association via native-RDBMS comment

10

15

20

25

30

35

40

45

50

55

60

65

12

“attachment”, explicit object-naming (within the annotations
themselves), or pointers or keys (attached to the objects them-
selves)—the methods ultimately concern the principles by
which such embodiments may be designed and applied to
illuminating the schema, rather than any particular configu-
ration or embodiment itself. Within the reference implemen-
tation, then, the attachment of annotations, as XML-format-
ted “comments”, directly to database objects, should be
considered illustrative of, rather than essential to, the methods
so described. The core conventions and methods comprise:

The indication of column-datatypes not natively (or explic-
itly) supported by the underlying RDBMS (for example,
“binary” or “yes/no” fields in the Oracle8i-based refer-
ence implementation) yet subject to special handling
within the UI paradigm, via the use of specific object-
name suffixes (“_FLAG’’, in this example)

The specification of master/detail relationships between
tables (as distinguished from a [reverse-|cross-reference
relationship), by associating a table-level annotation
with the master (or “parent”’) table, and indicating both
the table name and the parent-referencing FK field for
each detail table (see comments in the CreateSchema.sql
script)

Following the paradigm, the generated UI comprises all
mode displays for all tables, with integrated (-into-the-mode-
displays) mechanisms for representing, navigating, and man-
aging relationships across tables (comprising hierarchical
context constraint/enforcement, and pass-through/“pop-up”
return, or “propagation”, of subordinate-context results). In
rendering this UI, the preferred embodiment applies logic to
(re-) convert column- and table-names retrieved through
RDBMS interrogation from all-uppercased text, if necessary
(as it is with Oracle8i, in the reference implementation) into
mixed-case, initial-caps text (where only the first letter of
each word—or “token”—is capitalized), and to replace
underscore characters with spaces. The case-restoration logic
is designed to also consider a list of approved acronyms—or,
more generally, “exceptions” —which, when encountered as
tokens within object-name strings, are instead cased exactly
as they appear in the list. (This could mean all-uppercase,
all-lowercase, or any non-conventional mixture of cases, such
as “ZJIPcode”.) This case-exceptions list is provided once,
globally, for the entire system, and impacts all table- and
column-name references throughout the UI presentation. (In
the reference implementation, the list is defined as a string
array within a public “CustomCaps” object; this object could
in turn be initialized via a disk file, or a special database
table.)

The software also constructs and utilizes the above-de-
scribed hierarchical context stack for maintaining (and sus-
pending) the working state of a particular table (comprising
selected record, display mode, pending form-field entries,
in-effect search-filter parameters, Browse-mode scroll posi-
tion, and any filter constraints imposed from above stack
contexts) while “drilling down” across relationships to work
with related information (in a possibly constrained working
context) and returning relevant changes to the parent-context
table, and a corresponding UI convention for displaying and
navigating this stack (see, e.g., stack display 906 in FIG. 9C,
which displays the nested contexts). Note further that, in
addition to its core function in supporting nested working
contexts (and by virtue of its always being on-screen), the
context stack also enables certain ancillary capabilities:

Since the current context (or “table-session”) always cor-
responds to the “bottom” of the stack (1.e., the rightmost
link in the display), the user can “refresh” his current
table-session session by clicking on this link. This can be

US 7,885,981 B2

13

useful, for instance, when the user wishes to “undo” or

revert numerous changes made to a current Edit- or

Add-mode form (but not yet committed) without having

to re-navigate to the current table and record

When a system exception (security violation, internal
error, etc.) occurs, the resulting error screen also incor-
porates a stack display. Although the default error-
screen behavior is to restart the user’s session after a
timed delay (and thereby abandon all work in progress),
the user will often be able to recover his session by
making a selection from the error-page stack display

The preferred embodiment further provides a structured

collection of methods, mechanisms, tools, techniques, and
facilities for extending, customizing, adapting, or overriding
the baseline UI paradigm and software to support non-stan-
dard and/or special requirements (“business rules”), compris-
ing:

Means to “override” the default behavior for FK “display-
name” resolution with (either or both) “global” and/or
“local” custom specifications on how to generate dis-
play-names for a given foreign-key:

Such overrides can be useful, for example, when the
foreign (referenced) table lacks a (resolvable) name
column; when a composite (multiple-field), treated,
or otherwise modified display-name is desired; when
the sort-order within display lists should be modified;
or when the foreign-table records depend on yet other
table-records (foreign, in turn, to the FK-referenced
table) for full name construction (for instance, where
FKs into a “CITY” table depend in turn on FKs from
CITY into a “STATE” table in order to distinguish
like-named cities, such as Portland, Oreg. and Port-
land, Me.)

A custom specification consists of an explicit SQL
expression that generates key-value/display-name
pairs for any and all foreign-table key values

Such specifications will automatically propagate
throughout the entire UI, including all relevant
Browse-mode cells and Add/Edit/Search form-fields

Global display-name specifications are associated as
table-level annotations (see above) with the refer-
enced foreign table

Local specifications are associated instead as column-
level annotations with the referencing (foreign-key)
column in the base-table itself

In this way, both “default” (global, or system-wide) and
“special-case” (local, or single referencing-table
only) custom display-names can be defined for the
same foreign table. Ifa “local” specification is defined
fora given FK-column, it will supersede any “global”
or “default” specification also defined for the refer-
enced (foreign) table.

In the reference implementation, specifications are
made via a special XML tag (“<sql>’) which is
attached to the table or column (for global or local
specifications, respectively) as a “comment”

Ability to alter the order and visibility of individual table-
columns across all mode displays (Browse, Add, Edit,
Search) vs. the actual column-complement and -order-
ing of the associated (underlying) table:

This is sometimes desirable in a post-production envi-
ronment, especially when the particular back-end
RDBMS product in use makes it impractical or
impossible to alter the actual structure of the under-
lying table once it has been populated with data and is
participating in referential-integrity relationships
with other populated tables

10

15

20

25

30

35

40

45

50

55

60

65

14

A specification consists of a listing of the desired table-
columns, in the desired display order (either by name
or, alternatively, by ordinal position in the actual
underlying table)

If a specification is made, then any columns not explic-
itly included within that specification will be sup-
pressed from the UI mode displays

Specifications are associated as table-level annotations
with the actual underlying table

In the reference implementation, specifications are
made via a special XML tag (‘“<columnOrder>’”)
which contains sub-tags (“<cl>’’) indicating the
desired columns in order and by name, and is attached
to the table as a “comment”

Support for composite or “custom views” of multiple-table
data which mimic a single base-table. Such a derived
(non-table) result-set is typically generated by a “stored
query” or “SQL VIEW” within the back-end RDBMS,
and nevertheless can be rendered and presented by the
UI as if it were an actual single base-table (subject to
certain limitations which may be imposed by the under-
lying RODBMS—particularly, the inability to edit or add
“records” for such result-sets, rendering them effec-
tively “read-only”)

Ability to manually define Search-mode “dropdown
fields” (which list the range of possible values for a given
column) for such custom views:

Because, by its nature, the custom view appears to be an
actual table—and therefore obscures the underlying
(real) tables on which it is based—the system cannot
automatically resolve the referential-integrity (RI)
links that would normally serve to identify the appro-
priate value lists (1.e., foreign-table values)

Moreover, the normal value-to-key translations man-
aged by dropdown fields are inappropriate for custom
views anyway, since these views actually incorporate
the cross-referenced values themselves (rather than
foreign keys that point to these values, as base-tables
do)

To support custom-view dropdown lists that (appear to)
behave consistently with the general (actual-table) UI
paradigms, then, a manual (explicit) dropdown-list
specification is made for each corresponding custom-
view column

A specification identifies the foreign table which con-
tains the dropdown-list values, and the column (either
by name or, alternatively, by ordinal position within
that table) which supplies the actual values

Specifications are associated as column-level annota-
tions with their corresponding custom-view columns

In the reference implementation, specifications are
made via a special XML tag (‘“<manualDrop-
Down>’) which, in turn, contains sub-tags indicating
the related foreign-table name (‘“<foreignTable-
Name>’”) and key field (‘<foreignKeyField>”), and is
attached to the corresponding view-column as a
“comment”

In-place pass-through (drill-down) from custom views to
Edit-mode displays for underlying (component) base-
table members:

Because the “stored queries” or “SQL VIEWs” that
underlie custom views are typically non-updateable
(according to RDBMS limitations), the usual UI
mechanisms for editing data cannot be used with
these views. Nevertheless, it is often desirable to pro-
vide users with easy access to editing for (at least
some of) the data behind the views

US 7,885,981 B2

15

To enable such editing access, a mechanism is provided

to create a (series of) cross-referential link(s) from the
individual cells (row-values) in a given column of a
Browse-mode display, with each link forwarding the
user to a secondary display—most commonly, to an
Edit form for the underlying base-table containing
that cell’s value (although it is, in fact, possible to
link-through to any arbitrary table, row, and column,
and in any “mode”’)

While such links usually reference the same underlying

base-table (and -field) for every row in the column,
special-case extension logic can reference different
tables for different rows, according to “trigger” or
“switching” values from another column in that same
display-row

A further variation of the mechanism (described below)

modifies the behavior of the leftmost-column “row
label” links, rather than the interior Browse-mode
table-values themselves

On-screen, the link appears as a highlighting (in the

reference implementation, a “clickable link” or
HTML “HREF”) of the cell-value itself. (Empty cells
display the value “NONE” so as to still enable drill-
down navigation.) When the user selects (clicks on)
the link, the display forwards (typically) to an Edit
form for the corresponding record in the appropriate
underlying base-table, with the proper edit-field pre-
selected (i.e., given the “focus’’). In effect, the system
auto-navigates to the same exact base-table Edit form,
selected-record, and edit-field that the user could
(theoretically) navigate to himself, manually, in order
to alter the underlying datum that supplies the custom
view

The working context for this drilled-down Edit form is

constrained by the same mechanisms that govern
master/detail drilldowns (as described above)—that
is, a stack-context filter is imposed on the edit session
in order to prevent the user from changing the datum
that links the base-table record to the custom view
(note that this also requires a separate, explicit speci-
fication of the base-table as a “detail table” to the
custom view); and if/when the user “commits” the
drilled-down edit session (by pressing the “Update”
button), she is automatically returned to the “parent”
custom view

A specification identifies the underlying (or “target’’)

base-table; the (initial) base-table display-mode
(typically, “Edit’); the custom-view column whose
corresponding row-value contains the identifying key
for the target base-table record; the custom-view col-
umn (if any) whose corresponding row-value contains
the “constraining” (master/detail) key; and the base-
table field-name which should be selected (i.e., the
field that contains the target value, and should there-
fore receive the “focus”’)

Specifications are associated as column-level annota-
tions with their corresponding custom-view columns

A special-case extension of the specification can be

associated as a table-level annotation with the custom
view itself (rather than one of its columns). In this
context, the specification will modify the behavior of
the leftmost-column “row label” links (which, in nor-
mal-table Browse-mode displays, link to Edit-mode
displays for the corresponding table-records). A com-
mon use for such specifications is to support master/

10

25

40

45

50

60

65

16

detail-style transitions to secondary Browse-mode
displays of records which “belong to” the selected
custom-view record

In the reference implementation, specifications are
made via a special XML tag (““<customDrillDown>’”)
which, in turn, contains sub-tags indicating the target
base-table (‘“<tableName>’”), display-mode
(“<mode>’”), identifying-FK field within the custom
view (“<keyColumn>’), constraining-context or
master/detail key, if any (‘“<parentColumn>’), and
target field (‘<focusField>”), and is attached to the
corresponding view-column as a “comment”
The preferred embodiment also supports the specification
and enforcement of both global and granular (by table and
function) access rights and activity-stamping, according to a
group-based (rather than hierarchical) permissions scheme,
and based on table entries which themselves can be entered
and maintained via the system:
In the reference implementation, six tables support these
security features: PEOPLE, USERS, SECURI-
TY_TABLE, SECURITY_GROUP, SECURITY_
GROUP_USERS, and SECURITY_GROUP_TABLE:
The PEOPLE table contains an Active_Flag field, which
allows for “deactivation” of individuals without
destroying existing RI links throughout the database.
Every system user must appear in the PEOPLE table
(among other reasons, to support full-name resolution
when displaying usage-tracking fields through the
UD, and if/when a user’s PEOPLE.Active_Flag is
turned off, the user is immediately blocked from all
further system access

The USERS table incorporates (among others) a Log-
in_ID field, which is correlated against the system-
user’s operating-environment credentials. (In the ref-
erence implementation, this is the UID which has
been authenticated and forwarded by the web server;
alternatively, it could be the user’s OS login.) When
the system establishes a new user-session (upon the
user’s initial contact), it attempts this correlation to a
valid USERS.Login_ID. If no correlation can be
made, access to the system is denied; otherwise, the
corresponding USERS.Users_Key value is hence-
forth associated with that user’s session

SECURITY_TABLE maintains a list of all security-
mediated tables and custom views. (Alternatively, this
list could be automatically derived from the system’s
data-model interrogation; the use of an explicit and
hand-managed table supports the manual exclusion of
“special” or “hidden” tables and/or views)

SECURITY_GROUP supports the definition of func-
tional security roles. In and of themselves, entries to
the SECURITY_GROUP table are little more than
descriptive names; their primary purpose is to serve as
“connective conduits” between USERS and SECU-
RITY_TABLEs. It is important to note (again) that
SECURITY_GROUPs are non-hierarchical; that is,
each group can be granted any mix of rights to any
arbitrary set of tables, without respect to the rights of
other groups. And USERS can be assigned to any
number of SECURITY_GROUPs; When a_ user
belongs to multiple groups, her aggregate rights com-
prise a superset of the rights for each of the groups to
which she belongs

SECURITY_GROUP_USERS simply effects many-to-
many relationships between USERS and SECURI-
TY_GROUPs, and is defined (via the methods
described above) as a “detail” table to both of these

US 7,885,981 B2

17

Similarly, SSECURITY_GROUP_TABLE © supports
many-to-many relationships between SECURITY_
GROUPs and SECURITY_TABLEs (and is a “detail”
table to both). Additionally, however, the SECURI-
TY_GROUP_TABLE incorporates Boolean (true/
false) columns which indicate permission for the
related SECURITY_GROUP to (respectively)
browse, add to, edit, or delete from the corresponding
SECURITY_TABLE. This forms the nexus of
access-rights control

All UI displays automatically adjust to the current user’s
access rights. In particular, the following navigational
elements (‘“links”’, as defined in the reference implemen-
tation), appear or are suppressed according to the user’s
rights:

Mode-navigation bar links 710 (browses/searches/add);
here, suppressed links are entirely removed from the
display, rather than simply “disabled” (or made “non-
clickable”, as is done for all other links, below)

Record-edit links 706 (in the first column of Browse-
mode displays)

Drill-through cross-reference links (on the labels of
Add/Edit/Search dropdown fields)

Drill-down master/detail links (on the labels of Edit-
form master/detail summary-counts)

Note that custom views with custom-drilldown specitica-
tions are subject to “double” security mediation: If edit
permission to the custom view itself is withheld for a
given user, then all custom-drilldown links will also be
disabled. But (even) if the custom-view edit permission
is granted, the user must also have the necessary rights to
support each particular drilldown (e.g., edit or browse
permission on an underlying table) before the corre-
sponding link will be enabled

Separately (and assuming the necessary access rights have
been granted), all system add/edit activity can be time-
and user-stamped at the table-record level (optionally,
on a per-table basis). Security-stamping is completely
automatic, and is governed (in the reference implemen-
tation) by the presence of four special columns within
the table: Entered_By_Users_Key, Entry_Date, Modi-
fied_By_Users_Key, and Last_Modified_Date. If these
columns exist, then any “add” event causes the current
USERS.Users_Key (from the user’s session) to be
recorded in both the Entered_By_Users_Key and Modi-
fied_By_Users_Key columns, and the current system
time to be stamped into both the Entry_Date and Last_
Modified_Date columns. “Edit” events, of course,
update only the Modified_By_Users_Key and Last_
Modified_Date columns. Note further that when they
exist in a table, these fields are visible only in Browse
and Search displays; they are hidden (but automatically
updated) from Add and Edit displays

Although not present in the reference implementation, the
granularity of this model can be readily extended with
both row- and column-level access mediation:
Row-LeveL Security allows for the individual rows

(records) of any given table to be made visible or

invisible (and, therefore, accessible or inaccessible)

to a given user:

Inasense, row-level security can be said to affect only
“content” visibility, rather than “structural” visibil-
ity (as with other security axes); a row-level secu-
rity filter impacts which particular table-entries are
presented, but never which classes or types of data
elements

10

15

20

25

35

40

45

60

65

18

A specification thus identifies the filter condition (1.e.,
WHERE clause) that relates one or more table-
columns to (some transformation/JOIN-sequence
on) the current user. (Note that such “user rela-
tions” may optionally involve attributes of the par-
ticular user, and/or those of “security groups” to
which the user belongs)

Specifications are associated as table-level annota-
tions with the actual underlying table

Because there are no effects upon the structure or
“shape” of the data, these filters can be “encapsu-
lated”, effectively, and introduced as a (logical)
“shim” layer between the raw back-end tables and
the data-dictionary object model.

By exploiting the identical column structure of each
such “shim view” to its underlying base-table, on
the one hand, and to the “virtualized” schema view
(as constructed during the interrogation phase) of
that table, on the other, the rest of the system logic
and infrastructure can be insulated from any aware-
ness of (or sensitivity to) this mechanism

Application of the row-level filter consists of “surgi-
cal” modifications to the defining SQL for the cor-
responding Browse-mode view (see above), so as
to incorporate the requisite additional WHERE
clause (and any additional FROM-clause tables,
utilizing the same view-integration and alias-merg-
ing logic already employed within the reference
implementation in generating said view)

Function-oriented mediation (i.e., Browse/Edit/Add/
Delete granularity) is supported via (optional)
separate specifications (per table) for each function
(and with a “default/override” hierarchy among
these specifications—such that Browse rights
obtain for editing, for instance, unless explicit Edit
rights have been specified). The UlI-generation
logic then compares record-presence across the
respective (resulting) views to resolve specific ren-
dering and action decisions (i.e., is this record edit-
able?)

CotuMN-LEVEL Security allows user access to be gov-
ered on a field-by-field basis:

Specifications are analogous to those described in the
reference implementation for table-level security
(see the discussion of SECURITY_GROUP_T-
ABLE, above), except that only “Browse” and
“Edit” rights are meaningful on a per-column basis
(that is, there is no way to “Add” or “Delete” only
individual columns)

Column-level specifications are treated as “subtrac-
tive overrides” to table-level specifications, such
that table-level specifications serve as “defaults”
that can be further restricted—but not expanded—
by column-level specifications

Application of column-level security to the Browse
function consists of an additional “overlay” view
which hides additional columns as necessary

Edit-function mediation is processed by the UI on a
per-field basis, either (or both) during rendering
(where display conventions utilize read-only fields,
or otherwise signal non-editability via labeling
conventions [such as italicized text]) and/or pro-
cessing (where attempts to change non-editable
fields are rejected, with an alert notification to the
user)

US 7,885,981 B2

19

Also incorporated into the preferred embodiment are both
generalized and special-case exception-handling mecha-
nisms, with integrated session-recovery support:
The generalized exception-handling mechanism guaran-
tees a controlled recovery from any unanticipated error
condition. This mechanism:
Presents as much diagnostic information as possible,
within a paradigm-consistent UI display, comprising:
A pass-through errortext from the underlying pro-
gram-execution environment

A complete “(program call-)stack dump” indicating
the suspended (and nested) program-function calls
in effect at error-time

The entire current context-stack display

Permits user recovery either by:

Controlled reinitiation of a(n entirely) new session

Navigation through the context-stack display to a pre-
error session context, thereby (generally) enabling
the user to recover his session-in-progress (more-
or-less) intact, vs. requiring a restart from scratch

Special-case exception-handling mechanisms are defined
separately for certain types of system errors which are
common or “normal” (such as authorization failures or
session timeouts). In such cases, these “customized”
exception-handlers can suppress unnecessary technical
detail (which can be confusing or alienating to end-users
and give the misimpression of software failure), and
provide additional (end-user suitable) information spe-
cific to the user’s particular error context. The reference
implementation can identify and separately handle the
following common exceptions:

SESSION-SEQUENCE Errors: In the reference implementa-
tion (which, again, is web-based), it is important that
the system govern the “flow” or sequence of pages
passed back and forth between the (web-)server and
the client (web-browser); as a result, the system incor-
porates several mechanisms to track and enforce this
flow (comprising back-button “defeat” logic, and
incremental serialization of all URLs [such that the
system always knows what serial number to “expect”
along with the user’s next page-submission]). If the
user manages to violate this flow, either intentionally
or inadvertently (perhaps by selecting a “favorite” or
“bookmark”, or by clicking multiple links on the same
page before the server can respond), the system can
detect this particular error, provide a detailed expla-
nation of how and why it might have occurred, and
(per above) allow the user to recover her session-in-
progress without any loss of work

Security VioLations: Generally, the system proactively
prevents the user from attempting access to any autho-
rized system modes or functions. However, in the
(web-based) reference implementation, it is not
impossible for the user to navigate to a situation where
he might possibly attempt an illegal transition—or to
manually adjust a URL so that it attempts such unau-
thorized access without triggering a session-sequence
error (as described above). In these cases—and in the
simpler case, when a user attempts access without any
system rights whatsoever—the system provides a
plain-English report of exactly what access rights the
user has tried to violate

Session Timeout: Because the system maintains a “user
session” in which various context, sequence, and con-
figuration information is tracked, and which (because
it consumes system resources) can expire after a (con-
figurable) period of disuse—and also because (in the

10

15

20

25

30

35

40

45

50

55

60

65

20

web-based reference implementation) the dialog
between client and server is “connectionless” (mean-
ing that there can never be any automatic detection by
the server that a user has “quit” or “broken” a connec-
tion)—it is entirely possible that a user may try to
continue or resume a session which appears perfectly
intact from his perspective (i.e., in his web-browser)
but for which the system has discarded the corre-
sponding user-session. In this case, a full session-
reinitiation is still required—but it can at least be
delivered along with a meaningful explanation of
what has occurred
These special-case error handlers dovetail and integrate
smoothly with the generalized exception-handling facil-
ity, and share many of the same features (including,
when available, the session-stack display). Within the
reference implementation, these handlers are hard-
coded, but they describe the basis of a subsystem which
can be readily extended—abstractly and dynamically—
in several ways:

Specific exceptions—and their corresponding, custom-
ized error displays—can be defined and administered
via acentral list (or table), and automatically detected
(and their respective displays invoked) at runtime,
within the framework of a generalized facility and
without the need for custom programming

Information can be “mined” from the pass-through
errortext—and, potentially, from the runtime environ-
ment as well—according to the nature of the particu-
lar error, and used (if appropriate) in the construction
of dynamic error displays (via templates, for
example)

Custom follow-on actions can be associated with spe-
cific errors, so that special-case recovery procedures
can be specified. (For instance, a database-detected
data-entry violation might cause a return to the previ-
ous data-entry form.) “Mined” runtime-environment
information can also be used here to govern the
behavior of said follow-on actions

A generalized, extensible, and data-driven “pop-up help”
facility is also included in the reference implementation. This
facility allows for the specification of descriptive text which
can be associated both with specific on-screen navigational
elements, and with (any) individual schema elements (i.e.,
table-columns). When the user positions his mouse over a
described object (or data-field) and pauses for a specified
timeout interval, the system will flash a pop-up window (or
“balloon”) displaying the corresponding description. The
system thereby becomes self-documenting with respect to
both the UI paradigm itself, and the meaning ofits data-fields.
Within the reference implementation, the specifications are
stored within back-end tables—so that they, too, may be
administered via the system UJ—although any of the above-
described annotational methods could alternatively be used.

Except as noted, the detailed implementation of each of the
foregoing capabilities is set forth in full in the accompanying
source code, which represents the complete source code fora
working version of the reference implementation. A full dem-
onstration RDBMS schema upon which this system can oper-
ate has been provided, and accompanies this application and
is incorporated herein by reference (see FIG. 5 and the Cre-
ateSchema.sql script).

Numerous extensions of the above-described scheme are
of course possible:

Most importantly, while the reference implementation is in

various instances custom-coded to the data-dictionary
architecture of its particular underlying RDBMS (..e.,

US 7,885,981 B2

21

Oracle8i), the scheme is nevertheless readily converted
to a “generic” (or “RDBMS-agnostic”) architecture
through the introduction of a platform-neutral “middle-
ware” layer. (The DatabaseMetaData class within the
Java 2 Platform Standard Edition v1.3.1 API Specitica-
tion, for instance, is easily applied toward this end.) The
described invention, therefore, is by no means limited to
a specific RDBMS product

A set of mechanisms, rules, and methods may be provided

through which each end-user can evolve (and manage)
personalizations to the UI architecture (with persistent
back-end storage and tracking by user and/or group)—
including (but not limited to) preferred table-navigation
hierarchies; UI “entry points” based on usage-frequency
patterns; default (or most-recent) searches/filters for
each back-end table; default “page size” for Browse-
mode lists (adjusted for the particular user’s screen reso-
lution, for example); default sort-orders for each table;
and default “Power Edit” and “Power Add” settings.
Because user-tracking is already integrated (for security
purposes), it is a simple matter to add the supporting
tables and UI-application “hooks” to collect, store, and
utilize such preference information

Expanded concurrency-control options are easily incorpo-

rated into the scheme. Many database-related systems
offer a range of behaviors which extend from unfettered
write-back of edited table-records (offering maximum
system performance, at the cost of minimal overwrite
protection), through competing-update detection with
approval/abandonment of data overwrites (a blend of
performance and protection, at the cost of added com-
plexity), to full edit-record locking (offering maximum
protection at the cost of performance); and while the
reference implementation incorporates only the first of
these behaviors, the others can certainly be added—
along with a system-configuration mechanism for
choosing among them—1in a straightforward manner

A generalized journaling/auditing subsystem may also be

integrated. Such a subsystem could, for instance, utilize
database “triggers” to update a master table with a new
tuple (comprising table-name, record-key, column-
name, old-value, new-value, user-key, and timestamp)
whenever any table-record is modified. Such a mecha-
nism would (at a cost in system performance, of course)
permit complete backtracking/“rollback” to previous
database states, and guarantee the ability to recover from
any rogue data modifications (whether accidental or
malicious) and identify the actors

A further extension to journaling/auditing support is the

ability to require a user to explain his justification for
(only) certain data-field changes, and then either record
that explanation to the system journal or audit log (along
with the other tuple information), or (possibly) roll-back
the transaction (if the user declines to supply an expla-
nation). Such a facility could be implemented with addi-
tional text-entry fields integrated into the primary Edit-
mode display, or alternatively, with “pop-up window”
logic (which, within World Wide Web presentation,
could comprise additional browser windows or DHTML
“simulated” pop-ups, for instance). The specification of
which data-fields should require such justification
would be considered a “business rule”, and could be
implemented via any of the annotational methods
described elsewhere in this document. Such specitica-
tions could also be assigned at various levels of global
vs. local “scoping” (i.e., perhaps automatically for all
date fields, or only for specifically assigned text fields)

20

25

40

45

60

65

22

Within the current (World Wide Web-based) reference
implementation, it is possible to select certain naviga-
tional links (for example, from the context-stack display
or the mode-navigation bar) which will abandon the
user’s current screen display and, with it, any data
entries or modifications which may have been made but
not yet committed to the database. Although this behav-
ior is by design, it may be desirable to add a pop-up
“warning” mechanism for such cases, so as to alert the
user to the imminent loss of data (and to provide a means
for aborting said action). Such a mechanism could uti-
lize client-side Javascript logic to:

Set an internal flag each (and every) time any on-screen
change is made

Invoke a “cover function”, each time a screen-abandon-
ing link is clicked, which will display a confirmation
dialog (pop-up window) if the “change flag” has been
set (or, if the flag is not set, will simply execute the
link)

Proceed with the link action (and abandon the current
screen) only if the user supplies explicit confirmation

A variety of extensions can be made to the Browse-mode
display paradigm, comprising:

The ability to sort Browse-mode listings (by any com-
bination of columns) by clicking on the correspond-
ing column-headings. Successive clicks on the same
column-heading would invert the sort-order for that
column; successive clicks on different columns would
effectively produce “ordered sorting” (where the
most-recently clicked column is the “primary” sort,
and each successively less-recently clicked column is
the next “subordinate” sort)

Support for “random-access” page navigation, wherein
the table-header (which, in the reference implemen-
tation, allows direct entry only for the number of rows
per page) would also allow direct entry of the desired
page number. For instance, a Browse-mode display
whose table-header said “PacE 5 oF 12 (ToTaLING 300
RECORDS AT 25 ROWS PER PAGE)” would thus render both
the “5” and the “25” as text-entry fields, so that in
addition to resizing the page length (by changing the
rows-per-page entry), the user could also “zoom” to a
specific page just by changing the page-number entry.
This would eliminate the need to scroll, page-by-
page, from either the top or bottom of the result-set

Sinilarly, another form of random-access page naviga-
tion could be introduced via the addition of phone-
book-style “tab” links (for instance, “AIBICID .. .””)
such that clicking a particular link would jump to the
first record in the result-set whose corresponding-
column entry began with that character:

Said “corresponding column” could be (initially)
determined according to similar default-processing
rules to those embodied in the reference implemen-
tation for FK display-name resolution (for
instance, the first column whose name ends in
“ NAME”, if any)

Alternatively, the corresponding column could simply
track the current (primary) sort-order column (as
described above), if implemented

Yet another option would be to allow explicit designa-
tion of the corresponding column via an associated
dropdown-list of all table-columns

However selected, any change in the corresponding col-
umn would then automatically regenerate the tab list,
according to the range of actual (sorted) leading char-
acters appearing within that column. In this way,

US 7,885,981 B2

23

numeric tabs would appear for a “social-security

number” column, vs. alphabetic tabs for a “last name”

column
A variety of extensions can be made to the Search-mode
display paradigm, comprising:

In the reference implementation, field-value filters are
applied by default as prefix matches (i.e., as “starts
with” comparisons), with optional support for explicit
relational-operator prefixing (comprising <, <=, >=,
>, and exactly=). Relational options could be further
extended to support ranges (“between x and y”),
NULL/NOT-NULL conditions, and other arbitrarily
complex transformations on the corresponding field-
values (such as field-value substitution into a complex
string-manipulation or arithmetic expression)

The reference-implementation Search-form paradigm
comprises a single set of fields (corresponding to the
underlying table-columns), where any entered filter-
values (for the respective columns) are logically
“AND” ed together. A more general and flexible
search facility could:

Allow toggling between logical “AND” and “OR”
combination of a search form’s filter-values

Allow “stacking” of multiple search-form copies,
such that the fields in each individual (sub-)form
comprise a parenthetical filter “phrase”, which is
“AND’ed or “OR”ed together (selectably, as
above) with the parenthetical phrases for other sub-
forms

A variety of extensions can be made to the Edit-mode and

Add-mode display paradigms, comprising:

In the reference implementation, violations of any extant
“unique” constraints on underlying table-columns are
intercepted and reported only upon violation, and
then only via the generalized exception-handling
mechanism (in response to a back-end RDBMS
exception “throw’’). Alternatively:

Special-case exception handling (as described above)
could still exploit the thrown back-end exception,
but provide clearer diagnostics (i.e., exactly—and
only—the field-value that has violated a “unique”
constraint), and then restore the data-entry form
with the problem-field contents pre-selected; or

Employ separate database-interrogation logic for
each “unique’-constrained field, so as to “pre-
qualify” data-entries—and, thereby, allow for “in-
place” duplicate-entry detection and signaling
(without ever leaving the data-entry form, and
without invoking formal exception-handling
mechanisms)

Similarly—but more generally—violations of any arbi-
trary “check” constraints (such as imposed value-
ranges, or required satisfaction of algebraic expres-
sions) are intercepted and reported only upon
violation within the back-end RDMBS. Instead, such
constraints could be extracted from the back-end and
“projected” into the client-side UI display (for the
reference implementation, via custom-generated
Javascript routines). Doing so would allow the detec-
tion and signaling of constraint violations immedi-
ately upon data-entry, without (additional) contact
with the back-end RDBMS (and this, in turn, would
obviate the need for any display/session recovery
logic)

When adding new records, the reference-implementa-
tion Add-form logic does not “initialize” fields for
which the back-end defines “default” values—that is,

10

15

20

25

30

35

40

45

50

55

60

65

24

although the underlying table-column will (properly)
be set to its default value if the corresponding Add-
form field is not explicitly set, the user has no indica-
tion (prior to committing the new record) of that
default value. Instead, the form could automatically
pre-populate the appropriate fields with their corre-
sponding default values (as determined through inter-
rogation of the underlying column-constraints)

In certain situations, it may be desirable during schema

interrogation to “deduce” relational interdependencies
between tables where no explicit referential-integrity
constraints have been defined. In such cases, it is pos-
sible to further compare field-names and associated
attributes across tables, so as to identify columns which
(for instance) are identically named, and (only) one of
which is the primary key for its respective table. Under
these conditions, it could (optionally) be assumed that
the other-table column is a foreign-key cross-reference
to the first column. Note that, in so doing, the UI para-
digm would then enforce referential integrity for this
relationship, even absent the explicit back-end con-
straint.

Additional mechanisms for further customizing or adapt-

ing the baseline UI paradigm and software to meet non-

standard and/or special requirements (“business rules”)

are also indicated, such as:

Specification and enforcement of correlations, interac-
tions, or interdependencies between disparate data-
elements (either within or across base-tables), com-
prising:

“Context-sensitive dropdown controls”, whose drop-
down-lists are filtered (or “constrained”’) based on
user-defined relations to superior stack-contexts
(other than direct master/detail constraints, which
already are included as a part of the core UI para-
digm). Such controls could be specified via any of
the aforementioned annotational methods. Specifi-
cations would “attach” to the subordinate-level
table-column (i.e., the column whose dropdowns
should be “filtered” or “sensitized”), and would
consist of tuples indicating (at least) the superior-
level table, relevant table-column, and a relation
between the superior and subordinate columns.
Each tuple could (optionally) be further qualified
so as to “scope” the relation—for instance, so that
the filter should consider only so many levels above
the current stack-context, or that the filter only
applies if certain other tables also do (or do not)
appear in intervening levels—and possibly, even,
only ina specific sequence. It would also, of course,
be further possible to assign multiple such “sensi-
tivities” to the same target-column. Consider, as an
example, a project-management schema, in which
both equipment and technicians are assigned to
projects; technicians have specific equipment cer-
tifications; and schedules apply both to projects and
to technicians. In assigning new technicians to a
given project, one may wish to automatically “pre-
qualify” the dropdown-list of available technicians
such that it only includes technicians who are cer-
tified on (at least some of) the project’s equipment,
and who also are currently available during the
lifetime of the project

“Interactive dropdown controls” are similar, but effect
relations between multiple elements within a single
mode-display, rather than across context-stack lev-
els. Using the above example, a single many-to-

US 7,885,981 B2

25

many table might connect technicians to projects; if
the table is accessed directly (that is, at the topmost
stack-level, rather than by drilling-down to it from
the associated project record), then each time the
“project’”-dropdown is altered, the “technician”
dropdown-list would be automatically regenerated
according to the above-described criteria. Again,
(potentially multiple) specifications per target-col-
umn would resemble those for context-sensitive
dropdowns, except (of course) that the “superior-
level table” and “scoping extensions” would be
irrelevant here. Note that although these two drop-
down-types are similar—and that, in some cases
(namely, where context-sensitive dropdowns uti-
lize only direct drill-down relations), the former
could be simulated with the latter—each offers (or
lacks) functionality which makes it more suitable
for certain types of use

“Context-sensitive and interactive column-level secu-
rity” would allow data-entry fields to “lock” (or
unlock) according to values of (and changes in)
other data-fields (for instance, once a project has
reached a certain “status” designation). Again,
specifications could be effected via any of the
aforementioned annotational methods, would
“attach” to the “target” table-column (i.e., the col-
umn whose security is being mediated), and would
resemble those for context-sensitive and interactive
dropdowns, respectively, except that the “relation”
specification would be supplanted by a Boolean
evaluation on the controlling data-field. Note that
this same mechanism is easily generalized further
to support the toggling of arbitrary column-level
constraints (by adding a “constraint definition”
field to the specification tuple).

Triggering of custom software subprocesses—on the
front- and/or back-end—ander specified data condi-
tions and/or at specified system-transition events,
such as the “data-change justification” pop-up mecha-
nism described above in detail

Various mechanisms for enhancing web-client (or client/
server) user-interface performance and functionality can
be introduced, comprising:

“Buffered” dropdown controls, which maintain their
own separate connections to the back-end RDBMS,
and allow the screen display to be rendered before
their dropdown lists have been completely populated.
Such dropdowns can further be made “typeable”, so
that a user could begin typing a desired value and
“home-in” on matching list-entries; in this case, list-
retrieval from the RDBMS can by dynamically
revised to retrieve a successively smaller (i.e., closer-
matching) result-set.

“Caching” or “sharing” of duplicate dropdown lists,
when such lists are lengthy and their retrieval signifi-
cantly impacts front-end performance and network
traffic. For instance, the user-stamping fields
described above (Entered_By_Users_Key and Modi-
fied_By_Users_Key) generally appear together

10

20

25

35

40

45

26

within the same tables, always share identical drop-
down lists, and can (potentially) grow quite long over
time; logic to retrieve the shared list once from the
RDBMS—rather than twice—for use within both
dropdown controls can effect meaningful gains in
system responsiveness.

“Back-link” support, to provide functionality similar to
that of the standard web-browser “back” button, but
without violating the integrity of the user-session or
the hierarchical context stack.

“Bookmarking” support, to provide compatibility with
standard web-browser “bookmarks” or “favorites”
functions: By clicking a special button or link, users
can re-render their current display with a re-formed
URL, which completely describes the current user-
session and context-stack (or, alternatively, a limited
and “cauterized” subset of same) so as to allow book-
mark-based return to an equivalent display at a later
date.

Although the preferred embodiment comprises a stand-
alone application which interacts (on a client/server
basis) with a back-end RDBMS, it may in some circum-
stances become desirable instead to integrate some or all
of the invention directly into said RDBMS product (or a
tightly-coupled extension or utility to same). Of course,
any such alternative embodiment would still conform to
the principles of the described invention.

Finally, the implementation described herein could be fur-
ther varied in numerous respects, but still be within the prin-
ciples herein illustrated. For instance, while the reference
implementation uses a World Wide Web presentation mecha-
nism, amore conventional client-server or native-GUI system
could instead be delivered. Also, while the reference imple-
mentation depends on adherence to certain structural require-
ments and naming conventions in the design of any underly-
ing or “target” schema (comprising the use of a single unique,
auto-generated primary-key field for every table; the exist-
ence of a supporting “sequence” [i.e., reference-implementa-
tion RDBMS mechanism for auto-generating primary keys]
for every table, and that each sequence be named for its
corresponding table plus a “_SEQ” suffix; the reservation of
“ VIEW”-suffixed names across the entire table/view
namespace [for use by auto-generated system views]; the use
of certain column-name suffixes as alternatives to or substi-
tutes for direct datatype- or other attribute-driven discovery
[such as a “_FLAG” suffix to connote “yes/no” or “binary”
fields, or a “_DATE” suffix to indicate time/date data]; and a
specific complement of security-related tables, as described
below), such requirements and conventions can be easily
supplanted, circumvented, or removed, and do not in any way
define or limit the scope of the invention.

It is evident that the embodiment described above accom-
plishes the stated objects ofthe invention. While the presently
preferred embodiment has been described in detail, it will be
apparent to those skilled in the art that the principles of the
invention are realizable by other implementations, structures,
and configurations without departing from the scope and
spirit of the invention, as defined in the appended claims.

US 7,885,981 B2
27 28

Schemalive/AddEdi tr .jsp

<3!

// $Revision: 2.6 $
// $Date: 2001/10/30 08:54:22 $

&>

<%@ page
<%@ page
<%@ page
<%@ page
<%@ page
<%@ page
<%@ page

import="dbUtils.*" %>
import="HTMLUtils.*" %>
import="sessionUtils.*" %>-
import="jJava.sql.*" %>
aimport="Java.util.*" &>
import="common.*" %>

autoFlush="false" buffer="1000k" errorPage="/Error500.jsp"

session="true"%>

<%! public static final String version_AddEditForm jsp = "$Revision: 2.6 $"

oe
v

<HTML>

<HEAD>

<%@ include file="common/EntryPoints.jsp" %>

<%@ include file="common/GlobalHeaderVARS.jsp" &%
<6@ include file="“common/EmptyParamCheck. jsp" %>

ow.

<

>

String ungStr=

if

}

TableDescriptorDisplay.getNoCache (TableDescriptorDisplay. ForJavaScri
pt);

(request.getParameter ("ung") != null &&
request.getParameter ("ung") .équals ( (String)

session.getAttribute ("ung"))) {

/*

if (Debug.areDebugging) {

Debug.doLog ("AddEditForm ung matched!", Debug.INFO);

}

*/

session.setAttribnute ("unq",ungStr);

else if (request.getParameter ("StackLevel") != null &6

request .get Parameter ("stackLevel") .equals("0")) {

J*

if (Debug.areDebugging) f{

Debug.doLog ("Chose to restart from header", Debug.INFO);
}

*/
session.setAttribute ("ung",ungStr);

}

else if (request.getParameter ("ung") != null sé
session.getAttribute ("ung") == null) {

}

// *THIS* is a (real) expired-session error...
response.sendRedirect ("/Schemalive/ExpiredSession. jsp") ;
return;

else j

US 7,885,981 B2
29 30

/*
if (Debug.areDebugging) {
Debug. dolog("AddEditForm ung did not match", Debug. INFO);
}
*/
// *THIS* is actually an out-of-sequence error...
response.sendRedirect ("/Schemalive/OutOfSequence.jsp");
return;

}

Connection con=null;

Statement stmt=null;

Statement sfmt=null;

ResultSet rs=nulil;

ResultSet sf=nulil;

boolean canBrowseFlag;

boolean canEditFlag;

boolean canAddFlag;

try {
con=SQOLUtil.makeConnection {);

S>

<3@ taglib uri="/WEB~INF/taglib/stack.tld" prefix="sessionUtils" %>
<% response.setHeader ("pragma","no-cache"); %>

<%& response.setHeader ("Expires",new java.util.Date (new
java.util.Date ().getTime()-100) .toString())? %>

<%@ include file="common/GlobalHeaderJavascript.jsp” >

<

wv

if (request.getParameter ("newPageSize") != null) f
‘session.setAttribute ("pageSize", :
request.getParameter ("newPageSize"));

// session.setAttribute ("powerAdd", “No");

String tableName=request.getParameter ("tableName”) ;
if (tableName == null) {
// entryPoints is defined in common/EntryPoints.jsp
for (int i=O;i<entryPoints.length;itt+) {
if (Arrays.binarySearch (headerTableList, entryPoints[i]) >= 60)
{
tableName=entryPoints {il;
break;

}
if (tableName == null) {
if (headerTableList.length > 0) {
tableName=headerTableList [0];

)
String doProcess=request.getParameter ("doProcess");
if (doProcess == null) {

doProcess="new";

} -

String stackLevel=request .getParameter ("stackLevel");

ce
v

US 7,885,981 B2

31 32
if (stackLevel == null) {
stackLevel = "Q@";

)

String mode=request.getParameter ("mode");

if (mode == null) {

; mode="search";

)

if (usersKey == null || tableName == null) {
throw new ServletException ("<p><br><br><br>"+

"snbsp; &nbsp; énbsp; énbsp; &nbsp; nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &
nbsp; &énbsp; "+
"<¢/b>YOU ARE <b>NOT AUTHORIZED</b> TO USE THIS SYSTEM<b><br>"+

"snbsp; énbsp; énbsp; &nbsp; énbsp; &nbsp; &nbsp; énbsp; &nbsp; &nbsp?: &
nbsp; &énbsp; &nbsp; &nbsp;")?

<sessionUtils:stack tableName="<%= tableName %>" mode="<%= mode %>"
stackLevecl="<%= stackLevel %>" database="<%= dbName %>" dbConn="<%=
abConnName %$>">
<%

‘/ $= stackinfo %
>
</sessionUtils:stack>

// First, check to see if we should be processing
//Hashtable returnHash=null;
//DBConnectionManager connMgr=null;

//Connection con=null;

//Statement stmt=null;

//ResultSet editResultSet=null;

i*®

String returnTable=request.getParameter ("returnTable");

if ({returnTable != null) {

session.setAttribute("returnTable",returnTable);

}

*f

LinkedbList 1=(LinkedList) session.getAttribute ("sessionStack") ;

Hashtable tableVals=( (StackElement)1.get(1.size()—-1)) -getFormValues ();

if (mode.equals ("search") && doProcess.equals ("revised")) {
tableVals=((StackElement)1.get(l.size(}—-1)).getSearchParams ();

DataDictionary ddl=DataDictionary.getInstance (dbName, dbConnName) ;
DataDictionaryTD ddtd=ddl.getDataDictionaryTD (tableName) ;

Enumeration displayFieldsEnumeration = ddtd.displayFields();

/*

if (doProcess.equals("return")) {

int index=Integer.parselInt (request.getParameter ("index") );
LinkedList 1=(Linkedbist) session.getAttribute ("LinkedList")}
returnHash= (Hashtable) 1.get (index);

a

US 7,885,981 B2
33 34

1. remove (inde
session. setAttribute ("LinkedList”",1);
doProcess= (String) returnHash.get ("doProcess") ;
}
af
if (mode.equals("edit")) {
// build query String
StringBuffer editOStr=new StringBuffer ();
Bnumeration gStrFieldsEnumeration = ddtd.displayFields {);
while (qStrFieldsEnumeration.hasMoreElements({)) {
String fieldName = (String) qStrFieldsEnumeration.nextElement ();7
if (fieldName.endsWith("_DATE")) {
editOStr-append("to_char ("+fieldNamet+", 'MM/DD/YYY¥') AS ");
}
editOStr.append(fieldNamet",");
}
editoStr.deleteCharaAt (editostr.length()~-1);
editoOStr.insert(0, "SELECT ");
editQStr.append(" FROM "+tableName+" WHERE “+ddtd.getKeyField()+
"='""trequest.getParameter ("keyValue")+"'");

if (Debug.areDebugging) {
Debug.doLog("editQstr (with globalCon): “teditQStr, Debug. INFO) ;
)

//con= (Connection) pageContext.getAttribute ("globalCon") ;
//connMgr=DBConnectionManager.getInstance();
//con=connMgr.getConnection (ddtd.getDBConnection()); >
//con=DriverManager.getConnection(JDBCURL) ;

stmt=con.createStatement ();
rs = stmt.executeQuery (editQStr.toString());
rs.next();

oe

>
<jsp:directive.page session="true"/>

<TITLE>Schemalive</TITLE>
<SCRIPT>
function filterOperators (rawText) {
<%
if (mode.equals("search")) {
f// xceturn (rawText.slice (1+ (Math.max (Math.max (rawText.search(">"),

rawText.search("<")),rawText.search("=")))));
&>
var i;
for (i=0; i<rawText.length; i++) {
if (rawText.charAt(i) != " ") {
break;

}

YawText=rawText.slice(i};

if ((rawText.search ("<=")
(rawText.search (">=") ==

0) || (rawText.search ("<>") == 0) [I
Q {
rawText=rawText.slice (2

dy)
de

}

US 7,885,981 B2
35 36

else if WrawText.search("<") == 0)
I] (rawText.search(">") == 0)) f{
vawText=rawText.slice (1);

return (rawText);

function _checkNumeric () {
var errorStr="";
with (document.numericFields) {
for (i=O;i<elements.length;i++) {
var chkStr=filterOperators (eval ("document.<%3= tableName
3>."+elements[ij -namet".value"));
Gf (eval ("\""4chkStrthyt f= VON) be
eval ("isNaN(\""4+chkStrt™\")™)) {
errorStrt="\t"+telements[ijJ.valuet+"\n";

}
}

return (errorStr);

function checkNumeric() {
var errorStr=_checkNumeric();

if (errorStr != "") {
alert("The following fields must have numeric values only:\n\n"+
errorstr);

return (false);
}
else {

return (true);

function checkRequired{) {
var errorStr="";
with (document.requiredFields) {
for (i=O;i<elements.length;i++) {
var chkStr="document.<%= tableName %>."+telements[i] .name;
if (eval (chkStr+".type==\"select-one\"")) {[{
//onkStr=chkStrt+".selectedIndex==0";
chkStr=chkStrt+". options [document.<%= tableName %>_."+
elements [i] .name+".selectediIndex] text == \"\"";

}

else {
chkStr=chkStr+".value==\"\"";

}

/falert(cnkStr);

if (eval(chkStr)) { :
errorStrt+="\t"+elements [i] .valvet"\n";

US 7,885,981 B2

37 38
var checkNumWzicStr = _checkNumeric();]
aif (errorStr != "" ]| checkNumericStr != "") {
var combinedErrorStr = "";
if (exrorStr != "") {

combinedErrorStr+="The following fields must be entered: \n\n"+
errorStrt+"\n";
J
if (checkNumericStr != "") {
combinedErrorStr+="The following fields must have numeric "+
"values only:\n\n"+checkNumericStr;
}
alert (combinedErrorStr);
return (false) ;
}
else {
return (true);

function checkDate(objName) [

var datefield = objName;

if (chkdate (objName) == false) {
datefield.select();
alert ("Date is invalid -- please try again...");
datefield.focus(};
return false;

}

else {
return true;

function chkdate(objName) { .
var strDatestyle = "US"; //United States date style
//vax strDatestyle = "EU"; //Euxropean date style-
var strDate;
var strDateArray;
var strDay;
var strMonth;
var strYear;
var intday;
var intMonth;
var intYear;
var booFound = false;
var datefield = objName;
var strSeparatorArray = new Array("-"," ") usm min);
var intElementNr;
var err = 0;
strDate = filterOperators (datefield.value);
// check for invalid chars
var i:
for (i=0; i<strDate.length; i++) [
if (strDate.charAt(i) != " ") ¢
break;
}

}
strDate=strDate.Slice (i);
if (strDate-length < 1) {

}

US 7,885,981 B2
39

return t®®e;

for {i=0; i<strDate.length; i++) {

}

}

var chDate = strDate.charAt (i);
if (chDate >= '0' && chDate <= '9') f{
continue;
}
var 4;
var foundSep=false
for (4j=0;j<strSeparatorArray.length; j++)
if (chDate == strSeparatorArray[j]) {
foundSep=true;
continue;

}

if (!foundSep) {
return false;

intBlementNrt++) {

if (strDate.indexOf (strSeparatorArray (intElementNr]J )

strDateArray =

strDate.split (strSeparatoraArray(intElementNr]);
if (strDateArray.length != 3) {

err = 1;

return false;
} :
else {
stxrDay = strDateArray![0);
strMonth = strDateArray[1];
strYear = strDateArray[2};
}

booFound = true;

if (booFound == false) {

)

if (strDate.length>5) {
strDay = strDate.substr(0, 2);
strMonth = strDate.substr(2, 2)?
strYear = strDate.substr(4);

}

else {
strYear="";
strDay="";
strMonth=strDate;

if (strYear.length == 1) {

}

strYear = 'O'+strYear;

intYear = parseInt(strYear, 10);
if (isNaN(intYear)) {

}

err = 4;
return false;

if (strYear.length == 2) [(

Af (intYear > 50) {

{

40

for (intElementNr = 0; intBlementNr < strSeparatorArray.length;

{= -1)

{

US 7,885,981 B2

41
strye@ = '19° + strYear;
}
else {
strYear = '20' + strYear;
}
I
// US style
if (strDatestyle == "US") {
strTemp = strDay;
strDay = strMonth;
strMonth = strTemp;
}
intday = parseInt(strDay, 10);
if (isNaN(intday)) {

}

intMonth = parseInt(strMonth, 10);

if (isNaN(intMonth)) {
err = 3;
return false;

}

if (intMonth>1i2 |) intMonth<l) {
erx = 5;
return false;

if (€(intMonth == 1 |] intMonth ==
intMonth == 5 |] intMonth ==
intMonth == 8 [] intMonth ==
intMonth == 12) && (intday >
err = 6;
return false;

}

A£ ( (intMonth == Il | intMonth ==
intMonth == 9 [{ intMonth == 11)
(intday > 30 |j intday < 1)) {¢
err = 7;

err = 27 |
return false;

return false;

(intMonth
if

2) {
(intday < 1) {
err = 8;
return false;
}
if

(LeapYear (intYear)
if (intday > 29) {
err = 9;
return false;

true)

}

else {
if (intday > 28) {

err = 10;

return false;

7 44
1o {{
31 JI

3 {1
|

6 ||
&&

42

intday < 1))

{

US 7,885,981 B2
43 44

/* . .

af (strDatestyle == "US") { ;
datefield.value = intMonth + "/" 4+
intday+ "/" + strYear;

}

else {
datefield.value = intday + "/" +
intMonth-1 + "“/" + strYear;

}

*/

return true;

)

function LeapYear (intYear) {

if (intYear % 100 == 0) {

if (intYear % 400 == 0) { return true; }
}
else {

Af ((intYear % 4) == 0) { return true; }

}

return false;

function doDateCheck (from, to) {
Lf (Date.parse (from.value) <= Date.parse(to.value)) {
alert ("The dates are valid.");

}

else {
if (from.value == "" |} to.value == "")
alert ("Both dates must be entered.");
else ,
alert("To date must occur after the from date.");

}

function holdForPickList (whereTo,selectObject) {
with (document.forms[1]) {

if (selectObject.value != "") {

keyValue.value=selectObject.value;

} .
doProcess.value='drillPickList';
stackLevel .value="4";
returnDropDown.value=selectObject.name;
tableName.value=whereTo;
submit ();

function holdForDetail(whereTo,masterKeyValue) {
with (document.forms[1]) {
keyValue.value=masterKeyValue;
doProcess :value='drillDetail';
stackLevel.value="+";
tableName .value=whereTo;
submit (}?

}
</SCRIPT>

US 7,885,981 B2
45 46

</HEAD>

<BODY bgcolor="<%= PAGEBKGD %>"
<%
String focusField=request .getParameéter ("focusField");

if (focusFPield != null) {
&>
onLoad="Javascript: document .forms [{1).<%3= focusField
%>.focus();javascript:if (document.forms[1].<%= focusField %>.type
t= 'select—-one'}) { document.forms[1).<%= focusField %>.select ()
)ejavascript:history.forward({1);"
<%
}
else {
>
onLoad="jJavascript:history.forward(1);"
<% .
}
S>
>

<%@ include file="common/GlobalHeaderHTML.jsp" %>
<%

sfmt =

con.createStatement (ResultSet.TYPE_ SCROLL INSENSITIVE, ResultSet .CONCc
UR_READ_ ONLY);

sf = sfimt.executeQuery (
"SELECT “+
" DECODE (MAX (ABS (Can Browse Flag)), NULL, 0,
MAX (ABS (Can_Browse_Flag))) AS Can_Browse_ Flag, “+

DECODE (MAX (ABS (Can_Edit_Flag)), NULL, 0,
MAX (ABS (Can_Edit_Flag))) AS Can Edit _Plag, "+

” DECODE (MAX (ABS (Can_Add_Flag)}, NULL, 0,

MAX (ABS (Can_Add@ Flag))) AS Can_Add_ Flag "+

"FROM "4+

v/ . PEOPLE, STAFF, USERS, SECURITY_GROUP_USER,

SECURITY _GROUP_ TABLE, SECURITY TABLE "+

" PEOPLE, USERS, SECURITY GROUP_USER, SECURITY GROUP_TABLE,
SECURITY TABLE “+

"WHERE ‘+

" PEOPLE.Active Flag <> 0 AND "+

‘f " PEOPLE.People Key = STAFF.People Key AND "+
df " SYAFF.Staff_Key = USERS.Staff Key AND "+

" PEOPLE.People Key = USERS.People Key AND "+
USERS.Users Key = SECURITY_GROUP_USER.Users Key AND "t+
SECURITY_GROUP_USER.Security Group Key =

SECURITY _GROUP_TABLE.Security Group_Key AND "+

" SECURITY GROUP_TABLE.Security Table Key =

SECURITY _TABLE.Security Table Key AND "+

" SECURITY _TABLE.Security Table Name = '"“+tableName+"' AND

"4

ae

de
sf.next();
canBrowseFlag = sf.getBoolean (1);
canBditFlag + sf:getBoolean(2);
canAddFlag = sf.getBoolean (3);

SECURITY_GROUP_USER.Users Key = "+usersKey

US 7,885,981 B2
47 48

boolean relWwantFlag;
String modePhrase = null;

if (mode-.equals("add")) {
relevantFlag = canAddFlag;
modePhrase = "ADD TO";

}

else if (mode.equals("search")) {
xelevantFlag = canBrowseFlag;
modePhrase = "BROWSE";

}

élse {
relevantFlag = canEditFlag;
modePhrase = "EDIT";

}

if (!relevantFlag) {
throw new ServletException("<p><br><br><br>"+

"enbsp; énbsp; &nbsp; &nbsp; &énbsp; énbsp; &Enbsp; &nbsp; énbsp; énbsp; &
nbsp; &nbsp; "+

"</b>YOU ARE <b>NOT AUTHORIZED</b> TO "“+modePhrase+" THE
<b>"+TableDescriptorDisplay.getDisplayLabel (tableName,
TableDescriptorDisplay.AllUpper)+"</b> TABLE<b><br>"+

"Enbsp; énbsp; énbsp; énbsp; énbsp; &nbsp; &nbsp; &nbsp; &énbsp; énbsp; &
nbsp; énbsp; &énbsp; énbsp;") ;
} \

>
<8=
TableDescriptorDisplay.displayStack ((LinkedList)
session.getAttribute ("sessionStack"),unqStr)
>
<hr>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<tr valign="bottom" align="right">
<%
String titlePrefix = null;
if (mode.equals("add")) {
titlePrefix = "ADDING TO ";
}
else if (mode.equals("search")) {
titlePrefix = "SEARCHING ";
}
else {
titlePrefix = "EDITING ";
}
S>

<TD valign="bottom"><font face="ARIAL, HELVETICA" size="4"><%$=
titlePrefix %><b>
<=
TableDescriptorDisplay.getDisplayLabel (tableName, TableDescript
orDisplay.AliUpper) %></b>
<f--img sre="images/logo-width.gif"-->

A
co

StackElement se=(StackElement)1.getLast ()?7
StackElement pe=null; ‘

oD
v

US 7,885,981 B2
49 30

if (se.getM¥@terColumn() != null) {
pe= (StackElement)1.get (1.size()~-2);

<br><font size="4">FOR

<b> <%=

TableDescriptorDisplay.getDisplayLabel (pe.getTableName(),
TableDescriptorDisplay.AllUpper) %><%=
(TableDescriptorDisplay.getDisplayLabel (pe.getTableName(),Tabl
eDescriptorDisplay.AllUpper) .equals ("CUSTOM VIEW PROTOTYPE_3")
N]
TableDescriptorDisplay.getDisplayLabel (pe.getTableName (), Table
DescriptorDisplay.AllUpper) .equals ("CUSTOM VIEW PROTOTYPE 2")
{| TableDescriptorDisplay.getDisplayLabel (pe.getTablename(),
TableDescriptorDisplay.AllUpper) .equals ("CUSTOM VIEW
PROTOTYPE _1"))?7"":" #"+pe.getCurrentKey() %></font></b>

<img src="images/logo-width.gif">

</font></TD>
</TR>
</TABLE>

<hr> .
<FORM METHOD="POST" NAME="<%= tableName %>" ACTION="<%= URIPath %>
/DoAddEdit.jsp">
<TABLE width="100%" cellpadding="0" cellspacing="0">._
<tr valign="middle” align="right"><TD valign="top" align="left"
WIDTH=100% ROWSPAN=3>

<s=

TableDescriptorDisplay.displayNavbar (tableName, unqgStr, canBrows
eFlag, canAddFlag, (se.getSearchString{) != null))
&>

String buttonLabel = null;

if (mode.equals("add")) {
buttonLabel = “Add Record to ";
doProcess = "insert";

}

else if (mode.equals("search")) {

butteonLabel = "Search for Records in ";
daProcess = "filter";
}
else { -
buttonLabel = "Update Record in ";
doProcess = "update";

}
buttonbabel += TablebescriptorDisplay.qetFormattedLabel (tableName) ;

</TD><TD valign="middle" align="right">
<INPUT TYPE="SUBMIT" VALUB="<%= buttonLabel >"

<$= (mode.equals ("search") ?"onClick=\"return
checkNumeric()s\"":"onClick=\"return checkRequired();\"") %>
>

<!-- %= (mode.equals ("search") ?"":"anClick=\"return

checkRequired();\"") % -->

A
oo

oP
v

An
oa

if

US 7,885,981 B2
51 52

</TD><TD valign="middle" align="right">
<img src="images/logo-width.gif">
</TD></TR>

(mode.equals("search") |] mode.equais("add")) {

<tr valign="top" align="right" height=1><TD valign="top"
align="left">

</TD><TD></TD></TR>

<tr valign="top" align="right"><TD valign="top" align="left">

Balloon b=null;
if (mode.equals("search")) {
b=bh.getNavBalloon ("expressEditCheckbox") ;

<input name="expressEdit" type="checkbox” <% if (b!=null) { %>
onMouseOver="setHang('<%= b.getID() S>',event,this, 'navhink') ;
return true;" onMousedut="clcearHang(); return true;"

onClick="clearHang(); return true;" <% } %> value="Yes" <%=
((session.getAttribute ("expressEdit") != null) && (( (String)
session.getAttribute ("expressEdit")) .equals ("Yes") )}) ?"CHECKED"
3 ore 2>>

if (b!=null) {

<A HREF="" CLASS="notDecorated" onMouseOver="SsetHang ('<%=
b.getID() %>',event, this, 'navLink'); return true;"
onMouseOut="clearHang(); return true;" onClick="clearHang();
return false;"> :

Enable ‘express edit'<% if (b!=null) { %></A><% }) %>

}
else if (mode.equals({"add")) {
b=bh.getNavBalloon ("powerAddCheckbox") ;

<input name="powerAdd" type="checkbox" <% if (b!=null) { %>
onMouseOver="setHang('<%$= b.getID() %>',event,this, 'navLink')?;
return true;" onMouseOut="clearHang(); return true;"
onClick="clearHang(); return true;" <% } %> value="Yes" <%=

( (request.getParameter("powerAdd") != null) &&
( (request.getParameter ("powerAdd")) -equals ("Yes") )) ?"CHECKED":
wrt &3>>

if (b!=null) {

<A HREF=""CLASS="notDecorated" onMouseOver="SetHang ('<%=
b.getID() $>',event,this, 'navLink'); return true;”"
onMouseOut="clearHang(); return true;" onClick="clearHang();
return false;">

}

Enable ‘power add'<% if (b!=null) { %></A><% ] %>

US 7,885,981 B2
53 54

}

</TD><TD valign="top" align="right">
<img sre="images/logo-width.gif">
</TD></TR>

</TABLE>
<br>
<TABLE border="1" width="100%" id="dataTable">

int columnNumber=1;
int htmiElementNum=1;
StringBuffer requiredFieldsForm=
new StringBuffer ("<FORM name~\"requiredFields\">\n");
StringBuffer numericFieldsForm=
new StringBuffer ("<FORM name=\"numericFields\">\n");

StringBuffer tableHelp = new StringBuffer ();

while (displayFieldsBnumeration.hasMoreElements ()) {
String columnName= (String) displayFieldsEnumeration.nextElement ();
String formattedColumnName= .
ddtd.getFormattedField(columnNumber-1);

LE£ ((imode.equals("search"})) &&
(columnName.equals("ENTERED_BY_USERS_KEY") |]
columnName.equals ("ENTRY_DATE") ||
columnName.equals ("MODIFIED BY _USERS_KEY") ||
columnName. equals ("LAST_MODIFIED_ DATE") })

{
columnNumbert+;
continue;

}

String value=""j;

value=request.getParameter (ddtd.getDatabase ()
+" “+tddtd.getTable ()+"__"+columnaName) ;
if (value == null) {
if (tableVals.size() > 0) {
value= (String) tableVals.get (ddtd.getDatabase (}
+ “tddtd.getTable()+"%_ "+columnName}) ;
)
else if (mode.equals("edit")) {
value=rs.getString(columnNumbertt+);

}

aif (walue == null) {
value="";

}

String displayLlabel =
TableDescriptorDisplay.getDisplayLabelEdit (ddtd,
columnName,

"document .forms[1]."+ddtd.getDatabase()+"__o "+
ddtd.getTable()+"__ "+columnName,1,ungStxr, usersKey, con) ;
int begTag=displayLabel.indexOf ("<b>");

US 7,885,981 B2
55 56

int endT@@displayLabel. indexOf ("</K#"]
String trimmedDisplayLabel=displayLabel;
if (begTag >=0 && endTag >= 0) {
trimmedDisplayLabel=
trimmedDisplayLabel .substring (begTagt3, endTag);
}
ResultSetMetaData rsmd=ddtd.getMetaData (};
try { .
if ((rsmd.isNullable (ddtd.findColumnName (columnName) ) t=
ResultSetMetaData.columnNullable) &&
ddtd.getKeyField() != null &é&
!ddtd.getKeyField().equals(columnName) &&
!columnName.endsWith ("_FLAG") )

requiredFieldsForm.append ("\t<INPUT type=\"hidden\" "+
"name=\""+ddtd.getDatabase()+"_ “tddtd.getTable()+
"__"+columnNamet+"\" value=\""+
trimmedDisplayLabelt+"\">\n");

if
(rsma.getColumnTypeName (ddtd. findColumnName (columnName) ) .equal
s ("NUMBER") && ((ddtd.getKeyField() != null &&

ddtd.getKeyField().equals(columnName)) ||
! (columnName.endsWith ("_KEY") 11

columnName.endsWith ("_FLAG"))))} {
numericFieldsForm.appenda("\t<INPUT type=\"hidden\" "+
"name=\""+tddtd.getDatabase()+"_ "+tddtd.getTable()+

w"+columnNamet+"\" value=\""+
trimmedDisplayLabel+"\">\n");

}

catch (SQLException sqle) {
sqile.printStackTrace()?;

}

S>
<TR><TD bgcolor="<%$= DARKCELL %>" align="right" valign="center">
<font size="2">
<nobr>
<3=
displayLabel
>
</nobxr>
</font>
</TD><TD bgcolor="<%= MIDLCELL %>" width="1008">
<S=
TableDescriptorDisplay.getDisplayFieldEdit (ddtd,
// columnName, (returnHash != null)?"return":mode, value,
(LinkedList) session.getAttribute ("sessionStack") )
columnName,mode,value, 1, con)
// (LinkedList) session.getAttribute ("sessionStack") )
>
<3

Balloon tb = bh.getTableBalloon (ddtd.getTable().toUpperCase ()
+"."+columnName.toUpperCase());
if (th != null) {
tableHelp. append ("makeTableBalloon(\""ttb.getID(pt"\u,\""+
tbh.getMsg()t"\");\n");

oe
v

US 7,885,981 B2
57 58

</TD></TR>

}
((StackEBlement)1.get (l.size()-1)) .setFormValues (new Hashtable (});
/*
if (con != null) {
editResultSet.close();i
stmt.close();
//connMgr. freeConnection (ddtd. getDBConnection(),con);
}
*/
MasterDetail md=MasterDetail.getInstance (dbName, dbConnName) ;
Vector detailTables=md.getDetailTables (tableName) ;
if (detailTables != null && mode -equals("edit")) {
Object[] detailTablesAry = detailTables.toArray ();
/f/Arvays.sort (detailTablesAry);
for (int i=O;i<detailTablesAry.length;itt+) [{
String detailTableInfo=(String) detailTablesAry[il;
int dot=detailTableInfo.indexOf(".");
String detailTable=detailTableInfo.substring(0,dot);
String detailTablePKey=detailTableinfo.substring(dot+1);
String mdQStr="SELECT COUNT (*) FROM "“+detailTablet+
" WHERE "+detailTableFKeyt"="+
request.getParameter ("keyValue");

if (Debuc.areDebugging) {
Debug.doLog("mdagstr: "“+mdQStr, Débug. INFO);
} :

//Statement masterStmt = masterCon.createStatement ();
rs = stmt.executeQuery (mdQStr);

rs.next();

int numEntries=Integer.parseiInt (rs.getString(1));
String entryStr=(numEntries == 1) ?"entry”:“entries";

<TR><TD align="right" bgcolor="<%= DARKCELL %>">
<font size="2">
<!--A HREF="<$= URIPath %>/DoAddEdit.jsp?tableName=<%3=
detailTable %>&keyField=<%= detailTableFKey %>&keyVal=<%=
request.getParameter ("keyValue") S>&stackLevel=%2BédoProcess=
dadrillDetailé&<%=
TableDescriptoxrDisplay.getNoCache (TableDescriptorDisplay.ForUR
L) %>"%-->

sf = sfimt.executeQuery (
“SELECT "+
" DECODE (MAX (ABS (Can_Browse_Flag)), NULL, 0,
MAX (ABS (Can_Browse_Flag))) AS Can_Browse Flag "+

"FROM "+

// " PEOPLE, STAFF, USERS,
SECURITY GROUP_USER, SECURITY_GROUP_TABLE, SECURITY_TABLE
wa

" PEOPLE, USERS, SECURITY_GROUP_USER,
SECURITY_GROUP_TABLE, SECURITY_TABLE "+
"WHERE "+

" PEOPLE.Active_Flag <> 0 AND "+

de
Vv

A
oe

A
ae

S>

US 7,885,981 B2

39 60
iA iy
STAFE.People_ Key AND "+
aA " STAFF .Staff Key =

USERS.Staff Key AND "+

" PEOPLE.People Key = USERS.People_Key AND "+
" USERS .Users_Key = SECURITY_GROUP_USER.Users_Key AND
"4

" SECURITY_GROUP_USER.Security Group_Key =
SECURITY_GROUP_TABLE.Security_Group_Key AND" +

" SECURITY _GROUP_TABLE.Security Table Key =
SECURITY _TABLE.Security_Table_ Key AND "+

" SECURITY_TABLE.Security_Table_Name =
'"+detailTable+"' AND "+

" SECURITY _GROUP_USER.Users_Key = “+tusersKey -

sf.next()7
if (sf.getBoolean(1)) {

<A HREF="javascript :holdForDetail ('<%= detailTable %>',<%=
request .getParameter ("keyValue") S>,<S= ungStr %>) ">

= TableDescriptorDisplay.getFormattedLabel (detailTable) %>
</A>:

}
else {

<S= TableDescriptorDisplay .getFormattedLabel (detailTable) B>:

~

</font>
</TD><TD bgcolor="«<%= MIDLCELL >">

<nobr> .

<%= numEntries %> <%= entryStr %></nobr>
</TD></TR>

//masterRs.close()?
//masterStmt.close();
//connMgr .freeConnection (dbConnName,masterCon) i
}
}

</TABLE>

<hx>

<!--INPUT TYPE="SUBMIT" VALUB="<%= buttonLabel %>"
onClick="document.forms[1].doProcess.value='update'; return true;"-->

<!--INPUT TYPE="SUBMIT" VALUE="<%= buttonLabel %>"—->

<INPUT type="hidden" name="doProcess"™ value=" %= doProcess %>">
<INPUT type="hidden" name="holdDoProcess" value="">

<INPUT type="hidden" name="tableName" value="">

<INPUT type="hidden" name="keyValue"™ value="">

<INPUT type="hidden" name="stackLevel" value="@Q">

<INPUT type="hidden" name="returnDropDown” value="">

<INPUT type="hidden" name="ung" value="<%= ungStr Srp

<!-- $=

TableDescriptoxrDisplay.getNoCache (TableDescriptorDisplay.ForForm) %
-->

US 7,885,981 B2
61 62

</FORM><P>

<=

requiredFieldsForm.toString()

$>
</FORM>
<= .
numericFieldsForm.toString()
&>
</FORM>
<!--jsp:include page="/common/GlobalFooter.jsp" flush="true"-->
<!--/jsp:include--> 1
<SCRIPT>
setTableCoords()?
setupNavHelp();
<%= tableHelp.toString() %>
</SCRIPT> :
</BODY>
</HTML>
<%
}
catch (SQLException sqle) {
sqle-.printStackTrace();
throw sqle;
}
finally {
try {
: if (sf != null)sf.close();
if (rs $= null)rs.close();
if (sfmt != null)sfmt.close();
if (stmt != nuil1l)stmt.close();
if (con != null)con.close();
}
catch (SQLException sqle) {
sgqle.printStackTrace();
}
; }
S>

<%@ include file="common/GlobalFooter.jsp" %>

Schemalive/BalloonHelp.jsp

1

// $Revision: 2.3 §
// $Date: 2001/10/30 01:35:53 §
>

oe!

<

<S@ page import="HTMLUtils.*"
<%@ page import="java.util.*"

J? oe
vv

<HTML>
<HEAD>
<TITLE>BalloonHelp</TITLE>
</HEAD>

<BODY bgcolor="#FFFFFF">
<%

US 7,885,981 B2
63 64

//BalloonHelp Wereshinstance (out);
String function=request.getParameter ("function") ;
if (function==null) {

oe

>
<A HREF="/Schemalive/Balloontelp.jsp?function=rebuild">Rebuild
BalloonHelp</Aa>
<h3>Navigation BalloonHelp</h3>
<TABLE BORDER="i">
<TR><TH align="left">Help Object Name</TH><TH align="left">PopUp
Text</TH></TR>

A
oe

BalloonHelp bh = BalloonHelp.getInstance();
Enumeration nbi = bh.getNavBalloonIDs();
Enumeration tbi bh.getTableBalloonIDs ();
while (nbi.hasMoreElements()) {
String key = (String)nbi.nextElement ();
Balloon b = bh.getNavBalloon (key);

oo
v

<TR><TD align="left"><%= key %></TD><TD align="Left"><%=
ShowHTML (b.getMsg()) %></TD></TR>

A
ae

}

Cd
v

</TABLE>
<n3>Table BalloonHelp</h3>
<TABLE border="1"> ;
<TR><TH align="left">TABLE.Column</TH><TH align="left">PopUp
Text</TH></TR>

while (tbi.hasMoreElements()) {
String key = (String)tbi.nextElement ();
Balloon b = bh.getTableBalloon (key);

<TR><TD align="left"><%= key %></TD><TD align="left"><$=
ShowHTML (b.getMsg()) %></TD></TR>

}

</TABLE>

else if (function.equals("rebuild")} {
BalloonHelp.refreshiInstance (out) ;
>
<P>
<A HREF="/Schemalive/BalloonHelp.jsp">Browse BalloonHelp</A>
<3
}
%>
</BODY>
</HTML>
<3!
public String showHTML (String msg) {
StringBuffer sb = new StringBuffer (msq);
int taqLoc=-1;
while ‘(0 < (tagLoc=sb.toString().indexOf("<")})) {
sb.deleteCharAt (tagLoc);
sb.insert(tagLoc, "&lt:");

US 7,885,981 B2
65

} “

while (0 < (tagboc=sb.toString().indexdr (#>*))) "7

>

sb.deleteCharAt (tagLoc);
sb. insert (tagLoc, "&gti")7
}

return (sb.toString());

Schemalive/Browse. jsp

// $Revision: 2.5 $

// $date: 2001/10/30 08:26:33

<%!

a>

<%@ page
<S@ page
<%@ page
<%@ page
<%$@ page
<%@ page
<%8@ page

an

import="dbutils.*" %>
import="HTMLUtils.*" %>
import="sessionUtils.*"
import="java.sql.*" %>
import="java.util.*" %>
import="common.*" %>

oe
Vv

66

avutoFlush="false" buffer="3000k" errorPage="/Error500.jsp"
session="true"%>

<%! public static final String version_Browse_ jsp = "$Revision: 2.5 $"; %>

<HTML>

<HEAD>

<%$@ include file="common/EntryPoints.jsp" %>
<%@ include file="common/GlobalHeaderVARS.jsp" %>
<%@ include file="common/EmptyParamCheck.jsp" %>

<

ae

re
re

if

}
el

sponse .setHeader ("pragma", "no~cache");
sponse.setHeader("Expires",

new java.util.Date(new java.util.Date ().getTime ()-100) .toString());
String ungStr=

TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaSecri

pt);

(request.getParameter ("ung") != null &&
request.getParameter ("ung") .equals ( (String)
session.getAttribute ("ung") ))

if (Debug.areDebugging) {

Debug. doLog ("Browse unq matched!", Debug. INFO) ;

}

session.setAttribute("unqg”",ungStr);
se if (request.getParameter("stackLevel") != null &&

request.getParameter ("stackLevel") .equals("0"))

if (Debug.areDebugging) {

Debug.doLog ("Chose to restart from header", Debug.INFO);

US 7,885,981 B2
67 68

session. set@@tribute ("ung",ungStr);

}

else if (request.getParameter("ung") != null &&
session. getAttribute ("ung") == nuli)

{ .
7/ *THIS* is a (real) expired-session error!!!
response .sendRedirect ("/Schemalive/ExpiredSession.jsp");
return;

}

else {
/*
if (Debug.areDebugging) {

Debug. doLog ("AddEditForm unq did not match", Debug. INFO) ;

}
*/
// *THIS* is actually an out-of-sequence error...
response. sendRedirect ("/Schemalive/OutOfSequence. jsp");
return;

}

Connection con=null;

Statement stmt=null;

ResultSet rs=null;

boolean canBrowseFlag;

boolean canEditFlag;

boolean canAddFlag;

boolean BrowseTarget2Flag=true;

boolean BrowseTargetlFlag=true;

boolean EditTarget2FPlag=true;

boolean EditTargetiFlag=true;

boolean loopCellFlag=true;

try {
con=SQLUtil.makeConnection();

>

<TITLE>Schemalive</TITLE>

<8@ include file="common/GlobalHeaderJavascript.jsp" %>
</HEAD>

A
oe

int sequence=ManageSession.updateSequence (session);

// session.setAttribute ("powerAdd", “"No");
S>
<!-~— BODY bgcolor="<%= PAGEBKGD %>"
onLoad="location.href='/Schemalive/CheckSequence. jsp?sequence=<%= sequence
S>&<%= TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForURL)
B>1, -a>y

<BODY bgcolor="<%= PAGEBKGD %>" onLoad="history.forward(1);">

<%@ include file="common/GlobalHeaderHTML.jsp" %>
<

elt

if (request.getParameter ("newPageSize") != null) {
session.setAttribute ("pageSize",
request.getParameter ("newPageSize"));

US 7,885,981 B2
69 70

String tabi Wfame=request.getParameter (Mbebyenane EMT
if (tableName == null) {
// entryPoints is defined in common/EntryPoints.jsp
for (int i=-0;i<entryPoints.length;it++) {
if (Arrays.binarySearch (headerTableList,entryPoints[i}) >= Q)
{
tableName=entryPoints [il];
break;
}
}
aif (tableName == null) {
4£ (headerTableList.length > 0) {
' tableName=headerTableList [0);
}
}
}
String doProcess=request .getParameter ("doProcess");
if (doeProcess == null) {
daoProcess="new";
}
String stackLevel=request.getParameter ("stackLevel");
if (stackLevel. == null) {
stackLevel = "@";
}
if (wsersKey == null ||] tableName == null) {
throw new ServletException ("<p><br><br><br>"+

"gnbsp; anbsp; énbsp; nbsp; énbsp; énbsp; énbsp- énbsp; knbsp; &nbsp? &
nbsp; énbsp; "+ ; -
"</b>YOU ARE <b>NOT AUTHORIZED</b> TO USE THIS SYSTEM<b><br>"+

“"enbsp; nbsp; énbsp; &nbsp; énbsp; &nbsp; énbsp; nbsp; &nbsp; &nbsp; &
nbsp; énbsp; &nbsp; énbsp;"

stmt =
con.createStatement (ResultSet.TYPE_SCROLL_INSENSITIVE, ResultSet .CONc
UR_READ_ONLY);
rs = stmt.executeQuery (
“SELECT "+
"  DECODE (MAX (ABS (Can_Browse_Flag)), NULL, 0,
MAX (ABS (Can_Browse_Flag)}) AS Can_Browse Flag, "+
"  DECODE (MAX (ABS (Can_Edit_Flag)), NULL, 0,
MAX (ABS (Can_Edit_Flag))} AS Can_Edit_Flag, "+
"  DECODE (MAX (ABS (Can_Add_Flag)), NULL, 0,
MAX (ABS (Can_Add_Flag))) AS Can_Add_Flag "+
"PROM "+
// “ PEOPLE, STAFF, USERS, SECURITY_GROUP_USER,
SECURITY GROUP TABLE, SECURITY _TABLE he
" PEOPLE, USERS, SECURITY_GROUP_USER, SECURITY _GROUP_TABLE,
SECURITY_TABLE "+ ~

"WHERE "+

" PEOPLE.Active Flag <> 0 AND "+

ff " PEOPLE. People_Key = STAFF.People_Key AND "+
/f " STAFF.Staff£_Key = USERS.Staff_Key AND "+

w

PEOPLE.People_ Key = USERS.People_ key AND "+
USERS.Users Key = SECURITY_GROUP_USER.Users_Key AND "+

w

64

US 7,885,981 B2
71 72

"  secuRWM GROUP_USER.Security_Grdiig(“Kgy,-4I
SECURITY GROUP _TABLE.Security_Group_Key AND "+
“ SECURITY_GROUP_TABLE.Security Table_Key =
SECURITY_TABLE.Security Table Key AND "+
// “" SECURITY _TABLE.Security Table Name =
'™trequest.getParameter ("tableName")+"' AND "+
" SECURITY _TABLE.Security Table Name = '"+tableName+"' AND “+
“  SECURITY_GROUP_USER.Users_ Key = "t+userskey

Ve

rs .next ();

canBrowseFlag = rs.getBoolean(1l);

canEditFlag = xrs.getBoolean (2);

canAddFlag = rs.getBoolean(3);

if (!canBrowseFliag) {
throw new ServietException ("<p><br><br><br>"+

"enbsp; énbsp; énbsp; &nbsp; &énbsp; &énbsp; &nbsp; &énbsp; &nbsp; énbsp; &
nbsp; &nbsp; "+

4/ "<¢/b>YOU ARE <b>NOT AUTHORIZED</b> TO BROWSE THE
<b>"+TableDescriptorDisplay.getDisplaylabel (request .getParamet
er("tableName"), TableDescriptorDisplay.AllUpper)+"</b>

TABLE<b><br>"+

"</b>YOU ARE <b>NOT AUTHORIZED</b> TO BROWSE THE
<b>"+TableDescriptorDisplay.getDisplayLabel (tableName,
TableDescriptorDisplay.AllUpper)+"</b> TABLE<b><br>"+

"Enbsp; &énbsp; énbsp; &énbsp; &énbsp; &nbsp; énbsp; énbsp; énbsp; &nbsp; &
. nbsp; énbsp; énbsp; énbsp;")7
}
Jf if .
(request.getParameter ("tableName") .equals ("CUSTOM VIEW PROTOTYPE 1")
Vf
if (tableName.equals ("CUSTOM VIEW_PROTOTYPE 1")) {
rs = stmt.executeQuery (
"SELECT "+
"  SECURITY_TABLE.Security Table Name, "+
" DECODE (MAX (ABS (Can_Browse_Flag)}), NULL, 0,
MAX (ABS (Can_Browse_Flag))) AS Can_Browse Flag, "+
" DECODE (MAX (ABS (Can_Edit_Flag)), NULL, 0,
MAX (ABS (Can_Edit_Flag))) AS Can_Edit_Plag "+
"FROM "+
// " PEOPLE, STAFF, USERS, SECURITY_GROUP_USER,
SECURITY _GROUP_TABLE, SECURITY _ TABLE "+
" PEOPLE, USERS, SECURITY _GROUP_USER,
SECURITY_GROUP_TABLE, SECURITY TABLE M+

"WHERE "+

" PEOPLE .Active_Flag <> 0 AND "+t

/f " PEOPLE.People Key = STAFF.People_Key
AND "+

// " STAFF.Staff Key = USERS.Staff Key AND
Wy

" PEOPLE .People_Key = USERS.People Key AND "+

" USERS .Users_ Key = SECURITY_GROUP_USER.Users_Key AND "+
. SECURITY_GROUP_USER.Security Group_Key =
SECURITY_GROUP_TABLE.Security Group_Key AND "+

" SECURITY GROUP TABLE.Security_Table Key =

SECURITY _TABLE.Security Table Key AND "+

US 7,885,981 B2
73 74

" SECURITY _TABLE.Security ftag7@" wae CMe
(‘DRILL_TARGET 2', 'EDIT_TARGET_2', 'DRILL_TARGET_1"',
‘EDIT TARGET_1') AND "+
" SECURITY _GROUP_USER.Users_Key = "tusersKeyt" “+
"GROUP BY "+
" SECURITY_TABLE.Security_Table_Name my
“ORDER BY 1 ASC™

3

rs.next();

EditTarget2Flag = rs.getBoolean (3);

rs.next()?

BrowseTarget2Flag = rs.getBoolean (2);

rs.next();

EditTargetiFlag = rs.getBoolean(3);

rs.next();

BrowseTargetlFlag = rs.getBoolean (2);

oe

>

<!--%@ taglib uri="view" prefix="view"™ %-->
<$@ taglib uri="/WEB-INF/taglib/stack.tlid” prefix="sessionUtils" %>

<%
// String tableName=request.getParameter ("tableName”") ;
String keyField=request.getParameter ("keyField");
String keyVal=request.getParameter ("keyVal");
// String doProcess=request.getParameter ("doProcess") ;
// String stackLevel=request.getParameter ("stackLevel");
if (stackLevel == null) { stackLevel="@"; }
if ((String) session.getAttribute ("returnTable") ‘= null) {
session.removeAttribute ("returnTable");
}
if (tableName == null) {
tableName=entryPoints (0);
}
String origTableName=null;
tableName=tableName.toUpperCase (};
ff if (dd.getDataDictionaryTD (tableNamet+" VIEW") != null) {
if (dd. getDataDictionaryTD (ViewGenerator.getViewName (tableName) ) fs
null) {
origTableName=new String (tableName) ;
tableName=ViewGenerator.getViewName (tableName) ;
}
else [{
origTableName=tableName;
}
&>

<!--view:setVars defaultEntryPoint="<%= entryPoints[0] %>" dbName="<%3=
dbName %>" dbConn="<%= dbConnName %>"-->
<sessionUtils:stack tableName="<%= origTableName >" mode="browse"
stackLevel="<%= stackLevel %>" database="<%= dbName %>" dbConn="<%=
dbConnName %>">

<3

// StackInfo: %= stackiInfo %

g>
</sessionUtils: stack

A
ate

US 7,885,981 B2
75 76

<f=
TableDescriptorDisplay.displayStack ((LinkedList)
session.getAttribute ("sessionStack") ,unqStr)

S>

<hr>

<TABLE width="100%" cellpadding="0" cellspacing="0">
<tr valign="top" align="right"><td>
<font face="ARIAL, HELVETICA" size="4">BROWSING<b>
<=
TableDescriptorDisplay.getDisplayLabel (origTableName, TableDescrip
torDisplay.AllUpper) %></b>
<!--img srce="images/logo-width.gif"-->

LinkedList sessionStack=(LinkedList)
session.getAttribute ("sessionStack");
StackElement se=(StackElement) sessionStack.getLast ();

//if (doProcess != null && doProcess.equals("fullList")) {

if (doProcess.equals("fullList")) {
f* ;
String filterString= (String) session.getAttribute (origTableName) ;
if (filterString != null) f{

session.removeAttribute (origlableName) ;
}
*/
se.setSearchString (null);
se.setSearchParams (new Hashtable ());7
)
/*
else if (!keyField.equals("null")) {
session.setAttribute (origTableName, "A."+tkeyField+"="+keyVal)
}
xf

//String filterTarget = (String)
session.getAttribute ("filterTarget");
/f/iE (£ilterTarget != null && filterTarget.equals(origTableName)) [{
String filterString=null;
//if ((f£ilterString= (String) session. getAttribute (origTableName) ) {=
null) {
StackElement pe=null;
if (se.getMasterColumn() != null) {
pe=(StackElement) sessionStack.get (sessionStack.size()~2)?

<br>

<font size="4">FOR

<b><%= TableDescriptorDisplay.getDisplayLabel (pe.getTableName(),
TableDescriptorDisplay.AllUpper) %><%=
(TableDescriptorDisplay.getDisplayLabel (pe.getTableName (),
TableDescriptorDisplay.AllUppex) .equals("CUSTOM VIEW
PROTOTYPE 3”) tt

TableDescriptorDisplay.getDisplayLabel (pe.getTableName (),
TableDescriptorDisplay.AllUpper) .equals ("CUSTOM VIEW
PROTOTYPE 2") [|

TableDescriptorDisplay.getDisplayLabel (pe.getTableName (),
TableDescriptoxDisplay.AllUpper) .equals ("CUSTOM VIEW
PROTOTYPE _1"))2?"":" #"+pe.getCurrentKey () %></p>

A
oe

US 7,885,981 B2
77 78

</font>
<img src="images/logo-width.gif">

if (se.getSearchString() != null) {
<br><FONT size="4"> (FILTERED) </font>
<img src="images/logo-width.gif">
}
</font></TD>
</TR>
</TABLE>
<hr>

<!--FORM-->
<FORM name="editForm" action="<%= URIPath %>/Browse.jsp” METHOD="POST"
onSubm.'.="return validateRPP() ">
<TABLE width="100%" cellpadding="0" cellspacing="0">
<tr valign="top" aligns"right"><TD valign="top" align="left">
<B=

TableDescriptorDisplay.displayNavbar (origTableName, ungStr,c

anBrowseFlag, canAddFlag, (se.getSearchString() j= null) )}
&>
</TD><TD valign="top" align="right">
</TD>
</TR>
</TABLE>

<br>

StringBuffer gStr=new StringBuffer ();

StringBuffer paramStrBuf=new StringBuffer ();

StringBuffer tableHeaders=new StringBuffer ();
DataDictionaryTD ddtd = dd.getDataDictionaryTD (tableName) ;

Enumeration displayFieldsEnumeration = ddtd.displayFields()i

int columniIndex = 0;
while (displayFieldsEnumeration.hasMoreElements()) {
String columnName = (String)

displayFieldsEnumeration.nextElement ();

/*

if (columnName.endsWith ("_DATE")) {
qStxr-append("to_char ("+columnName+", 'MM/DD/YYYY") AS ");

} .

*f

paramStrBuf.append (columnName+",");

qStr.append (columnName+",");

if (ddtd.getKeyField() != null &6&
ddtd.getKeyField() .equals (columnName) )

{

continue;
} ”
//tableHeaders.append("<TH bgcolor="+DARKCELLt+"><font size=

US 7,885,981 B2
79 80

\"2\">"4iBledescriptorDisplay. get Disb aypahd Seiad tel, cb Ed dimndim
e)4+"</font></TH>");
tableHeaders.append ("<TH bgcolor="+DARKCELL+"><font size=
\"2\">"4+ddtd. getPormattedrield (columnindext+) +"</font></TH>");

}

// delete last ,
qStr.deletreCharat (qStr.length()-1);
paramStrBuf.deleteCharAt (paramStrBuf.length()-1);3

qStr.insert(0,"SELECT ");
_qStr.append(" FROM "+tableName) ;

/*
else if (origTableName.equals (
session.getAttribute ("filterTarget")))
{
qStr.append (session.getAttribute ("filterString") };
}

*/
//if (keyPield '= null ||
origTableName.equals (session.getAttribute ("filterTarget"))) {

//String filterString;
//if ((filterString= (String) session.getAttribute (origTableName)) !=
null) {

if ((se.getMasterColumn() != null) || (se.getSearchString() !=
null}) f
if (tableName.endsWith("_VIEW")) {

DataDictionaryTD ddtd2 = dd.getDataDictionaryTD (tableName) ;
gStr = new StringBuffer (ddtd2.getViewSelect () .trim());

}

else {
qStr.append(" A");

if (se.getMasterColumn() != null) {
if (qStxr.toString() .indexOf ("WHERE") > 0) {
qStr.append(" AND A.“+se.getMasterColumn ()
: +"="tne.getCurrentKey ());
}

else {
qStr.append(" WHERE A."+se.getMasterColumn ()
+"="+pe.getCurrentKey ());

}

aif (Debug.areDebugging) {
Debug.doLog("Pre search-string suffix: "4qStr, Debug. INFO) ;
Debug.doLog("Search string: |"+se.getSearchString ()
+"]", Debug. INFO) ;
}
if ((se.getSearchString() != null) && (se.getSearchString() .length ()
> O)) €
if (qStr.toString().indexOf ("WHERE") > 0) {
qStr.append(" AND "+se.getSearchString())ji
}
else { .
qStr-append(" WHERE "+se.getSearchString());

US 7,885,981 B2
$1 82

}
)
if (Debug.areDebugging) {
Debug.doLog("Pre search-string suffix: "“+qStr,Debug-INFO);
}
StringBuffer orderByStr = new
StringBuffer (TableDescriptorDisplay.getOrderBy (ddtd) );

// check for sort order

String sortOrderName = null;
ResultSetMetaData rsmd = ddtd.getMetaData ()?
try {
for (int i=L;i<=rsmd.getColumncCount ();itt+) {
String curColName = rsmd.getColumnName (i);

if (curColName.endsWith ("SORT_ORDER") ||
curColName.endsWith ("SORT_KEY") )

sortOrderName = curColName;
break;
}
} .
if (sortOrderName != null) {
if (orderByStr.length() == 0) {

orderByStr.append (sortOrderNawme) ;

}

else {
orderByStr.insert (0, sortoOrderName+",")?

}
catch (SQLException sqie) {
sqle.printStackTrace();

Af (orderByStr-length() > 0) {
qStr.append(" ORDER BY “"+orderByStr);
}

java.util.Date beginView = null;

if (Debug.areDebugging) {
Debug.doLog("View qStr: "t+qStr.toString(),Debug.INFO);
beginView = new java.util.Date ();

}

//stmt =

con. createStatement (ResultSet.TYPE_SCROLL_INSENSITIVE, ResuitSet.CONnc
UR_READ_ONLY) ;

rs = stmt.executeQuery (qStr.toString());

//ResultSetMetaData rsmd = rs.getMetaData ();

if (Debug.areDebugging) [
// Debug.doLog("newPageSize =
"“t+trequest.getParameter ("newPageSize"), Debug. INFO);
// Debug.doLog("“pageSize = ;
“"+session.getAttribute ("pageSize"),Debug.INFO);

}

if (request.getParameter("newPageSize") != nuli) {

oe
v

<%

US 7,885,981 B2
83 84

session. McAttribute ("pageSize",
request.getParameter ("newPageSize”"));
}
int pageSize = (session.getAttribute ("pageSize") ==
null) ?10:Integer.parselInt (( (String)

session.getAttribute (“pageSize")));

String scroll = (String) request.getParameter ("Scroll");
if (scroll == null) { scroll = ""; }

// /*

rs.last();
int rowCount

tt

rs.getRow();

f/f *f
/*
ant rowCount = 0;
try {
while (rs.next()) {

rowCounttt;
}
}
catch (Exception ex) {
// sgle.printStackTrace ();
if (Debug.areDebugging) {
Debug.doLog("Caught generic exception in Browse on

rs.next()...",Debug.INFO);
}
}
xf
rs.beforeFirst();
int topRow = Math.min(se.getRowPointer (),rowCount)?

// int topRow = 0;
// StxringBuffer[] sbAry=null;
if (rowCount <1) {

<br><br><br>
<hr>
<font face="ARIAL, HELVETICA" size="4"><center>

&nbsp; énbsp; énbsp; énbsp; énbsp; nbsp; énbsp; énbsp; &nbsp; &nbsp; én

bsp; &énbsp; énbsp; &nbsp;

THERE ARE <b>NO RECORDS</b> WHICH SATISFY YOUR REQUEST
</center></font>

}
else if (ddtd.getTable() .equals ("CUSTOM_VIEW_PROTOTYPE_3") &&
(canAddFlag) && (rowCount == 1)) {
if (rs.first()) {
se.setMode ("search");
se.setCurrentKey (null);
se.setSearchString (null);
// se.setSearchParams (new Hashtable);
// se.setFormValues (new Hashtable);
//pageContext. forward ("/AddEditForm. jsp?"+
response.sendRedirect ("/Schemalive/AddEditForm. jsp?"+
"tableName=SPECIAL TABLE_1&"+
"“mode=addéi"+
"doProcess=add&é"+
// “keyValue=06"+

US 7,885,981 B2
85 86

"paentKey="trs.getString (3) Hea”

// “newPageSize="+pageSizet"E"+

"stackLevel=%2B"+"Ea"+

ddtd.getDatabase ()

+" SPECIAL _TABLE_1_ SPECIAL COLUMN_1_KEY="t+rs.getString(10
) + wt & wh

//TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.
FOrURL) };
"ung="4+ungStxr

}
}

/f elise if ((canEditFlag) && (rowCount == 1) && (ddtd.getKeyField()
!'= nuil)) {
else if ((canEditFlag) && (rowCount == 1) 6&&

((ddtd.getKeyField() != null) || (ddtd.getTDType() ==

TableDescriptor.VIEW)) &&

(iddtd.getTable() .equals ("CUSTOM _VIEW_PROTOTYPE_1")) &&
((session.getAttribute ("“expressEdit") != null) &&

(((String) session.getAttribute ("“expressEdit") ) -equals("Yes"))))

if (rs.first()) {

/t

se.setMode ("search");

se.setCurrentKey (null);

se.setSearchString (null);

*f

// se.setSearchParams (new Hashtable);

// se.setFormValues (new Hashtable);

// pageContext.forward("/AddEditForm. jsp?"+

response.sendRedirect ("/Schemalive/AddEditForm.jsp?"+
"tableName="t+origTableNamet"&"+
"mode=edité"+
“doProcess=updateé"+
// “keyValue="4zrs.getString (ddtd.getKeyField())4+"&"+
// “keyValue="4rs.getString ( (ddtd.getTDType() ==
TableDescriptor.VIEW) ?l:ddtd.getKeyField())+"&"+
"keyValue="+ ((ddtd.getTDType () ==
TableDescriptor.VIEW) ?rs.getString(1):rs.getString (ddtd.get
KeyPield()))+"aE"+
// “parentKey="4rs.getString (3) +"&e"+
// “newPageSize="+pageSizet+t"&"+
// “stackLevel=S40"4+"a"4
// dadtd.getDatabase ()
+"_ SPECIAL TABLE_1__ SPECIAL COLUMN_1_KEY="+rs.getString (10
y+r ane
//
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.Fo
rURL));
“ung=""+ungStr

}

/*

else {

// stmt = con.createStatement ();

rs = stmt.executeQuery (qStr.toString());

US 7,885,981 B2
87 88

rsmd = rs. g@@MetaData();

/-

int rowCount = 0;
while (rs.next()) {
rowCounttt?;

}

-/

}

af

if (scroll.startsWith("P")) {
topRow = topRow - pageSize;
} :
else if (scroll.startsWith("N")) {
topRow = Math.min(topRow + pageSize, (rowCount - pageSize) + 1)?
}
else if (scroll.startsWith("B")) {
topRow = (rowCount ~ pageSize) + 1;
}
else if (scroll.startsWith("T")) {
topRow = 1;
}
else {
topRow = Math.min(Math.max(1, topRow), (rowCount - pageSize) +
1);
}
topRow = Math-max(topRow, 1);

StringBuffer[] sbAry=new StringBuffer [rsmd.getColumnCount () ];

if (topRow <= 1) {
rs.beforeFirst(}?7
}
else {
rs.absolute (topRow-1);
}

/*

int rowNum = 1;

while (rowNum < topRow) {
rs.next ();

rowNumt+t+;

}

*/

int rowNum = topRow;
boolean firstRow = true;

/f while ((rowCount > 0) && rs.next() && (rowNum < topRow +
pageSize)) {

StringBuffer tableHelp = new StringBuffer ();

while (rs.next() && (rowNum < topRow + pageSize)) {
if (firstRow) {
int pageNumber = 24 ((topRow-2) /pageSize) ;
int pageCount = (rowCount+pageSize-1) /pageSize;
if (topRow == 1) {

US 7,885,981 B2
89 90

pa@@Wumber = 1;

}

else if ((topRowt+pageSize) >= rowCount) {
pageNumber = pageCount;

}

<TABLE border="1" width="100%" id="dataTable">
<TR VALIGN=CENTER><TD ALIGN=CENTER COLSPANS"<%=
remd.getColumnCount () + 1 %>" BGCOLOR="<%= MIDLCELL %>">
<TABLE BORDER=0 CELLPADDING=0 WIDTH=100%%>
<TR VALIGN=CENTER>
<TD WIDTH=20%></TD>
<TD ALIGN=CENTER><font size=2>PAGE <%= pageNumber
S> OF <%= pageCount %> (totaling <%= rowCount %>
records @ <INPUT TYPE=TEXT MAXLENGTH=4 SIZE=3
NAME="newPageSize" VALUB="<%= pageSize %>"> rows
per page) </TD>
<TD ALIGN=RIGHT WIDTH=20%><INPUT TYPE="SUBMIT"
NAME="Scroll" VALUB="Reset Rows"></TD>
</TR>
</TABLE>
</TD></TR>

<TR valign="bottom" align="left">
<TH bgcolor="<%= DARKCELL %>" align="right">#</TH>
<%= tableHeaders.toString(} %>

A
de

'firstRow = false;
}
//BalloonHelp bh=BalloonHelp.getInstance ();
Balloon b=bh.getNavBalloon ("editLink"); ;
StringBuffer linkString = new StringBuffer ("<A “+
((b!=nulil)?
“onMouseOver=\"setHang ('"+b.getID ()
+"' event,this, 'navbink'); "+
“return true;\" "+
"onMouseOut=\"clearHang(); return true; \" "+
"onClick=\"clearHang(); return true;\" ":
d+
"HREPS\""+
"jJavascript:edit('"
di
for (int i=1;i<=rsmd.getColumnCount ();i++) {
String rsStr=rs.getString(i);

if ((ddtd.getTable() .equals ("CUSTOM_VIEW_PROTOTYPE_2") {|
ddtd.getTable() .equals ("CUSTOM_VIEW_PROTOTYPE_1")) && i==1) {
loopCellFlag =
(vs. getString (2) .toUpperCase () .equals ("DRILL_CONTEXT_1")) ?B
rowselargetlFlag:BrowseTfarget2Flag;
b=bh.getNavBalloon ("CVCommentsEditLink") ;
LinkString = new StringBuffer("<A "+
((bf=null)?
"onMouseOver=\"setHang ('"+b.getID()
+"" event, this, 'navLink'); "+
"return true; \" "+

US 7,885,981 B2
91 92

- “onMouseOut=\"clearHandi() i=, Hebd hd SaMeh I ke
“onClick=\"clearHang(); return true;\" ":
wit

)+

"“HREF=\"Browse .jsp?"+

((rs.getString (2) .toUpperCase () .equals ("DRILL_CONTEXT_1i"
))?
"tableName=EDIT TARGET 16":
“tableName=EDIT TARGET 26"
+
"mode=browseé"+
"doProcess=browseé"+
"parentKey="trs.getString (4) +"E"+
"stackLevel=%S2B"+
"sung="+ungStrt"\">"
VG
}
else if (ddtd.getTable() .equalis ("CUSTOM_VIEW_PROTOTYPE_3") &&
i==1) {
linkString = new StringBuffer ("<A HREF=\"AddEditForm.jsp?"+
-"tableName=SPECIAL TABLE 1&"+
"mode=addé"+
"doProcess=add&"+
“parentKey="trs.getString (3)+™&"+
"stackLevel=S2B"t"E"+
ddtd.getDatabase()
+" SPECIAL _TABLE_1_ SPECIAL_COLUMN_1_KEY="+rs.getString
(10) +%e+
"ung="tungStrt"\">"
dV?
} ; .
else if ((ddtd.getTDType() == TableDescriptor.VIEW && i==1) ||
(ddtd.getKeyField() != null && .
ddtd.getKeyField() .equals(rsmd.getColumnName (i) ))

linkString.append(rsStr+"',"+
unqStr+
"y\">"
i
}
if (rsStr == null) {
sbAry[i-1]=null;
}
else {
sbAry(i-l]=new StringBuffer (rsStr);

</TR>
<TR valign="bottom">
<TD bgcolor="<%= MIDLCELL %>" align="right">
<%= (canEditFlag &&
loopCellFlag) ?linkString.toString():"" &>
<%= rowNumt+ %S><%= (canEditFlag &&
loopCellFlag)?"</A>"i"" %&>
</TD>,

oe
v

A
ae

oe
v

<%

US 7,885,981 B2
93 94

Wr (int i=0;i<sbary. lenge ay. _
if (ddtd.getKeyField() != null «&&
ddtd.getKeyField() .equals (rsmd.getColumnName (i+1))) {
continue;

}

if
(rsmd.getColumnName (i+1) .endsWith ("OVERALL_STATUS") )
{
String colorStr;
if (sbAry({i]==null) {
colorStr=LITECELL;
}
else {
int openParen=sbAry[i] .toString() .andexof ("(");
int closeParen=
sbAry[ij].toString() .indexOf(")");
if (openParen >= 0 && closeParen >= 0) {
colorStr =
sbAry [i] .substring(openParenti1,closeParen) .t
rim();
)
else {
colorStr = LITECELL;

<TD bgcolor="<%= colorStr %>">

}
else {

<TD bgcolor="<%= LITECBLL %>">

<font size="2">

CustomDrillDown cdd=ddtd.getCustomDrillDown (i);
if (sbAry[i] == null) {
//if
(rsmd.getColumnName (i+1).endsWith ("OVERALL_STATUS"
> 0)
if (edd != null) {
String targetTable =
cdd.getTablieName (sbAry[1].toString() .toUpperCas
e()):
if {(targetTable.equals("DRILL_TARGET_1") «&
cdd.getMode() .equais("edit")) [
loopCellFlag = EditTarget1Flag;
}
else if (targetTable.equals ("DRILL_TARGET 2")
&& cdd.getMode().equals("edit"}) [
loopCellFlaq = EditTarget2Flag;
: )
else if (targetTable.equals ("EDIT_TARGET_1") &&

A
ae

oe
Vv

A
ex

“A
ae

<%

95

US 7,885,981 B2
96

‘edd. getMode () .eqfaus (Wrok smn ;

loopCellFiag = BrowseTargetl1Flag;
}
else if (targetTable.equals("EDIT_TARGET_2") &&
cdd.getMode() .equais("browse")) {
loopCelliFlag = BrowseTarget2Flag;
}

if (canEditPlag && loopCellFlag) {

<A HREF="AddEditForm.jsp?tableName=<%= —
cdd.getTableName (sbAry[1].toString() .toUpper
Case()) %>&mode=<%= cdd.getMode() %>
&doProcess=updateékeyValue=<%=

sbAry [cdd.getKeyColumn()).toStxring() %>
&parentKey=<%=
sbAry({cdd.getParentColumn()].toString() %>
&stackLevel=%2B&focusField=<%=
ddtd.getDatabase() %>__ <%=

cdd.getTableName (sbAry[1].toString() .toUpper
Case()) %>__ <%= cdd.getFocusField() %>sunq=
<%= ungStr %>">NONE</A>

}

else {

&nbsp;

else {

}
}

&nbsp;

else if ((sbAry[i]-length() > 255) && (cdd == ‘null))

{

}
else {
aif

<textarea><%$= sbAry[i}.toString() %>
</textarea>

(cdd '= null) {
String targetTable =
cdd.getTableName (sbAry[1].toString() .toUpperCas
eQ)); .
if (targetTable.equals("DRILL_TARGET_1") &&
cdd.getMode().equals("edit")) {

loopCellFlag = EditTargetlFlag;
}
else if (targetTable.equals ("DRILL_TARGET_2")
&& cdd.getMode() .equals("edit")) {

loopCellFlag = EditTarget2Flag;
}
else if (targetTable.equals ("EDIT_TARGET_1i") &&
cdd.getMode () .equals("browse")) {

<%

97

}
</TR>

}

US 7,885,981 B2
98

loopCellFlag 4eroWsera eam glad:
}
else if (targetTable.equals("EDIT_TARGET_2") &G&
cdd.getMode().equais ("browse")) {
loopCellFlag = BrowseTarget2Flag;
}

if (canEditFlag && loopCellFlag) {

<A HREF="AddEditForm.4jsp?tableName=<%=
cdd.getTableName (sbAry([(1}-toString({().toUpper
Case()) %>amode=<%= cdd.getMode() %>
&doProcess=updateékeyValue=<%=
sbAry[cdd.getKeyColumn()].toString() %>
&parentKe y=<%=
sbAry[cdd.getParentColumn()].toString() %>
&stackLevel=%2BéfocusFicld=<%=
ddtd.getDatabase() %>_ <%=

cdd.getTableName (sbAry[1].toString().toUpper
Case()) %>__<%= cdd.getFocusField(}) %>&ungq=
<$= ungStr %>">

<3=
sbAry[i}].toString ()
&>

if ((cdd != null) && canEditFlag && loopCellFlag)
{

</B>

</font>
</TD>

String paramList=paramStrBuf.toString ()?
java.util.Date endView = null;
java.text.DateFormat df = null;
if (Debug.areDebugging) {

endView = new java.util.Date ();

af = java.text.DateFormat.getInstance();

}

if (rowCount > 0)

</TABLE>

{

Ci
Vv

US 7,885,981 B2
99 100

if (topRow > 1 |] topRow < (rowCount - pagcSize) + 1) {

<HR>
<DIV ALIGN=RIGHT>

if {topRow > 1) {

<INPUT TYPE="SUBMIT" NAME="Scroll" VALUE="Top of List">

if (topRow > pageSize + 1) {

<INPUT TYPE="SUBMIT" NAME="Scroll" VALUE="Previous <%=
pageSize %> Rows">

if (topRow < (rowCount - (2*pageSize)) + 1) f{

<INPUT TYPE="SUBMIT" NAMB="Scroll" VALUBE="Next <%= pageSize %>
Rows">

if (topRow < (rowCount - pageSize) + 1) {

<INPUT TYPE="SUBMIT" NAME="Scroli" VALUE="Bottom of List">

iff (topRow > 1 1] topRow < (rowCount - pageSize) + 1) [

</DIV>

se.setRowPointer (topRow);
// session.setAttribute ("pageSize",new Integer (pageSize) );

<hr>

<!--/FORM-->

<3

{*

[b] ($= TableDescriptorDisplay.getDisplayLabel (origTableName) &)[/b]
options:

[FONT size="2"] [strong] [A HREF="Browse.jsp?tableName= [t= origTableName
%] &mode=browseédoProcess=fullList"])FULL LIST(/A] [/strong](/font],
{font size="2"] [strong] [A HREF="AddEditForm.jsp?tableName=[%=
origTableName %) émode=search&doProcess=new"] NEW SEARCH[/a] [/strong]
[/font], .

(font size="2"]} [strang] [A HREF="AddEditForm. jsp?tableName=[%=
origTableName %] amode=search&doProcess=revised" ] REVISED SEARCH [{/a]

oo
Vv

US 7,885,981 B2
101 102

[/strong] [/fonW, hme we oc ee mee ow

{font size="2"] [strong] [A HREF="AddEditForm-jsp?tableNamé=[%=
origTableName %] smode=addédoProcess=insert"JADD[/a] [/strong] [/font]
xf

<SCRIPT>

function edit(keyValue) {
document.editForm.keyValue.value=keyValue;
document .editForm.action="<%= URIPath %>/AddEditForm.jsp"
document.editPorm.submit ();

}

</SCRIPT>

<!--FORM name=“editForm" action="<%= URIPath %>
/AdakditForm.jsp" METHOD="POST"..> —

<!--PORM name=“editForm" action="/snoop" METHOD="POST"-->
<input type="hidden" name="tableName" value="<%= origTableName
B>">

<input type="hidden" name="mode" value="“edit">

<input type="hidden" name="doProcess" value="update">

<input type="hidden" name="keyValue" value="">

<input type="hidden" name="topRow" value="<%= topRow %>">
<input type="hidden" name="pageSize" value="<%= pageSize %>">
<input type="hidden” name="unq" value="<%= ungStr %S>">

<!-- $=
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForFo
rm) % -->
</FORM>
<!-- hr -->
<%
if (Debug.areDebugging) {
>
<i--
Began DD getinstance: <%= df.format(beginDD) %><br>
Ended DD getInstance: <%= df.format(endDD) %><p>
Began View: <%= df.format(beginView) %><br>
Ended View: <%= df.format(endView) %><p>
Total load time (ms): <%= endView.getTime() -
beginDD.getTime() %>
-->
<3
}
4>
<!--/view:setVars-—->
<SCRIPT>
setTableCoords ();
sctupNavielp ()?
<%= tableHelp.toString() %>
</SCRIPT>
</BODY>
</HTML>
<%

catch (SQLException sqle) {

US 7,885,981 B2
103 104

sqle.printsWtkTrace();
throw sqle;
}

finally {
try {
4f (vs != null)rs.close();
if (stmt != null)stmt.close();
if (con != null)con.close();
}

catch (SQLException sqle) {
sqle.printStackTrace();

}

b>

<%@ include file="common/GlobalFooter.jsp" %>
Schemalive/DataDictionary.Jsp

<3!
// $Revision: 2.3 §
// $Date: 2001/10/30 01:35:53 §$

&>
<%@ page import="dbUtils.*" %>

<HTML>
<HEAD>
<TITLE>DataDictionary</TITLE>
<SCRIPT>
function scrollit() {
parent.scrollTo(1,10000000);

‘3
</SCRIPT>
</HEAD>
<BODY bgcolor="#FFFFFE">
<%
String buildDDMode = request.getParameter (“buildDDMode");
if > (buildDDMode = null) {
&>
<FORM action="DataDictionary.jsp">
Build DataDictionary<br>
<input type="radio" name="buildDDMode" value="DDOn1ly">
- Only<br>
<input type="radio" name="buildDDMode" value="DDViewCheck">
and Views (with check) <br>
<input type="radio" name="buildDDMode" value="DDViewNoCheck">
and Views (without check) <br>
<input type="submit" value="Build">
</FORM>
<%
}
else {
3>

<INPUT type="button" value="Scroli"
onClick="setTimeout ('scrollIt()',1000)"><p>

//SspWriter out = pageContext.getoOut ();
af (buildDDMode.equals("DDOnly")) {

US 7,885,981 B2
105 106

DataDictionary.refreshInstance ("cnslt_crm", "nomatter", true, false, out
VG
}
else if (buildDDMode.equals("DDViewCheck")) {
DataDictionary.refreshInstance ("cnsit_crm","nomatter",
false, true, out)?
}
else if (buildDDMode.equalis ("DDViewNoCheck")) {
DataDictionary.refreshInstance ("cnslt_crm", “nomatter",
false, false, out);

}
>

</BODY>
</HTML>

Schemalive/DoAddEdit.jsp

<%!
// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 $

<%@ page import="dbUtils.*" %>
<%@ page import="HTMLUtils.*" %>
_<3@ page import="sessionUtils.*"
<8@ page import="java.sql.*" %>
<$@ page import="java.util.*" %>
<%@ page import="“common.*" %>

ae
v

<%@ page autoFlush="false" buffer="50k" errorPage="/Error500.jsp" %&>
<%! public static final String version _DoAddEdit_jsp = "$Revision: 2.3 5"; %>

<%@ include file="common/EntryPoints.jsp" %>
<%@ include file="common/GlobalHeaderVARS.jsp" %>
<$@ include file="common/EmptyParamCheck.jsp" %>

String unqgStr=

TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaScript)
Af (request.getParameter("ung") != null &&

request .getParameter ("ung") .equals ( (String)

session.getAttribute ("ung") ))

{
if (Debug.areDebugging) {
Debug.doLog{("DoAddEdit unq matched!",Debug.INFO);
}
session.setAttribute ("ung",ungStr);
}
else if (request.getParameter("ung") != null &&
session.getAttribute ("ung") == null)
{

if (Debug.areDebugging) {
Debug.doLog("DoAddEdit unq did not match", Debug .INFO);

}

US 7,885,981 B2
107 108

} -
response.sendRedirect ("/Schemalive/Expirédséssion.jsp")7
return;

else {

}

response.sendRedirect ("/Schemalive/OutofSequence.jsp");
return;

Connection con=null;
Statement stmt=null;
ResultSet rs=null;
try {

con=SQLUtil.makeConnection ()?
String doProcess = request.getParameter ("doProcess") ;
Enumeration parameterNames = request.getParameterNames ();

DataDictionary dd = DataDictionary.getinstance (dbName, dbConnName) ;
LinkedList l=(LinkedList) session. getAttribute ("sessionStack");
Hashtable tableVals=((StackElement)1.get(1l.size()-1)).getFormValnues();
Hashtable filterVals=((StackElement)
1.get(l.size()-1)).getSearchParams ();

String tableName = null;

4£ (doProcess.equals("drillDetail") [1
doProcess.equals("drillPickList")) {

// put all parameter values into session

// get first legit parameter name to get at key
while (parameterNames.hasMoreEFlements()) {

String param= (String) parameterNames.nextElement ();

// int dbSepl=param.indexO£("_ =");

// if (dbSepl < 0) {

if (param.indexOf("__") < 0) {

continue;

}

‘fy

// int dbSep2=param.indexOf ("__",dbSepi+l);

tableVals.put (param, request.getParameter (param) );
)

String mode="edit";

String newProcess="update";

if (request.getParameter ("keyValue") == null 11
request.getParameter ("keyValue") .equals(""))

mode="adda";

//insert return field as if it had been selected. Actual key will
be

//put in below.
tablevals.put (request.getParameter ("returnDropDown") ,"0");
newProcess="insert";

}

String forwardPage=(doProcess .equals ("drillDetail") )?
"Browse.jsp":"AddEditForm. jsp";

US 7,885,981 B2
109 110

pageContext WM rward ("/"+forwardPage+" tebipnare ay
request .getParameter ("tableName") +"&keyValue="+
request.getParameter ("keyValue") +"&émode="+modet" &doProcess="+
newProcess+"é&stackLevel=%2BE"+
"ung="tungStr

}
else {
Hashtable paramHash=new Hashtable ();

boolean setTableName=false;
while (parameterNames.hasMoreElements()) {
String param= (String) parameterNames .nextElement ();7

if (param.indexOf("__=") < 0) {
continue;

if (tsetTableName) {
setTableName=true;
int dbSepl=param.indexOf("_ oo");
int dbSep2=param.indexof("__ ",dbSep1+1);
tableName=param.substring (dbSep1+2,dbSep2);
}

/*

if (doProcess.equals("filter")) {
filterVals.put (param, request.getParameter (param) );
} .
String value=null;

*/

String value=request.getParameter (param) ;
String({] values=null;
if (doProcess.equais({"filter")) {
filterVals.put (param, value) ;
if (param.endsWith("_FLAG")) {
value=null;
values=(String[]) request.getParameterValues (param) ;
if (values.length==1) {
filterVals.put (param, values [0]);
}
else {
filterVals.put (param,"");

/*

if (param.endsWith(" FLAG") && doProcess.equals("filter")) {
values=(String[]) request.getParameterValues (param);

}

else {

value=request.getParameter (param) ;

}

*/

if (values != null ||] !value.equals("")) {

}

US 7,885,981 B2

111 112
int dM pi=param. indexof("__");
int dbSep2=param.indexO£("_ ",dbSepi+1);

if (param.endsWith("_DATE")) {
paramHash.put (param.substring (dbSep2+2),
"to date ('"+value+"', 'MM/DD/RRRR')");
}
else {
if (values != null) {
paramHash.put (param. substring (dbSep2+2),values);
}
else {
paramHash.put (param.substring (dbSep2+2),value) ;

String qStr=nulil;

Enumeration paramHashKeys=paramHash.keys ()7
String primaryKeyName=null;

String primaryKeyVal=null;

//
if

session. setAttribute ("powerAdd", "No");
(doProcess.equalis("insert")) {

// session.setAttribute ("powerAdd",
(request.getParameter("powerAdd") != nu1ll1)?((String)
request.getParameter ("powerAdd"))=:"No");

StringBuffer qStrStart=new StringBuffer ();
StringBuffer qStrEnd=new StringBuffer ();

while (paramHashKeys.hasMoreElements()) {
String paramKey = (String) paramHashKeys.nextElement ();
String paramVal = (String) paramHash.get (paramKey) 7
if (!paramVal.startsWith("to_date")) {

paramVal="'"4+SQLUtil.processSingleQuote (paramVal)+"'";

}
qStrStart.append (paramKey+",");
qStrEnd.append(paramValt+",");

}

Integer usersKey=(Integer)session.getAttribute ("usersKey");

// check for ENTERED_BY USERS_KEY, ENTRY_DATE,

// MODIFIED BY USERS KEY, and LAST MODIFIED DATE

DataDictionaryTD ddtd = dd.getDataDictionaryTD (tableName) ;

if (ddtd.findColumnName ("ENTERED BY USERS KBY") != 0) {
qStrStart .append("ENTERED_BY_USERS_KEY,");
qStrEnd.append(usersKey+",");

}

if (ddtd. findColumnName ("MODIFIED _BY_USERS_KEY") '= 0) {
qStrStart append ("MODIFIED BY_USERS_KEY,");
qStrEnd.append(usersKeyt",") 7

)

// get rid of trailing comma
qStrStart.deleteCharAt (qStrStart.length()-1);
qStrEnd. deleteCharAt (qStrEnd.length()-1);

US 7,885,981 B2
113 114

qstxr="INMBRr into "+tableNamet" ("+qKerStbre ques" |
("+qStrEnd+") ";

}

else if (doProcess-.equals("filter")) {
session.setAttribute ("expressEdit",
(request.getParameter("“expressEdit") != null)?( (String)
request.getParameter ("expressEdit")):"No")};

StringBuffer gStxrBuff=new StringBuffer ();
while (paramHashKeys.hasMoreElements()) {
String paramKey = (String) paramHashkKeys.nextElement ();
String paramVal = null;
String[] paramVals = null;
String likePart = " LIKE ";
if (paramKey.endswWith("_FLAG")) f{
paramVals=(String(])paramHash.get (paramKey) ;
}
else {
paramVal=((String)paramHash.get (paramKey)).trim();
if (paramVal.startsWith("<=") || paramVal.startsWith ("<>")
|] paramVal.startsWith(">=")) {
likePart = "."+paramVal.substring(0,2)+"
paramVal = paramVal.substring(2).txim();
if (Debug.areDebugging) {
Debug. doLog ("********** FOUND TWO-CHARACTER (NON-
DATE) RELATIONAL OPERATOR! ", Debug. INFO) ;
Debug.doLog ("********** likePart:
"+likePart, Debug.INFO) ;
Debug.dobog("********** paramVal:
"+paramVal, Debug .INFO) ;

Me
’

} .
else if (paramVal.startsWith("<") |]
paramVal.startsWith("=") [| paramVal.startsWith(">")) {

likePart = " “+paramVal.charAt(0)+" ";

PparamVal = paramVal.substring(1).trim();

if (Debug.areDebugging) {
Debug.doLog ("******x***** FOUND ONE-CHARACTER (NON-
DATE) RELATIONAL OPERATOR!I", Debug. INFO) ;
Debug.doLog ("********** LikePart:
"tlikePart, Debug.INFO) ;
Debug.doLog ("********** paramVal:

"+paramVal, Debug. INFO);

//DataDictionaryTD ddtd =
dd.getDataDictionaryTD(tableNamet+" VIEW");

DataDictionaryTD ddtd =

dd.getDataDictionaryTD (ViewGenerator.getViewName (tableName) );
String outputKey = new String (paramKey) ;

if (ddtd != null) {

outputKey="A."+outputKey;

} .

// String likePart=" LIKE ";
boolean skipIt=false;

US 7,885,981 B2
115 116

if (pM mney. endsWith ("_ FLAG") ) fy
//special case; may have more tHan one
Lf (paramVals.length != 2) {
//qStrBuff.append (paramKey+" "“+paramVals[1]+" 0 AND ");
paramval="0";
likePart=" "+paramVals[OJ+" ";
y}.
else { .
skipIt=true;
}
)
else if (paramKey.endsWith("_KEY")) {
af (likePart.equals(" LIKE ")) {
likePart="_= ";
}
paramVal=SQOLUtil .processSingleQuote (paramVal);
}
else if (!paramVal.startsWith("to_date")) {
if (likePart.equals(" LIKE ")) {
paramVal="UPPER ('"+SQLUtil . processSingleQuote (paramval)
HUST);
}
else {
ParamVal="UPPER ('"+SQLULil1 -processSingleQuote (paramVal)
MY yG
}
outputKey="UPPER("+outputKey+") ";
}
else {
String dateStart = paramVal.substring(9).trim();
if (dateStart.startsWith("<=") |]

dateStart.startsWith("<>") || dateStart.startsWith(">=")) {
likePart = " “+dateStart.substring(0,2)+" "|
paramVal = "to_date('"+ dateStart.substring(2).trim();

}
else if (dateStart.startsWith("<") |]

dateStart.startswith(">") |] dateStart.startswith("=")) {
likePart = " “4+dateStart.charAt(0O)+" ";
paramVal = "to_date('" + dateStart.substring (1) .trim();

}

if (!skipIt) {
qStrBuff.append (outputKey+likePart+paramVal+" AND ");

if (qStrBuff.length() > 4) {
qgStrBuff.delete (qStrBuff.length()—-4,qStrBuff.length()-1);
}

StackElement se= (StackElement)1.get(l.size()-1);
se.setSearchString (qStrBuff£.toString());

}

else if (doProcess.equals("update")) ( // edit
DataDictionaryTD ddtd = dd.getDataDictionaryTD (tableName) ;
StringBuffer qStrBuff=new StringBuffer ({);
ResultSetMetaData rsmd=ddtd.getMetaData();
for (int i=1;i<=rsmd.getColumnCount();itt+) {

if

US 7,885,981 B2
117 118

Strin@™aramKey = rsmd.getColumnNalie (i)?
String paramVal = (String) paramHash.get (paramKey) ;

if (paramKey.equals ("ENTERED BY _USERS_KEY") [||
paramKey.equals ("ENTRY _DATE") |{
paramKey.equais ("MODIFIED BY USERS KEY") bd
paramKey.equals {"LAST MODIFIED DATE") }

continue;

if (paramVal == null) { .
if (paramKey.endsWith("_FLAG")) {
paramVal="0";
}
else {
paramVal="";

}

if (ddtd.getKeyField().equals(paramKey)) {
primaryKeyName=paramKey;
primaryKeyVal=paramVal;

continue;

}

if (!paramVal.startsWith("to_date")) {
paramVal="'"+4+SOLUtil.processSingleQuote(paramVal)+"'";

} .
qStrBuff .append (paramKeyt+"="+paramVal+",")};
} :

// Check for MODIFIED _BY_USERS_KEY, and LAST_MODIFIED_ DATE
Integer usersKey=(Integer) session.getAttribute ("usersKey");

if (ddtd.findColumnName ("MODIFIED BY_USERS_KEY") != 0) {
qStrBuff.append("MODIFIED BY USERS KEY="+usersKeyt+",");
}

if (ddtd.findColumnName ("LAST MODIFIED DATE") != 0) {
qStrBuff.append ("LAST_MODIFIED_DATE=SYSDATE,");
}

qStrBuff.deleteCharAt (qStrBuff.length()-1);
qStr="UPDATE "+tableName+" SET “+qStrBuff+" WHERE "+
primaryKeyNamet+"="+primaryKeyVal;

('doProcess.equals("filter")) {
//DBConnectionManager connMgr =
DBConnectionManager.getInstance();

//Connection con=connMgr.getConnection (dbConnName) ;

//Connection con= (Connection)
pageContext .getAttribute ("globalCon") ;
stmt = con.createStatement (};
stmt.executeUpdate (qStr);
//stmt.close ();..

US 7,885,981 B2
119 120

StackEleM@Mt se= (StackElement) 1. getPagt'y pe
se.setSearchString(null);
se.setSearchParams (new Hashtable ());

}

// hit the last item in the Save list or go back to view
// LinkedbList 1=(LinkedList) session.getAttribute ("LinkedList”") ;

// String returnTable= (String) session.getAttribute("returnTable");
/* ,

if (doProcess.equals("filter")) { // Vioise null || L.size() ==
QO |] returnTable != null) {
Af (returnTable '!= null) {

pageContext. forward ("/Browse. jsp?tableName="+returnTable+"£"+

TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForUR

L));
}
else {
pageContext. forward ("/Browse. jsp?tableName="4+tableNamet"&"+
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForUR
L));
}
}
else {

*/

// build return

StackElement se=(StackElement)1.getLast();
String mode=null;

String stackLevel=null;

String masterColumn=se.getMasterColumn();
tableName=se.getTableName () ;

// if ((doProcess.equals("insert")) &&
((session.getAttribute ("powerAdd") != null) «&é (( (String)
session.getAttribute ("powerAdd")) .equals("Yes")))) {

Debug .doLog ("powerAdd: “+request.getParameter ("powerAdd"),
Debug. INFO);
if ((doProcess.equals("insert")) &&

((request.getParameter ("powerAdd") != null) «&& (( (String)
request.getParameter ("powerAdd")) .equals("Yes")))) {
mode = “add"; // se.getMode();
stackLevel = "@";

se.setFormValves (new Hashtable());

response. sendRedirect ("/Schemalive/AddEditForm. jsp?tableName="+se
-getTableName ()+

"“&keyValue="+se.getCurrentKey ()+

"&mode="+moder+

"&powerAdd=Yes"+

"&stackLevel=@éung="+unqStr
oi

return;

}

else if ((l.size() < 2) || (doProcess.equals("filter"))) {
mode = "browse";

stackLevel = "@";

US 7,885,981 B2
121 122

else {
se= (StackElement)1.get(l.size()-2);
mode = se.getMode();
stackLevel = "-";
if ((!mode.ecuals("browse"})) && (masterColumn == null)) {

DataDictionaryTD ddtd = dd.getDataDictionaryTD (tableName) ;

// Insert proper value into saved return field entry
String keyFieldName = ddtd.getKeyField();

Hashtable formValues = (Hashtable) ((StackElement)
l.get (1l.size()-2)).getFormValues ();
Enumeration formValEnum = formValues~.keys();

while (formValEnum.hasMoreElements()) {
String keyVal = (String) formValEnum.nextElement ();
if (( (String) formValues.get (keyVal))-.equals("0")) {
formValues.put (keyVal, paramHash.get (keyFieldName) );
break;

}
}
String forwardPage=
(mode.equals ("browse") ) ?"Browse.jsp":"AddEditForm.jsp";
pageContext. forward ("/"+forwardPage+"?tableName="4+se.getTableName ()+
"skeyValue="+se.getCurrentKey () +
"&mode="+modert
“&stackLevel="+stackLevel+t" éung="+ungStr) ;

%>
<%
}
catch (SQLException sqle) {
sqle.printStackTrace ();
throw sqle;
}
Finally {
try {
Af (rs != null)rs.close();
if (stmt != nvll)stmt.close();
if (con != nuli)con.close();
j
catch (SQLException sgie) {
. sqle.printStackTrace();
}
}
&>

<S@ include file="common/GlobalFooter.jsp" %>

Schemalive/DoViewGenerator.jsp

// $Revision: 2.3 §$
// $Date: 2001/10/30 01:35:53 $

<

oe

oo

>

<%! public static final String version_ViewGenerator_ jsp="$Revision: 2.3 $";

US 7,885,981 B2
123 124

<%3@ page import="dbUtils.*" %>

<%@ page import="HTMLUtils.*" %>
<%@ page import="sessionUtils.*" %>
<%@ page import="java.sql.*" %>

<%@ page import="Java.util.*" %>

DataDictionary dd=DataDictionary.getInstance ("ecnslt_crm", "anymore") ;
>
<HTML>

<BODY bgcolor="#fffLFLE">

<%
if (request.getParameter("tableName") != null) {
DataDictionaryTD ddtd=
dd.getDataDictionaryTD (request.getParameter ("tableName"));
if (ddtd != null) {
new ViewGenerator (ddtd);
>
<h3>Built View for: <%= ddtd.getTable() %></h3>
<%
}
else {
S>
<h3><%= requesl.getParameter("tableName") %>
is a bad table name!</h3>
<%
}
}
else {
Set ddtdSet = dd.tables();
Object{] ddtdAry = ddtdSet.toArray();
Arrays.sort (ddtdary);
for (int i=O;i<ddtdAry.length;it++) {
DataDictionaryTD ddtd=dd.getDataDictionaryTD( (String) ddtdAry[il);
if (ddtd.getTDType() == TableDescriptor.VIEW) {
continue;
}
ViewGenerator vg = new ViewGenerator (ddtd);
&> ,
<n4>Built View for: <%= ddtd.getTable() %></h4>
<%
}
)
%>
</BODY>
</HTML>

Schemalive/Error500.jsp

<%1
// $Revision: 2.41 §
// $Date: 2001/10/30 08:26:33 $

>

ao

oe

<38 page isErrorPage="true" >
<%@ page import="dbUtils.*" %>

US 7,885,981 B2
125 126

<$@ page import="HTMMBMils.*" %>
<%@ page import="sessionUtils.*" %>
<%$@ page import="Java.sql.*" %>

<%@ page import=“java.util.*" %>
<%$@ page importe#"java.io.*" %>

_<%@ page import="common.*" %>

<%! public static final String version_Error50C0_jJsp = "SRevision: 2.4 $"; %>

<%@ include file="common/EntryPoints.jsp" %>

response. setHeader("pragma", "no-cache") ;
response.setHeader("Expires",
new java.util.Date (new java.util. Date() .getTime()-100) -toString());
String ungStr=
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaScript);
session.setAttribute ("unq",unqgStr);
Connection con=null;
Statement stmt=nulli;
ResultSet rs=null;
try {
con=SQLUtil.makeConnection ();

oe

>

<%@ include file="common/GlobalHeaderVARS.jsp" %>
<HTML>
<HEAD>
<TITLE>Schemalive</TITLE>
<%@ include file="common/GlobalHeaderJavascript.jsp" %>
</HEAD>

int sequence=ManageSession.updatcSequence (session);

<BODY bgcolor="#FFFFFE" onLoad="history.forward(1);">

<%@ include file="common/GlobalHeaderHTML.jsp" %>
<$@ taglib uri="/WEB-INF/taglib/view.tld" prefix="view" %>
<%$@ taglib uri="/WEB-INF/taglib/stack.tld" prefix="sessionUtils" %>

<view:setVars defaultEntryPoint="<%= entryPoints[0] %>" dbName="<%=

dbName %>" dbConn="<%= dbConnName %>">

<!-- sessionUtils:stack tableName="<%= origTableName %>" mode="browse"

‘ stackLevel="<%= stackLevel %>" database="<%= dbName %>" dbConn="<%=

dbConnName %>" -->

<%

f/ StackInfo: %= stackInfo %

o>

<!-- /sessionUtils:stack ~-->

<br>

<S=
TableDescriptorDisplay.displayStack ((LinkedList)
session.getAttribute ("sessionStack") ,ungStr)

S>

<hr>

X<%

rd
Vv

US 7,885,981 B2
127 128

<TABLE width=" MMs" cellpadding="0" cellsPaki nis’ qed
<tr valign="bottom" align="right">
<TD valign="bottom"><font face="ARIAL, HELVETICA" size="4">THERE
HAS BEEN AN <b>
INTERNAL SERVER ERROR</b>

<!--img src="images/logo-width.gif"-->
</font></TD>
</TR>
</TABLE>
<hr>
<br><br>

<font face="ARIAL, HELVETICA" size="4"> <center>

&nbsp; &énbsp; &nbsp; &énbsp; &nbsp; &nbsp; nbsp; enbsp; &nbsp?; enbsp; anbsp; énbsp
; &nbsp; &énbsp;

PLEASE CALL THE <b>HELP DESK</b> WITH THE FOLLOWING INFORMATION: <p>

&nbsp; &nbsp; &nbsp; &nbsp; énbsp; énbsp; enbsp; &nbsp; snbsp; anbsp; &nbsp; énbsp
7&nbsp; &énbsp;
<b><S= new java.util.Date ().toString() %></b><br>

&nbsp; &nbsp; anbsp; énbsp; énbsp; énbsp; énbsp; &énbsp; &énbsp; &énbsp; &nbsp; &nbsp
7 &énbsp; &nbsp;
<b><%= exception %></b><br>

<pre>

if (0 > exception.toString() .indexOf("NOT AUTHORIZED")) {
ByteArrayOutputStream ostr = new ByteArrayOutputStream{);
exception.printStackTrace (new PrintStream(ostr));
out.print (ostr);

}

</pre>

</center>
</view:setVars>
<SCRIPT>
setupNavHelp ();
</SCRIPT>

</BODY>

</HIML>

<%

}
catch (SQLException sqle) {
sqle.printStackTrace();

}
finally {
try {
if (rs != null)rs.close();
if (stmt != nuli)stmt.close();
if (econ t= null)con.close();

}
catch (SQLException sqle) {
sqle.printStackTrace();

US 7,885,981 B2
129 130

}
}
System.ge();
&>
<%@ include file="common/GlobalFooter.jsp" %>

Schemalive/ExpiredSession. jsp

<META HTTP-EQUIV="Refresh" CONTENT="30; URL=/Schemalive/AddEditForm.jsp">

<%
// $Revision: 2.4 §
// SDate: 2001/10/30 08:26:33 §
B>
<%! public static final String version_ExpiredSession_ jsp = "$Revision: 2.4
S$"; &>

<%$@ page import="dbUtils.*" %>

<$@ page import="HIMLUtils.*" %>
<%3@ page import="sessionUtils.*" %>
<%@ page import="java.sql.*" %>

<$@ page import="jJava.util.*™" %>

<3@ page import="common.*" %3>

String ungStr=
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaScript);
session.setAttribute ("ung",ungStxr);
Connection con=null;
Statement stmt =null;
ResultSet xrs=null;
try {
con=SQLUtil .makeConnection ();

cp

>
<% response.setHeader ("pragma", "*no-cache"); %>
<% response.setHeader("Expires",new java.util.Date (new

java.util.Date ().getTime(}-100) -toString()); %>

<S@ include file="common/GlobalHeaderVARS.jsp" %>

<HTML>
<HEAD>
<TITLE>Schemalive</TITLE>
<%@ include file="common/GlobalHeaderJavascript.jsp" %>
</HEAD>
<!-- S@ include file="common/GlobalHeaderVARS.jsp" % -->
<%@ include file="common/EntryPoints.jsp" %>
<%
int sequence=ManageSession.updateSequence (session);
&>

<BODY bgcolor="#FFFFFF" onLoad="history. forward (1)">

US 7,885,981 B2
131 132

<$@ include file=™#mmon/GlobalHeaderHTML. js" [35]

<$@ taglib uri="/WEB-INF/taglib/view.tld" prefix="view" %>
<3@ taglib uri="/WEB-INF/taglib/stack.tld" prefix="sessionUtils" %>

<view:setVars defaultEntryPoint="<%= entryPoints[0] %>" dbName="<%=
dbName %>" dbConn="<%= dbConnName %>">

<!-- sessionUtils:stack tableName="<%= origTableName %>" mode="browse"
StackLevel="<%= stackLevel &>" database="<%= dbName %>" dbConn="<%=
dabConnName %>" -->

<%
// StackInfo: %= stackInfo % //*****MPK (temporary delta)
%>
<!-—-— /sessionUtils:stack -->
<br>
<S=
TableDescriptorDisplay.displayStack((LinkedList) .
session.getaAttribute ("Sse ssionStack"),unqStr)
a>
<hr>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<tr valign="bottom" align="right">
<TD valign="bottom"><font face="ARIAL, HELVETICA" size="4">YOUR
SESSION HAS <b>
EXPIRED</b>
<!--img src="images/logo-width.gif£"-->
</font></TD>
</TR>
</TABLE>
<hr>

<br><br>

<font face="ARIAL, HELVETICA" size="4">
<center>
THE SERVER <b>NO LONGER RETAINS</b> ANY INFORMATION<BR>
REGARDING <b>YOUR</b> (APPARENTLY IN-PROGRESS) <BR>
<b>WORKING SESSTON</hb>
<p>
If IS THEREFORE NECESSARY THAT YOU <b>RESTART</b> YOUR SESSION<BR>
BY DOING <b>ANY ONE OF THE FOLLOWING: </b>
<p>
<BR>
CHOOSE TO SEARCH OR BROWSE A TABLE FROM THE <b>HEADER SECTION</b>
(ABOVE) </b><BR>

ee <BR>
<b>WAIT</b>, AND THE SYSTEM WILL RESTART AUTOMATICALLY IN <b>30
SECONDS</b><BR>

wow eH <BR>

CLICK <a href="/Schemalive/AddEditForm.jsp">HERE</a> TO RESTART THE
SYSTEM <b>IMMEDIATELY</b><BR>
<BR><BR><BR>
<p>
IF YOU HAVE ANY QUESTIONS, PLEASE CALL THE <b>HELP DESK</b>
</center>
</view:setVars>
<SCRIPT>
setupNavHelp();

US 7,885,981 B2
133 134

</SCRIPT>
</BODY>
</HTML>
<%
}
catch (SOLException sqle) {
sqle.printStackTrace ();
}
finally {
try {
if (xs '!= null)rs.close();
Lf (stmt != null)stmt.close();
if (con != nulil)con.close({);
}
catch (SQLException sqle) {
sqlic.printStackTrace({);
}
)
System.ge ()?
S>

<%5@ anclude file="common/GlobalFooter.jsp" %>
Schemalive/OutOfSequence.jsp
<META HTTP-EQUIV="Refresh" CONTENT="30; URL=/Schemalive/AddEditForm. jsp">
<%

// $Revision: 2.4 $

// $Date: 2001/10/30 08:26:33 §
>

de

ev

public static final String version_ExpiredSession_jsp = "$Revision: 2.4
&>

tn A
woe

<%@ page import="dbUtils.*" %>

<s@ page import="HTMLUtils.*" %&>
<S@ page import="sessionUtils.*" &>
<%@ page import="java.sql.*" %>
<%@ page import="jJava.util.*" %>

<%@ page import="common.*" %>

String ungStr=
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaScript) ;
session.setAttribute ("unq", unqStr) ;
Connection con=null;
Statement stmt=null;
ResultSet rs=null;
try {
con=SOLUtil.makeConnection ();
3>

<% response. setHeader ("pragma", "no-cache"); %>
<% response.setHeader ("Expires", new java.util.Date (new
java.util.Date () .getTime ()~100) .toString()); >

US 7,885,981 B2
135 136

<%
int sequence=ManageSession.updateSequence (session);
> aera
<%@ include file="common/GlobalHeaderVARS.jsp" %>
<HTML>
<HEAD>
<TITLE>Schemalive</TITLE>
<%@ include file="common/GlobalHeaderJavascript.jsp" %>
</HEAD>
<!-- %@ include file="common/GlobalHeaderVARS.jsp" % -->

<%@ include file="common/EntryPoints.jsp" %>

<BODY bgcolor="#FFFFFF" onLoad="history. forward (1) ">

<%@ include file="common/GlobalHeaderHTML.jsp" %>
<%@ taglib uri="/WEB-INF/taglib/view.tld" prefix="view" %>
<%@ taglib uri="/WEB-INF/taglib/stack.tla" prefix="sessionUtils" %>

<view:setVars defaultEntryPoint="<&%= entryPoints[0] %>" dbName={"<8=
dbName %>" dbConn="<%= dbConnName %3>">

<!-- sessionUtils:stack tableName="<%= origTableName %>" mode="browse"
stackLevel="<%= stackLevel %>" database="<%= dbName %>" dbConn="<s=
dabConnName %>" -->
<%&
// StackInfo: %= stackInfo %
S>
<!-- /sessionUtils:stack -->
<br>
<=

TableDescriptorDisplay.displayStack ((LinkedList)
session.getAttribute ("sessionStack"),unqgStr)
S>
<hxr>
<TABLE width="100%" cellpadding="0" cellspacing="0">
<tr valign="bottom" align="right">
<TD valign="bottom"><font face="ARIAL, HELVETICA" size="4">YOU
HAVE GENERATED A <b>
SESSION~SEQUENCE ERROR</b>
<!--img src="images/logo-width.gif"~->
</font></TD>
</TR>
</TABLE>
<hr>

<br><br>

<font face="ARIAL, HELVETICA” size="4">
<center>
THE SERVER HAS DETECTED AN <b>ILLEGAL PAGE TRANSITION, </b>
WHERE IN<BR>
<b> YOUR BROWSER</b> HAS SUBMITTED A PAGE <b>OTHER THAN</b> THE LAST
PAGE<BR>

</HTML>

<

S>

%

US 7,885,981 B2
137 138

THAT <b>THEWERVER</b> HAD PREVIOUSLY DELTVERED Ic aNROP ,

<p>

THIS CAN RESULT FROM DOING A <b>'REFRESH'</b> (OR

<b> 'RELOAD'</b>) , <BR>

FROM TRYING TO USE A <b>'FAVORITE'</b> (OR <b>*BOOKMARK'</b>),<BR>
FROM USING THE <b>'BACK' BUTTON</b> ON YOUR BROWSER, OR BY<BR>~
<b>DOUBLE-CLICKING</b> OR <b>EXECUTING MULTIPLE CLICKS</b> WHILE
SUBMITTING A PAGE

<p>

IT IS THEREFORE NECESSARY THAT YOU <b>RESTART</b> YOUR SESSTON<BR>
BY DOING <b>ANY ONE OF THE FOLLOWING: </b>

<p>

<BR> .
CHOOSE TO SEARCH OR BROWSE A TABLE FROM THE <b>HEADER SECTION</b>
(ABOVE) </b><BR>

----- <BR>
<b>WAIT</b>, AND THE SYSTEM WILL RESTART AUTOMATICALLY IN <b>30
SECONDS</b><BR>

----+- <BR>

CLICK <a href="/Schemalive/AddEditForm. jsp">HERE</a> TO RESTART THE
SYSTEM <b>IMMEDIATELY</b><BR>

<BR><BR><BR>

<p>

IF YOU HAVE ANY QUESTIONS, PLEASE CALL THE <b>HELP DESK</b>

</center>
</view:setVars>
<SCRIPT>

setupNavHelp();

</SCRIPT>
</BODY>

}

catch (SQLException sqle) {

}

sqle.printStackTrace();

finally {
try {
if (xs != null)rs.close();
if (stmt != null)stmt.close();
if (con != null)con.close();

}

}
catch (SQLException sqle) {
sqle.printStackTrace ();

System.ge();

<S@ include file="common/GlobalFooter.jsp" %>

Schemalive/showSession. jsp

<%

>

// $Revision: 2.4 §
// SDate: 2001/10/30 08:26:33 $

US 7,885,981 B2
139 140

<%@ page import="SessionUtils.*" %>

<%@ page import="Java.util.*" %>

<HTML>
<HEAD><TITLE>Session Values</TITLE></HEAD>
<BODY bgcolor="#fffFFF">

<%
if (request.getParameter ("suicide") '= null é¢
request.get Parameter ("suicide") equals ("yes") )
{
session.invalidate();
&>
<H1>AARRRGHHH, I'm dead!</H1>
<3
}
else {
LinkedList i=(LinkedList) session.getattribute ("sessionStack");
if (request .getParameter ("pop") '= null && 1 != null) {
1. remove (Integer. parseInt (request.getParameter ("pop") ));
}
ListIterator li=nuli;
if (1 != null) {
-Li=l.laistIterator (0);
}
%>
<TABLE border=1>
<%
int index=0;
while (li!=null && li-hasNext()) {
S>
<TR>
<TD> .
<TABLE border=1>
<3
StackElement se= (StackElement)li.next();
Hashtable formValues=se.getFormValues();
Hashtable searchParams=se.getSearchParams ();
String mode=se.getMode();
String tableName=se.getTableName();
String searchString=se.getSearchString();
String currentKey=se.getCurrentKey();
String focusField=se.getFocusField();
String masterColumn=se.getMastexrColumn ();
&>
<TR><TD>
tableName
</TD><TD>
<%= tableName %>
</TD>

<td rowspan=8 valign=center align=center>
<A HREF="/Schemalive/showSession.jsp?pop=<%= index++
%S>">pop</A>

</td></TR>

<TR><TD>
mode

</TD><TD>

US 7,885,981 B2
141 142

<%= mode %>
</TD></TR>
<TR><TD>

searchString
</TD><TD>

<S= searchString %>
</TD></TR>
<TR><TD>

currentKey
</TD><TD>

<%= currentKey %>
</TD></TR>
<TR><TD>

focusField
</TD><TD>

<%= focusField %>
</TD></TR>
<TR><TD>

masterColumn
</TD><TD>

<%= mMasterColumn %>
</TD></TR>
<TR><TD>

searchParams
</TD><TD>

<TABLE border=1>

<TR><TH>Key</TH><TH>Values</TH></TR>

if (searchParams != null) {

Enumeration searchParamKeys=

searchParams.keys();

while (searchParamKeys.hasMoreElements()) {
String searchParamKey= (String)
searchParamKeys.nextElement ();
String searchParamVal=
(String) searchParams.get (searchParamkey) ;

<TR><TD><%= searchParamKey %></TD>
<TD><%S= searchParamVal %></TD></TR>

</TABLE>
</TD></TR>
<TR><TD>
formValues
</TD><TD>
<TABLE. border=1> :
<TR><TH>Key</TH><TH>Values</TH></TR>

if (formValues != null) {
Enumeration formValueKeys=formValues.keys ();
while (formValueKeys.hasMoreElements({)) {
String formValueKey= (String)
formValueKeys.nextElement ();
String formValueVal=
(String) formValues.get (formValueKey) ;

US 7,885,981 B2
143 144

&>
<TR><TD><%= formValueKey %></TD>
<TD><%= formValueval %></TD></TR>

<%

)
)
B>
</TD></TR>
</TABLE>
</TABLE>
</TD>
</TR>
<TR><TABLE border=1>
<%
)
Enumeration sessionVars-session.getAttributeNames () ;
while (sessionVars.hasMoreElements()) {
String sessionVar= (String) sessionVars .nextElement ();
if (sessionVar.equals("sessionStack")) {
continue;
} .
Object sessionVal=session.getAttribute (sessionVar) ;
%>
<TR><TD><%= sessionVar %></TD><TD><%= sessionVal %></TD></TR>

<3

}
S>

</TABLE>

</TABLE>

<%
}

&>

- </BODY>

</HTML>

Schemalive/common/EmptyParamCheck. jsp

<

ov

t
// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 $

oe
Vv

A
ae

if (!request.getParameterNames() .hasMoreBloments ()) {
String headerUngStr=

TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaScri
pt);
session. removeAttribute ("sessionStack");
session. removeAttribute ("headerMode") ;
session.setAttribute("unq", headerUngStr) ;
response .sendRedirect ("/Schemalive/Browse. jsp?ung="+headerUngStr) ;
return;

>

<%! public static final String version_common_EmptyParamCheck_jsp =
"SRevision: 2.3 $"; %>

US 7,885,981 B2
145 146

Schemalive/common/EntryPoints .jsp

<%!
// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 §
S>
<%
String[{] entryPoints=
{
"OPPORTUNITY",
"CONTACT_EVENT",
"PEOPLE"
}:
>

Schemalive/common/GlobalFooter.jsp

<%! public static final String version_common_GlobalFooter_jsp = “SRevision:
2.3 $"; &>

Schemalive/common/GlobalHeaderHTML. jsp

<3!
// $Revision: 2.3 §
// $Date: 2001/10/30 01:35:53 $
B>
<FORM name="viewTable">
<TABLE border="0" cellpadding="0" cellspacing="0" width="100%">
<TR><TD align="right" valign="top">
Browse :
<input type="radio" name="headerMode" value="Browse.jsp"
onClick="document.viewTable.tableName.options[0].text=
‘Select table to browse';"

A
ce

if (headerMode. equals ("Browse.}sp") ) {

oo
Vv

checked

A
oP

Vo oP
Vv

Search

<input type="radio" name="headerMode" value="AddEditForm.jsp"
onClick="document .viewlable.tableName.options[0).text=
‘Select table to search';"

A
oe

if (headerMode. equals ("AddEditForm. jsp") ) {

oe
v

checked

A
oe

Vole
v

<%
// get balloon.help for quickLinks
Balloon bl = bh. getNavBalloon ("quickLink") ;

‘

US 7,885,981 B2
147 148

Balloon SWe= bh. getNavBalloon ("qui dROEDH" pF

//SELECT used to go below

%&>
<SELECT name="tableName"
onChange="showView (this-options (this.selectedIndex].value);" <%

if (b2!=null) { %> onMouseOver="SetHang('<t= b2.getID()
&S>',event, this, 'mavLink'); return true;" onMouseOut="clearHang ();
return true;". onClick="clearHang();" <% } %>>
<OPTION value="doNothing">Select table to <%=
(headerMode.equals ("Browse.jsp") ?"browse":"search") %>
<3
/*
Set tables=dd.tables();
Object {] tableSet=tables.toArray ();7
Arrays.sort (tableSet);

for {int i=0;i<tableSet.length;it++) {
if (( (String) tableSet[i]).endsWith("_VIEW")) {
continue;
}
else if (((TableDescriptor) dd.getDataDictionaryTD{ (String)
tableSet[i])).getTDType(} == TableDescriptor.VIEW) {
continue;
}
*/
for (int i=0;i<headerTableList.length;it+) {
S> ;
<OPTION value="<%= headerTableList [i] %>">
<%= TableDescriptorDisplay.getDisplayLabel (headerTableList [i],
TableDescripteorDisplay.AllUpper) %>

<3

}

>

</SELECT>

<%// link used to go here%>

<% 4f (b2 != null) [{ &> <A HREF="" STYLE="color: <%= DARKCELL %>;
text-decoration: none;“ onMouseOver="SetHang('<%= b2.getID()
%>*,event,this, 'navLink'); return true;" onMousedut="clearHang ()?

return true;" onClick="processAsterisk(); return false;" ><sup>
<font size=+1>*</font></sup></A> <% )} %>
</TD>
<3
for (int i=O;i<entryPoints.length;i++) {
if (Arrays. binarySearch (headerTableList, entryPoints[iJ) >= 0) {
S>
<TD valign="top">
<nobr>énbsp; &nbsp;<a href="javascript: showView ('<%=

entryPoints [i] %>'}" onMouseOver="showStatus ('<%=
TableDescriptorDisplay.getDisplayLabel (entryPoints [i]
,TableDescriptorDisplay.AllUpper) %>'); <% if (bl!=null) { %>
setHang('<%= bl.getID() %>',event,this, 'navLink'); <% } %> return
true;" onMouseOut="window.status=''; <%@ if (bl!=null) { %>
clearHang(); <% } %> return true;" onClick="clearHang(); return

true; "><$=
tableDescriptorDisplay. getDisplayLabel (entryPoints[i], TableDescri

ptorDisplay.AllUpper) %></a></nobr>
</TD>

US 7,885,981 B2
149 150

<%

}
B>
<TD width="100%" valign="top"><img src="images/logo.gif"
align="right"></TD>
</TR>
</TABLE>
</FORM>
<3!
public static final String version_common_GlobalHeaderHTML jsp =
"SRevision: 2.3 $";

ve

>

Schemalive/common/GlobalHeaderJavascript.jsp

<%!

// $Revision: 2.3 $

// SDate: 2001/10/30 01:35:53 §
>
<%

java.util.Date beginDD = new java.util.Date();
DataDictionary dd = DataDictionary.getInstance (dbName, dbConnName) ;
BalloonHelp bh=BalloonHelp.getInstance();

// check for REMOTE_USER match in database
Integer usersKey = (Integer) session.getAttribute ("usersKey") ;
if (usersKey == null) {
// String remoteUser=request.getRemoteUser ();
String remoteUser= (request .getRemoteUser () ==
null) ?"DEVONSHIRE\\mpk": request. getRemoteUser ();
String qStr="SELECT USERS KEY FROM USERS WHERE UPPER (LOGIN _ID)='"+
remoteUser.toUpperCase ()+"'";

if (Debug.areDebugging) {[{ .
Debug.doLog("GHH: "+qStr,Debug.INFO) ;

//Connection myCon = SQLUtil.makeConnection();
Statement myStmt=null;
ResultSet myRs=nulli;
try { ,
myStmt = con.createStatement();
myRs = myStmt.executeQuery (qStr); .
if (myRs.next()) {
usersKey=new Integer (myRs.getString(1));
session.setAttribute ("usersKey", usersKey) ;

}

catch (SQLException sqle) {
sqle.printStackTrace();

}

finally {
myRs.close();
myStmt.close();

US 7,885,981 B2
151 152

if (Debug.areDebugging) {
Debug.doLog("remoteUser= "“+tremoteUsert+", usersKey=
"+usersKey, Debug.INFO);

java.util.Date endDD = new java.util.Date();

/*
String headerSelectStr = "SELECT SECURITY TABLE.Security Table Name "+
“FROM SECURITY GROUP_TABILE, SECURITY_GROUP_USER, SECURITY TABLE, "+
"USERS WHERE SECURITY_GROUP_TABLE.Can_Browse Flag = 1 AND "+

“USERS .Users_ Key = SECURITY_GROUP_USER.Users Key AND "+

“SECURITY GROUP_USER.Security_Group_ Key = "+

"SECURITY _GROUP_TABLE.Security_Group_ Key AND "+

"SECURITY _GROUP_TABLE.Security Table Key = "+

"SECURITY TABLE.Security Table Key AND USERS .Users Key = "+usersKey;

*/

String headerSelectStr = "SELECT Security Table Name FROM SECURITY TABLE

WHERE Security Table Key IN "+
" (SELECT Security Table Key "+
‘f/f " FROM PEOPLE, STAFF, USERS, SECURITY_GROUP USER,
SECURITY GROUP_TABLE "+
" FROM PEOPLE, USERS, SECURITY GROUP_USER, SECURITY_GROUP_TABLE te

" WHERE "+ ;

" PEOPLE.Active_ Flag <> 0 AND "+

f/f " PEOPLE. People Key =

STAFF .People Key AND "+

// " STAFF .Staff_Key = USERS.Staff Key
AND "4+

" PEOPLE.People Key = USERS.People_ Key AND "+

" USERS .Users Key = SECURITY _GROUP_USER.Users_ Key AND "+
" SECURITY _GROUP_USER.Security Group Key =
SECURITY_GROUP_TABLE.Security Group Key AND "+

" Can_Browse_ Flag <> 0 AND “+

. SECURITY_GROUP_USER.Users Key = “tusersKey+") ORDER BY 1";

Statement myStmt =
con. createStatement (ResultSet.TYPE SCROLL INSENSITIVE, ResultSet .CONCUR_REA
D_ONLY);
ResultSet myRs = myStmt.executeQuery (headerSelectStr);
myRs.last();
headerTableList = new String[myRs.getRow());
myRs.beforeFirst();
int headerTableIndex=0;
while (myRs.next()) {

headerTableList [headerTableIndex++]=myRs.getString(1);
}
myRs.close();
myStmt.close();

String headerMode = request.getParameter ("headerMode") ;

if (headerMode == null It headerMode.equals("")) {
headerMode= (String) session.getAttribute ("headerMode") ;
if (headerMode == null) {

US 7,885,981 B2
153

headerMode=“fowse.jsp";

)

session.setAttribute ("headerMode", headerMode) ;

154

String checkHeader = request.getParameter ("header") ;

black; cursor: default}

Af (checkHeader != null && checkHeader.equals("true")) {
session. removeAttribute ("“sessionStack");

}

35>

<style type="text/css">
<l--
-balloon {border-width: thin; border-style: groove;
border-color: <%= LITECELL &%>; :
position: absolute; background-color: #877887;
padding: 3; layer-background-color: #877887;
font-size: x-small; line-height: 120%; text-align: left;
font-family: sans-serif; font-weight: bold;
visibility: hidden}
-isTip {text-decoration: none; color: yellow; }
-notDecorated {text-decoration: none; color:
~->

</style>

<SCRIPT Language="JavaScript">
var agt=navigator.userAgent.toLowerCase ();

var appVer = navigator.appVersion.toLowerCase();

var is_minor = parseFloat (appVer);
var is_major = parseInt (is minor);

var is_nav = ((agt.indexOf('mozilla') !=-1)
(agt .indexOf ('spoofer')==-1) &&
(agt.indexOf('compatible') == -1) &&
{agt.indexOf ('opera')==-1) &&
(agt .indexOf ('webtv')==-1));

var isNav4up = (is_nav && (is major >= 4));

var hangDocObj=null;
var hangID=null;

var hangType=null;
var hangX=nulil;

var hangY=null;

var timeID=null;

var columnWidth=50;
var columnLeft=1;
var tableTop=0;

function keyPress()

{
if (hangID != null) {
ciearHang();

}

function mouseDown ()

{

mouseUp ();

&&

US 7,885,981 B2
155 156

function mouseuwUp ({)

{
if (hangID != null) {
clearHang()?;
}
return true;
}

function processAsterisk() {
if (isNav4up) {

if (document.layers[hangID} != null &&
document.layers[hangID] .visibility=="hide") [{
showHelp();

}

else {

clearHang();

}
}

else {
if (document.allf{hangID] != null «&6&
document.all (hangID].style.visibility=="hidden") {
showHelp()};
}
else {
clearHang();

}

function makeBalloon(id, message, width, type)
{
"var localWidth;
if (type=="table") {
localWidth=columnWidth;
}
else {
localWidth=width;
}
var theString = "<STYLE TYPE="text/css">#'+id+t
‘{width: '+tlocalWidth+'; color: white; z-index: 1; }</STYLE>';
theString += '<DIV CLASS="balloon" id="'+id+'">'+message+'</DIV
>':
/falert (theString) ;
cocument .write(theString);

}

function makeNavBalloon (id, message, width)
{
makeBalloon (id,message, width, "nav");

}

function makeTableBalloon (id, message)
{
makeBalloon (id,message,0,"table") ;

}

function setupNavilelp ()

US 7,885,981 B2
157 158

//We want *just* the header and nav stuff set up here
<3
Enumeration e=bh.getNavBalloonIDs ();
while (e.hasMoreElements()} {
String id=(String)e.nextElement();
Balloon b=bh.getNavBalloon (id);

&>
MmMakeNavBalloon ("<%= id $>","<$=
TableDescriptorDisplay.processDoubleQuote (b.getMsg()) %>",<%=
b.getBSize() %>);

<&

}

>

function setHang (id, event, docObj, type)
{
hangID=id;
hangDocObj=doc0b3;
hangType=type;
hangX=event.clientX;
hangY=event.clienty;
timeID=setTimeout ("showHelp()",1500);
}

function clearHang() {
Lf (timeID != null) {
clearTimeout (timeID) ;
}
hideHelp (hangID) ;

function showHelp()
{
var id=hangID

if (isNav4up) {
if (document.layers{id] == null) {
return;

if (hangType=="dataTable") {
document.layers[id]).left = columnLeft;
document .layers[id].top = tableTop+
hangDocObj .parentElement.offsetTop;
document .layers [id] .width=columnWidth;
}
else if (hangType=="dataLink") {
document.layers[id]-left =
document .body.scrollLeft+columnleft;
document .layers[id]).top = document .body.scrollTop+hangY+10;
document .layers(id}.width = columnWidth;
}
else { // nav link
document.layers[id].left = document. body.scrollLeftthangxX+10;
document .layers{id).top = document .body.scrollTopthangY+10;

US 7,885,981 B2
159 160

document SB yers [id] .color="white";

agocument.layers[id]).visibility = "show";
}
else {
if (document.allfid] == null) {
return;

}

if (hangType=="dataTablie") {
document.all[id].style.pixelLeft = columnLeft;
Gocument.all[id].style.pixelTop =
tableTop + hangDocObj.parentElement.offsetTop;
document.all[(id].style.width=columnWidth;
}
else if (hangType=="databink") {
document.all[id].style.pixelLeft =
document .body.scrollLeft+columnLeft;
document.allf{id].style.pixelTop =
document .body.scrollTopthangY+10;
document.all [id] .style.width=columnWidth;
}
else { // nav link
document.all[id).style.pixelLeft =
document .body.scrollLeft+hangXt+10;
document.all[id].style.pixelTop =
document.body.scrollTopthangY+10;
}
document.all[id].style.color="white";
document .allf{id].style.visibility = "visible";

Function hideHelp (id)
{
if (isNav4dup) {
if (document.layers[id] != null) {
document.layers[id] .visibility="hide";
}
}
else {
if (document.allf{id} != null) {
document.all[id].style.visibility="hidden";
}

function validateTextarea (textareaObj, textAreaName, maxSize} {|
if (textareaObj.value.length > maxSize) {
textareaObj.focus();
alert ("The "+textAreaName+" field has a maximum length of "+
maxSize+" characters, but is currently "+
textareaObj.value.length+" characters long.");
return (false);

function validateRPP{) {
var inputObj=document. forms [1] .newPageSize;

US 7,885,981 B2
161 162

// check foM@Malid number; not 0
if (isNaN(inputObj.value)) {
alert (inputObj.value+" is not a valid number. \n"+
"Please enter a numeric value.");
inputObj.focus ();
inputObj.select();
return (false);
}
else if (inputObj.value == 0) {
alert ("Please enter a number greater than 0.");
inputObj. focus ();
inputobj.select();
return (false) ;
}
else {
return (true);

function showStatus(tableName) {

var headerModeOi: » igcument.viewTable.headerMode;

var headerMode;

if (headerModeOk’.i%].checked) {
headerMode=headerModeObj [0].value;

}

else {
headerMode=headerModeObj [1] . value;

}

var action;

if (headerMode == "Browse.jsp") {
action="BROWSE";

}

else {
action="SEARCH";

}

window.status=tableName+" ["taction+"]";

function showView(tableName) {
var headerModeObj=document.viewTable.headerMode;
var headerMode;
if (headerModeObj [0] checked) {
headerMode=headerModeObj (0] .value;
}
else {
headerMode=headerModeObj (1].value;
} .
var mode;
var doProcess;
if (headerMode == "Browse.jsp") {
mode="browse";
doProcess="browse";

}

else {
mode="search";
doProcess="new";

} .

if (tableName != "doNothing") {

US 7,885,981 B2
163 164

location Wef-headerMode+" ?tableNangens tips anal cit
"émode="+modet" &doProcess="+doProcesst+"sstackLevel=0"+
“&headerMode="+headerMode+" &header=trueéunq=<%= unqStxr %>";

Function setTableCoords() {
if (isNav4up) {
tableTop = document.layers[{'dataTable').top;
columnLeft =
document.layers(['dataTable'].left+
document .layers['dataTable'].rows[0].offsetLeft;
columnWidth = document.layers['dataTable').cells(0).offsetWidth;
}
else {
if (document.all("dataTable")==null) {
return;
}
tableTop = document.all("dataTable") .offsetTop;
columnLeft =
document .all ("dataTable") .offsetLeft+
document.all ("dataTable") .rows[0] .offsetLeft;
columnWidth = document.all("dataTable") .cells[0].offsetWidth;
//columnWidth=200;

//document .onmouseup=mouseUp;

//document .onmousedown=mouseUp;

document.onkeypress=keyPress;
</SCRIPT>

<3!
public String[] headerTableList=null;

3>

Schemalive/common/GlobalHeaderVARS.4jsp

<%!
// $Revision: 2.3 $
// SDate: 2001/10/30 01:35:53 $

S>

<%
String PAGEBKGD = "#FFFFFF";
String DARKCELL = "#60B2B2"; // "#BS5AQ0B5";
String MIDLCELL = "#89BCBC"; // "#D5COD5";
String LITECELL = "#CEE5D4"; // “#PSEOES";
‘String URIPath = "/Schemalive";
String dbName = "“enslt crm";
String dbConnName = "oraclev8";

response. setContentType ("text/html") ;
response. setHeader ("pragma", "no-cache") ;

i*

US 7,885,981 B2
165 166

if (!request.getPSMmeterNames () .hasMoreElemBhts (1)?
String headerUngStr=
TableDescriptorDisplay.getNoCache (TableDescriptorDisplay.ForJavaSecript) ;
session.removeAttribute ("sessionStack");

session.removeAttribute ("headerMode") ;

session.setAttribute ("unq",headerUngStr) ;

response.sendRedirect ("/Schemalive/AddEditForm. jsp?unq="+headerUnqgStr) ;
return;

}

x/

ae
v

<%! public static final String version_common_GlobalHeaderVARS_jsp =
“SRevision: 2.3 $"; %>

Schemalive/WEB-INF/web.xml
<?xml version="1.0" encoding="ISO-8859-1"?>

<!DOCTYPE web-app —
PUBLIC "-//Sun Microsystems, Inc.//DTD Web Application 2.2//EN"
“http://java.sun.com/j2ee/dtds/web-app 2 2.dtd">

<web-app>
<serviet>
<servlet-name>AddEditForm</servlet-name>
<servlet~class>com.schemalive .AddEditForm</servlet-—class>
</servlet>
<serviet>
<servlet-name>Browse</servlet-name>
<servlet-class>com.schemalive.Browse</servlet-class>
</servlet>
<servlet>
<servlet-~name>BalloonHelpUtil</servilet-—name>
<servilet—class>com.schemalive.BalloonHelpUtil</servlet-class>
</servlet>
<serviet>
<servlet-name>DataDictionaryUtil</servlet-name>
<servlet-class>com.schemalive.DataDictionaryUtil</servlet- class>
</servlet>
<servliet>
<servilet-—name>DoAddBEdit</servlet—-name>
<servlet-class>com. schemalive.DoAddEdit</servlet-class>
</servlet>
<servilet>
<servlet—name>DoViewGenerator</servlet-—name>
<servlet-—class>com. schemalive .DoViewGenerator</servlet-class>
</servlet>
<serviet>
<serviet~—name>Error500</servlet-name>
<servlet-—class>com.schemalive .Errar500</servlet-class>
</servlet>
<servlet>
<servlet-name>ExpiredSession</servlet-name>
<servlet-class>com.schemalive.ExpiredSession</servlet-class>
</servlet>
<servlet> .
<servlet-name>OutofSequence</servlet-name>

US 7,885,981 B2
167 168

<serviet-class>com™€chemalive.outOfSequence</VSErUl ect Ld eee]
</servliet>
<servlet>
<servlet-name>showSession</servlet-name>
<servlet-—class>com.schemalive.showSession</servlet-class>
</servlet>
<servlet>
<serviet-name>
dbUtils.DataDictionaryServlet
</servlet-name>
<servlet-class>
dbUtils,.DataDictionaryServlet
</servlet-class>
<init-param>
<param-name>dbConn</param—-name>
<param-value>oraclev8</param-value>
</init-param>
<init-param>
<param-name>database</param-name>
<param-value>cnslt_crm</param-value>
</init-param>
</servlet>
<serviet> ;
<servlet-name>
adbUtils.MasterDetailServlet
</servlet-name>
<servlet-class>
dbUtils.MasterDetailServlet
</servlet-class>
<init-param>
<param-name>dbConn</param-name>
<param-value>oraclev8</param-value>
</init-param>
<init-—param> .
<param-name>database</param-name>
<param-value>cnslt_crm</param-value>
</init—-param>
</servlet>
<servlet-mapping>
<serviet-—name>
dbUtils.DataDictionaryServlet
</servilet-name>
<url-pattern>
dadbUtils.DataDictionaryServlet
</url-pattern>
</servlet-mapping>
<servilet-—mapping>
<servlet-—name>
dbUtils.MasterDetailServiet
</servlet-name>
<url-pattern>
abUtils.MasterDetailServlet
</url-pattern>
</servlet-—mapping>

<welcome-file-list>
<welcome~file>index.html</welcome-file>
</welcome-file-list>

US 7,885,981 B2
169 170

<taglib>
<taglib-uri>view</taglib-uri>
<taglib-location>WEB-INF/taglib/view.tld</taglib-location>

</taglib>
<taglib>

<taglib-uri>stack</taglib-uri>

<taglib~location>WEB-INF/taglib/stack.tld</taglib-location>
</taglib>

<security-constraint>
<web-resource~collection>
<web-resource-name>Schemalive</web-resource~name>
<url-pattern>/</url~pattern>
<http-method>GET</http~method>
<http-method>PoOsT</http-method>
</web-resource-collection>
<auth-constraint>
<role-name>Schemalive</role-name>
</auth-constraint>
</security-constraint>
<login-config>
<auth-method>BASIC</auth-method>
<realm-name>Schemalive</realm-name>
</login-config>
<security-role>
<role-name>Schemalive</role-name>
</security-role>
</web-app>

Schemalive/WEB-INF/classes/Connection.properties

# SRevision: 1.1 5§
# $Date: 2001/10/29 22:18:29 $s

SDBCURL=jdbc:oracle:oci8:@orcl.thetick
#JIDBCURL=jdbc:oracle:oci8:@ora816
user=cnsit_crm

pwd=cOnsulting

#user=schema

#pwd=sch3ma

Schemalive/WEB-INF/classes/common/Debug. java

// $Revision: 2.3 §$
// $Date: 2001/10/30 01:35:53 §

package common;

7/ import weblogic.common.*;
import java.util.*;

public class Debug {

public static final String version_dbUtils_DataDictionary_java =
"SRevision: 2.3 §";

public static final boolean areDebugging = true;

US 7,885,981 B2
171 172

public static fin@@#int INFO = 0;
public static final int ERROR = 1;
public static final int WARN = 2;

private static Debug instance;
// private LogServicesDef logHandle;

private Debug() {
f/ T3ServicesDef t3s = T3Services.getT3Services();

f/ logHandle = t3s.log();

public static synchronized void doLog(String logMessage,
int logType) {

if (instance == null) {
instance = new Debug();

}

try {

switch (logType) {

case Debug.INFO:
// instance.logHandle.info (logMessage);
System.out.printin (new Date().toString()+": INFO:
"4+logMessage) ;
break;

case Debug.WARN:
// instance.loqHandle.warning (logMessage);
System.out.printin (new Date().toString()+": WARN:
"+logMessage) ;
break;

default:
// instance. logHandle.error (logMessage) ;
System.out.printin (new Date().toString()+": ERROR: "+
logMessage);
break;

}

/*

catch (T3Exception t3e) {
t3e.printStackTrace();

*/

catch (Exception e) {

}

Schemalive/WEB-INF/classes/dbUtils/CustomCaps. java

// $Revision: 2.4 $
// $Date: 2001/10/30 08:26:33 $

package dbUtils;

public class CustomCaps {

public static final String[} customCaps=

{ .
TRES a "SGP", "PRT", "MM", "EPN",

US 7,885,981 B2

173 174
"RE", "Tc",' "FMA", "NE", fo
"AR", "CR", "PAQ", "FAR", "POC",
"TandL", “ID", "DB", "URL", "ZIPcode",
“HRID", "MSM", "PM", "Po", "oT",
"DEV", "us", "USD", "NoCharge", "CostTransfer",
"PopUp", "ES", "NDA", "YTD"

}

Schemalive/WEB-INF/classes/dbUtils/CustomDrillDown. java

// $Revision: 2.3 §
// $Date: 2001/10/30 01:35:53 §

package dbUtils;
public class CustomDrillDown implements java.io.Serializable {

public static final String version_dbUtils CustomDrillDown_java =
"SRevision: 2.3 $";

private String tableName;
private String mode;
private int keyColumn;
private int parentColumn;
private String focusField;

public CustomDrillDown (String tableName, String mode,
int keyColumn,int parentColumn,
String focusField)

this.tableName=tableName;

this .mode=mode;
this.keyColumn=keyColumn;
this.parentColumn=parentColumn;
this. focusField=focusField;

public String getTableName() {
return (getTableName (""));

}

public String getTableName (String prefix) {
if (tableName.startsWith("_")) {
return (prefixt+ttableName) ;
}
else {
return (tableName);

public String getMode() {
return (mode) ;

)

public int getKeyColumn() {
return (keyColumn) ;

}

US 7,885,981 B2
175 176

public int getParentColumn() {
return(parentColumn); .

}

public String getFocusField() {
return (focusPield) ;

}
}

Schemalive/WEB-INF/classes/dbUtils/CustomDropDown. java

// $Revision: 2.3 §
// $Date: 2001/10/30 01:35:53 $

package dbUtils;
import java.util.*;
public class CustomDropDown implements java.io.Serializable {

public static final String version_dbUtils CustomDropDown_java =
"SRevision: 2.3 $"; , :

private String SQLStr;
// place CustomDropDownComponents into cddce
‘private Vector cddc;

public CustomDropDown () {
cddc=new Vector()};

}

public CustomDropDown (String mySQLStr) {
this ();7
SQOLStr=mySQLStr;

}

public String getSOLsStr() {
return (SOLStr) ;
}

public void setSoOLStr (String mySQLStr) {
SoLbstr = mySQUStr;
}

public void addCDDC (CustomDropDownComponent cddcElem) {
cddc.add (cddcElem) ;
}

public void addCpDDCc (int index, CustomDropDownComponent cddcElem) {
eddc.add (index, cddcElem) ;
}

public CustomDropDownComponent removeCDDC (int index) {
return ( (CustomDropDownComponent) cddc. remove (index) );

}

public boolean removeCDDC (CustomDropDown cddcElem) {

US 7,885,981 B2
177

return (cddc. re®M@e (cddcElem) );

}

178

Schemalive/WEB-INF/classes/dbUtils/CustomDropDownComponent. java

// $Revision: 2.3 $
f// $Date: 2001/10/30 01:35:53 $

package dbUtils;

public class CustomDropDownComponent implements java.io.Serializable {

public static final String version_dbUtils_CustomDropDownComponent_java =
"SRevision: 2.3 $";

private String tableName;
private String columnName;
private String separator;

public CustomDropDownComponent (String myTableName,
{

this (myTableName, myColumnName," ");

public CustomDropDownComponent (String myTableName,
String mySeparator)
{

tableName=myTableName;
columnName=myColumnName;
separator=-myScparator;

public String getTableName() {

return (tableName) ;

public Stxring getColumnName() {

return (columnName) ;

public String getSeparator() {

}

return (separator);

Schemalive/WEB-INF/classes/dbUtils/DataDictionary. java

// $Revision: 2.3 $
/f $Date: 2001/10/30 01:35:53 §$

package dbUtils;

import
import
import
import

java.io.*;
java.sql.*;
java.util.*;
common. *;

String myColumnName)

String myColumnName,

US 7,885,981 B2
179 180

import javax.servlet =
import javax.servlet.jsp.*;7

//import com.customer.*;
public class DataDictionary implements java.io.Serializable {

public static final String version_dbUtils DataDictionary java =
“SRevision: 2.3 $";

private static DataDictionary instance;

private static Hashtable ddtdHash=new Hashtable ();
private static String saveFile="DataDictionary.save";
private static boolean buildbDDOnly = false;

private static boolean checkForViewExist = false;
private static JspWriter out = null;

Private static boolean rebuild = false;

private static boolean buildingViews = false;

private DataDictionary (String database,String dbConnection) {
anit (database, dbConnection);

}

public static DataDictionary refreshinstance (String database,
String dbConnection,
boolean myBuildDDOnly,
boolean myCheckForViewExist,
JspWriter myOut)
// throws ServietException {

out = myOut;
return (refreshInstance (database,
dbConnection,myBuildDDOnly,myCheckPorViewExist) );

public static DataDictionary refreshInstance (String database,
String dbConnection,
boolean myBuildDDOnly,
boolean myCheckForViewExist)
// throws ServletException {serial

buildDDOnly = myBuildDDOnly;
checkForViewExist = myCheckForViewExist;
rebuild=true;

return (getInstance (database, dbConnection));

public static synchronized DataDictionary getInstance (String database,
String dbConnection)

// throws ServletException {

7/ check license

//String unlockKeyString = “zr ftuaxwouanxvveduvgqwkldlmkdivb";
/7/B.xrymu (unlockKeyString) ;

US 7,885,981 B2
181 182

//Pid licensev@M@fier = new Fid();
//boolean licenseOk =
licenseVerifier.Pmdz ("d:\\wls5.1.0\\Schemalive\\license");

/*
Af (!licenseOk) {
int errCode = licenseVerifier.dsz();
switch (errCode) {
case 2:
Exception f£gn = licenseVerifier.Ucao();
if (fgn.toString() .indexOf ("Nul1lPointerException") >= 0) ¢{
throw new ServletException("No License File found");
} .
else {
throw new ServletException (fgn.toString());
}
case 3: :
throw new ServletException ("License has expired");
default:
throw new ServletException("License error code: "terrCode);
}
}
*/
if (instance == nuil || rebuild) {
if (!buildingViews) {
instance = new DataDictionary (database, @bConnection);

rebuild=false;

}

return (instance);

public static synchronized DataDictionary refreshInstance (
String database,String dbConnection)

{
instance = new DataDictionary (database, dbConnection) ;
return (instance);

// This will pre-load the data dictionary into a hash of
// DataDictionaryTD objects keyed on the table name
private void init(String database,String dbConnection) {
// Check to see if serialization file exists
FileInputStream filIn=null;
ObjectinputStream objIn=null;
try {
if (rebuild) {
throw new FileNotFoundException();
}
saveFile="DataDictionary."+dat:>5aset" save";
filiIn=new FileInputStream(saveFile) ;
objin=new ObjectInputStream(fililin);
ddt dHash= (Hashtable) objIn.readObject ();
objIn.close();
return;
}
catch (FileNotFoundException fnfe) {

outputInfo("<b>About to build DataDictionary: first pass.</b><br>") ;

US 7,885,981 B2
183 184

doDataDictiMMry (database, dbConnectior fl
outputinfo ("<b>Done building DataDictionary: first pass.</b><br>");
if (!buildpDpDOnly) {
outputinf£fo (
"<b>About to call ViewGeneérator for all Views.</b><br>");
// build Views
instance=this;
buildingViews=true;
rebuild=false;
Set ddtdSet = tables ()};
Object(J ddtdaAry = ddtdSet.toArray();
Arrays.sort (ddtdAry) ;
for (int i=0;i<ddtdAry.length;itt) {
DataDictionaryTD ddtd=
getDataDictionaryTD( (String) ddtdAry[i]);
if (ddtd.getTDType() == TableDescriptor.VIEW) {
continue;
}
ViewGenerator vg = null;
af (checkForViewExist) {
vg = new ViewGenerator (ddtd, true, true, out);
}

else {
vg = new ViewGenerator (ddtd,out);

}
instance=null;
_buildingViews=false;
outputInfo("<b>Done building Views.</b><br>");
outputin£o (
"<b>About to build DataDictionary: second pass.</b><br>");
doDataDictionary (database, dbConnection);
outputin£o (
"<b>Done building DataDictionary: second pass.</b><br>");
}
out = null;
this.serialize();
}
catch (IOException ioe) {
ioe.printStackTrace()?;
}
catch (ClassNotFoundException cnfe) {
enfe.printStackTrace();

private void outputinfo(String infoStr) {
try {

if (Debug.areDebugging) {
Debug.doLog(infoStr, Debug.INFO);

}

if (out != null) {
out.printin(infoStr);
out.flushn();

}
catch (IOException ioe) {
ioce.printStackTrace();

US 7,885,981 B2
185 186

}

public void doDataDictionary (String database, String dbConnection) {

Connection con = SQLUtil.makeConnection();
try {
Statement stmt = con.createStatement ()7

outputinfo("<b>Building DataDictionary for tables.</b><br>");
String qStr="SELECT TABLE NAME FROM USER_TABLES ORDER BY “+
"TABLE NAME DESC";
ResultSet rs=stmt.executeQuery (qStr);
outputiIn£fo("\t<blockquote>")
while (rs.next()) {
String tableName=rs.getString(1);
//System.out.printin("tableName; "+tableName);
outputiInfo("\tAdding table: "+tableName+" to
DataDictionary.<br>");
DataDictionaryTD ddtd =
new DataDictionaryTD (database, tableName, dbConnection, out);
ddtd.setTDType (TableDescriptor. TABLE) ;
ddtdHash.put (tableName, ddtd) ;
}
outputinfo ("\t</blockquote>") 7
outputInfo("<b>Building DataDictionary for views.</b><br>");
outputinfo("\t<blockquote>");
qStr="SELECT VIEW_NAME FROM USER_VIEWS ORDER BY VIEW_NAME DESC";
rs=stmt.executeQuery (qStr);
while (rs.next({))
String viewName=rs.getString (1);
outputinfo("\tAdding view: "“tviewName+" to DataDictionary.<br>");
DataDictionaryTD ddtd =
new DataDictionaryTD (database, viewName, dbConnection, out);
ddtd.setTDType (TableDescriptor.VIEW);
ddtdHash. put (viewName, ddtd);
}
outputIn£fo("\t</blockquote>");
outputInfo("<b>Building constraints in DataDictionary.</b><br>");
// Micah 1-17-01
Enumeration ddtd&num=ddtdHash.keys ()7
while (ddtdEnum.hasMoreEFlements()) {
DataDictionaryTD ddtd=

(DataDictionaryTD) ddtdHash. get ((String)
ddtdEnum.nextElement ());
ddtd.buildConstraints (dbConnection, this);

xrs.close();
stmt.close();

}

catch (SQLException sqle) {
sqle.printStackTrace();

}

catch (Exception e) {
System.out.printlin ("con “+con);
e-printStackTrace() ;

US 7,885,981 B2
187 188

try {
con.close();

}

catch (SQLException sqle) {
sqle.printStackTrace();

}

public DataDictionaryTD getDataDictionaryTD (String tableName)
return ((DataDictionaryTD) ddtdHash.get (tableName.toUpperCase()))7

}

public Set tables() {
return (ddtdHash.keySet());
}

private void serialize() {
ObjectOutputStream objOut= null;
FileOutputStream filOut = null;

try {
fil10ut new FileOutputStream(saveFile);
objOut = new ObjectOutputStream(£ilOut) ;

objOut.writeObject (ddtdHash);
objOut.flush();
objOut.close();

}

catch (IOException ice) {
ioe.printStackTrace();
}
}
Schemalive/WEB-INF/classes/dbUtils/DataDictionaryServlet.java

// $Revision: 2.4 §
// SDate: 2001/10/30 05:40:38 $

package dbUtils;

import java.io.*;

import java.util.*;

import java.sql.*;

import javax.servlet.*;
import javax.servlet.http.*;
import dbUtils.*;

public class DataDictionaryServlet extends HttpServlet {

String dbConn=null1;
String database=null;

private DataDictionary dd;

public void init (ServletConfig config) {

US 7,885,981 B2
189 190

database=confiM@Metinit Parameter ("databage!y

dbConn=config.getInitParameter ("dbConn") ; “

dd=DataDictionary.getInstance (database, dbConn);
}

public void doGet (HttpServletRequest req, HttpServletResponse res) [{
// if not tableName param, return summary of all
String tableName=-reqg.getParameter ("tableName");
String refresh=reg.getParameter ("refresh");

if (refresh != null && refresh.equals("yes")) {
dd=DataDictionary.refreshinstance (database, dbConn) ;

}

if (tableName == null) {
showSummary (req, res);

)

else {
showDetail (req, res, tableName) ;

}

public void showSummary (HttpServletRequest req, HttpServletResponse res) {
Set e=dd.tables();
Object{] tableSet=e.toArray();
Arxrays.sort (tableSet);

res.setContentType ("text/html"); :
StringBuffer outputString = new StringBuffer ();

outputString. append ("<HTML> \n\t"+
"<HEAD> "+
"<TITLE>DataDictionary</TITLE>"+
"</HEAD> \n") ;

outputString.append("\t<BODY bgcolor=\"#£fLLLL\">\n");

outputString.append("\t\tAvailable Tables for "+databaset": <br>\n");
outputString.append("\t\t<font size=\"-2\">Click table name to see "+
"details.</font>\n")};

outputStxring.append("\t\t<TABLE width=\"600\" border=\"1\">\n");
int columnCount=0;

for (int i=O;i<tableSet.length;itt+) {

if (columnCount == 5) {
outputString.append ("\n\t\t\t</TR>\n") ¢
columnCount=0;

}

2£ (columnCount == 0) {
outputString.append ("\t\e\e<TRe\n\t\eveve") 7

}

String tName=(String) tableSet[i]);

outputString.append("<TD><A HREF=\"/Schemalive/dbUtils."+
"DataDictionaryServlet ?tableName="+
tNamet+"\">"4tNamet"</A></TD>"

dV:

US 7,885,981 B2
191 192

columnCount
}

while (columnCount < 5) {
outputstring.append("<TD>&nbsp; </TD>");
columnCount++;
if (columnCount == 6) {
outputString.append ("\n\t\t\t</TR>\n") ;
} .
}
outputString.append("\t\t</TABLE>\n") ;
outputString.append("\t</BODY>\n") ;
outputString.append ("</HTML>");

PrintWriter out=null;

try {
out=res.getWriter();

}

catch (IOException ioe) {
loe.printStackTrace ();

}

out.println (outputString.toString())?

public void showDetail (HttpServletRequest req, HttpServletResponse res,

1

String table)

res.setContentType ("text/html"); .
StringBuffer outputString = new StringBuffer ();

outputString- append ("<HTMT>\n\t"t

"<HEAD>"+ 7
"<TITLE>DataDictionary</TITLE>"+
"</HEAD>\n"

outputString. append ("\t<BODY bgcolor=\"#ffLfFLEE\">\n") ;

outputString.append ¢
"<A HREF=\"/Schemalive/dbUtils. DataDictionaryServlet"+
"\">Return to Table Listing</A><p>\n");

DataDictionaryTD ddtd=dd.getDataDictionaryTD (table);

outputString.append("\t\tDetails for table: "+tablet+" (key: "+
ddtd.getKeyField()+")<p>\n");

outputString.append("\t\t<TABLE width=\"600\" border=\"1\">\n");

String viewSelect = null;

if (ddtd.getTDType() == TableDescriptor.VIEW) {
viewSelect = ddtd.getViewSelect ();

J

ResultSetMetaData rsmd=ddtd.getMetaData ();

outputString.append ("\t\t\t<TR><TH>ColmnName</TH>"+
“<TH>Null?</TH><TH> ColumntType (Size) </TH>"+

US 7,885,981 B2
193 194

"<TH>Const nt Table/Key</TH>\n"

try {
fox (int i=1;i<=rsmd.getColumnCount ();it+) {

String columnName=rsmd.getColumnName (i);
String formattedColumnName=ddtd.getFormattedField(i-1);
String columnType=rsmd.getColumnTypeName (i);

outputString. append ("\t\t\t<TR>\n") ;
outputstring. append ("\t\t\t\t<TD>"+columnName+
"<br> ("+
formattedColumnNamet+")</TD>\n"
de

outputString.append("\t\t\t\t<TD>");

if (xcsmd.isNullable(i) != ResultSetMetaData.columnNullable) {
outputString.append ("NOT NULL ");

}

else {
outputString.append ("&nbsp;") ;

}

outputString. append ("</TD><TD>") ;

outputString. append (columnType) ;
Af (!columnType.equals ("DATE")) {
outputString.append({"(");
if (columnType.equals ("NUMBER")) {
int precision=rsmd.getPrecision (i);
iat scale=rsmd.getScale (i);
ifcx(precision != 0) {
outputString.append(precision+","+scale) ;

}
else {
outputString.append (rsmd.getColumnDisplaySize(i));
}
outputString.append(")</TD>\n");
}
outputString. append ("\t\t\t\t<TD>") ;

TableDescriptor td=null;
if ((td=ddtd.getConstraint (columnName)) != null) {

outputString.append("<A HREF=\"/Schemalive/dbUtils."+
"DataDictionaryServlet?tableName="+
td.getTable ()+"\">"4+td.getTable()+
"</A>/"+td.getKeyField()
dF
}
else {
outputString-append ("&nbsp;");
} :

outputString.append("</TD>\n");
outputString. append ("\t\t\t</TR>\n") ;

}

Schema

US 7,885,981 B2
195 196

}

}

catch (SQLException sqle) {
sgqle.printStackTrace();

}

if (wiewSelect != null) {

; outputString.append ("<TR><TD><b>View Select: </b></TD>\n");
outputString.append("<TD colspan=3>\""+viewSelect) ;
outputString.append ("\"</TD></TR>\n");

}

outputString.append ("\t\t</TABLE><p>\n") ;

outputString.append (
“<A HREF=\"/Schemalive/dbUtils.DataDictionaryServlet"+
"\">Return to Table listing</A><p>\n");

outputString.append ("\t</BODY>\n") ;
outputString.append ("</HTML>\n") 7

PrintWriter out=nul]);

try {
out=res.getWriter();

}

catch (IOException ioe) {
ioe.printStackTrace();

}

out.printin (outputString.toString())?

live/WEB-INF/classes/dbUtils/DataDictionaryTD. java

// SRevision: 2.3 §

/f/ $Dda
packag
import
import

import

import
import

//impo

public
Serial

pub

te: 2001/10/30 01:35:53 §$
e dbUtils;

java.io.*;

java.sql.*;

java.util.*;

common. *;
javax.servlet.jsp.*;

rt dbPoolUtils.*;

class DataDictionaryTD extends TableDescriptor implements java.io.
izable {

lic static final String version_dbUtils_DataDictionaryTD_java =

"$Revision: 2.3 $";

private static JspWriter out=null;

pub

lic DataDictionaryTD(String database,String table,
String dbConnection).,

US 7,885,981 B2
197 198

this (database MM™ble, dbConnection, null);
)

public DataDictionaryTD(String database,String table,
String dbConnection, JspWriter out)

super (database, table.toUpperCase(),dbConnection, out);
this.out=out;

// Micah 1-17-01
//ouildConstraints (dbConnection) ;
}

// Micah 1-17-01
public void buildConstraints (String dbConnection, DataDictionary dd) {
// This. class is going to automagically load up the TD stuff using
// DataDictionary
Vector constraints=new Vector();
try {
Connection con = SQLUtil.makeConnection ();

if (con == null) {
throw new SQLException ("Can'tt get connection: "+dbConnection);

}

Statement stmt = con.createStatement ();

// first let's see if we are dealing with a view
‘String qStr="SELECT TEXT from USER_VIEWS where "+
“VIEW _NAME='"“+getTable()+"'";
ResultSet rs=stmt.executeQuery (gStxr);
if (xs.next()) { // dealing with a view
outputinio("<b>Setting ViewSelect for "+getTable()+
"</b><br>");
setViewSelect (rs.getString(1));
rs.close();
stmt.close(}?
con.close()};

// check for column comments for CustomDrillDown
Enumeration dfsEnum = displayFields();
int index=0;
while (dfsEnum.hasMoreFlements()) {
//con = connMgr.getConnection (dbConnection);
con = SQLUtil.makeConnection ();
if (con == null) {
throw new SQLException ("Can't get connection: "+
dabConnection);
}
String df = (String) dfsEnum.nextElement ();
gStr="select comments from user_col_comments "+
“where comments is not null and table_name='"+
getTable()+"' and column_name=""+df+"'";

stmt = con.createStatement ();
rs=stmt .executeQuery (qStr);
if (rs.next()) {
String comments=rs.getString (1);
if (Debug.areDebuaging) {

US 7,885,981 B2
199 200

Bepug.doLog ("col comments PoE: 4"

getTable()+"."+dfi+": "+comments, Debug. INFOQ) ;

}

// parse

// get tableName

int beginTag=comments.indexOf ("<tableName>") +

"<tableName>".length();

int endTag=0;

if (beginTag >= "<tableName>"-.length()) {
endTag=comments.indexOf ("</tableName>") ;
String tableName=comments.substring (beginTag,endTag) .
toUpperCase().trim();

// get mode
beginTag=comments.indexOf ("<mode>")+
"<mode>".length();
endTag=comments.indexOf ("</mode>");
String mode=comments.substring (beginTag, endTag) .trim()?;

/{get keyColumn
beginTag=comments.indexOf (“<keyColumn>") +
"<keyColumn>".length();
endTag=comments.indexOf ("</keyColumn>") ;
int keyColumn=Integer.parseInt (
comments.substring (
begintTag, endTag) .trim()
;

//get parentColumn
beginTag=comments. indexOf ("<parentColumn>") +
"<parentColumn>".length();
endTag=comments.indexOf ("</parentColumn>") ;
int parentColumn=Integer.parseInt (
comments .substring (beginTag, endTag) .trim()
)e

//get focusField

beginTag=comments.indexOf ("<focusField>") +
"<focusField>". length ()?

endTag=comments.indexOf ("</focusField>");

String focusField=comments.substring (beginTag, endTag) -

toUpperCase().trim();

if (Debug.areDebugging) {
Debug.doLog("DDTD: tableName="+tableName+", mode="+
mode+", keyColumn="+keyColumn+", parentColumn="+
parentColumn+", focusField="+focusField, Debug. INFO};

}

setCustomDrillDown (new CustomDrillDown (
tableName,mode, keyColumn,
parentColumn, focusField),indext++);

// parse for constraints

beginTag=comments.index0Of ("<foreignTableName>") +
"<foreignTableName>". length ();

endTag=Q;

if (beginTag >= "<foreignTableName>".length()) {

}

return;

US 7,885,981 B2
201 202

Pnatag=comments. indexOt ("4yisr ai ghips Maher hl ri

String foreignTableName=

comments.substring (

beginTag,endTag) .toUpperCase().trim();

beginTag=comments.index0f ("<foreignKeyField>") +
"<foreignkeyField>".length ();

endTag=comments.indexOf ("</foreignkKeyField>");

String foreignkeyField=

comments.substring (

beginTag, endTaq) .toUpperCase().trim();

if (Debug-areDebugging) {
Debug.doLog("About to create new TD on "+
getTable()+"."4df+" with "+
"foreignTableName: "+
foreignTableName+
*" foreignKeyField: "+
foreignKkeyField, Debug.INFO
di
}
TableDescriptor td=
new TableDescriptor (getDatabase ()},
foreignTableName,
getDBConnection(),out
i
td.setKeyField (foreignkeyField) ;
putConstraintForvView (df,td);

/* Micah 1-17-01

TableDescriptor td =
dd.getDataDictionaryTD (foreignTableName) ;
td.setKeyField(foreigqnkKeyField);
putConstraintForView (df, td);

*/

index++;

else {
setCustomDrillDown (null, indext++) ;

rs.close();

stmt.close();

//connMgr .freeConnection (dbConnection, con);
con.close();

} // end check for dealing with a view

// check for column comments on a table
Enumeration dfsEnum = displayFields();
int index=0;

while

(dfsEnum.hasMoreBlements({)) {

String df = (String) dfisEnum.nextElement ();
gstxr="select comments from user_col_comments "+

“where comments is not null and table_name='""+
getTable()+"' and column_name='""+df+"'";

US 7,885,981 B2
203 204

rs=stmt.executeQuery (gStr);
Lf (rs.next()) {
String comments=rs.getString(1)?
if (Debug.areDebugging) {
Debug.doLog("col comments for "+
getTable()+"."+df+": “+comments, Debug. INFO
7
}

// parse for customdropdown
int endTag=0;
int beginTag=0;
if (0 < (endTag=comments.indexOf("</sql>"))) {
peginTag=comments. index0Of ("<sql>") +"<sql>".length ();
String
customDropDownSOL=comments. substring (beginTag, endTag) .
toUpperCase().trim();
if (Debug.areDebugging) {
Debug.doLog("Setting 'local' Foreign CDD to: "+
customDropDownSQOL, ‘
Debug. INFO);
}
setForeignCDD (df, customDropDownSQL) ;

}

qStr="SELECT B.COLUMN_NAME, C.TABLE_NAMB, C.COLUMN_NAME "+
"PROM USER_CONSTRAINTS A, USER_CONS_COLUMNS B, "+
“USER_CONS_ COLUMNS C WHERE “+
“A.CONSTRAINT TYPE = 'R' AND A.TABLE_NAME = ‘"tgetTable()+
"' AND A.CONSTRAINT NAME = B.CONSTRAINT_NAME "+
"AND A.R_CONSTRAINT_NAME = C.CONSTRAINT_NAMBE";

rs=stmt.executeQuery (qStr);
outputinfo("<b>constraints for: "“+tgetTable ()+"</b><blockquote>");
while (rs.next()) {
/* Micah 1-17-01
TableDescriptor td=new TableDescriptor (getDatabase(),
rs.getString (2),
getDBConnection ()
);
td.setKeyField(rs.getString(3));
putConstraint (rs.getString(1),td);
Micah 1-17-01 */

TableDescriptor td=dd.getDataDictionaryTD(rs.getString (2));
td.setKeyField(rs.getString(3));
putConstraint (rs.getString(1),td);

outputinfo(rs.getString(1)+" --> "+
rs.qetString(2)+"."4+td.getKeyField()+"<br>")7

if (getForeignCDD(rs.getString(1)) =
if (td.getPrimaryCDD() '= null) {
if (Debug.areDebugging) {

= null) {

US 7,885,981 B2
205 206

Webug.doLog (getTable()+". Guki dérsh i Wri”
"; Inheriting remote Primary CDD as: "+td.getPrimaryCDD
() .getSoLStr (),Debug. INFO);
}
setForeignCDD (rs.getString(1),td.getPrimaryCDD() .getSQLStr

O))e

}
}
outputInfo ("</blockquote>");
qStr="SELECT B.COLUMN_NAME FROM "+
“USER_CONSTRAINTS A,USER_CONS COLUMNS B WHERE "+
“A. CONSTRAINT _TYPE='P" AND A.TABLE NAME = '"+oet Table ()+
"1 AND A.CONSTRAINT_NAME=B.CONSTRAINT_NAME";

rse=stmt.executeQuery (qStr);
if (rs.next()) {
setKeyField(rs.getString(1});7

}
rs.close();
stmt .close ();
//connMgr. £freeConnection (dbConnection, con) ;
con.close();

}

catch (SQLException sqle) {
sqlie.printStackTrace ()?

}

catch (Exception e) {
e.printStackTrace();

}

}

private void outputinfo (String infoStr) {
try {
if (Debug.areDebugging) {
Debug .doLog(infoStr, Debug. INFO);
}
if (out != null) {
out.printin (infoStr);
out.flush ();
}
}
catch (IOException ioe) {
ioe.printStackTrace();

}
}
Schemalive/WEB-INF/classes/dbUtils/MastexrDetail.java

// $Revision: 2.3 $ */
// $Date: 2001/10/30 01:35:53 $ */

package dbUtils;
import java.io.*;

import java.sql.*;
import java.util.*;

US 7,885,981 B2
207 208

public class MasterDetail {

Public static final String version _dbUtils_ MasterDetail_ java =
"$Revision: 2.3 $";

Private static MasterDetail instance;
private static Hashtable mdHash=new Hashtable ();

private MasterDetail (String database,String dbConnection) {
init (database, dbConnection);

}

public static synchronized MasterDetail getInstance (String database,
String dbConnection)
{
if (instance == null) {
instance = new MasterDetail (database, dbConnectian);
}
return (instance) ;

}
public static synchronized MasterDetail getInstance() {
return (instance);

}

private void init(String database, String dbConnection) {

try {
Connection con = SQLUtil.makeConnection ();
if (con == null) {

throw new SOLException("Can't get connection: “+dbConnection) ;

Statement stmt = con.createStatement ();
String qStr="select table name,comments from user _tab_ comments "+
"where comments is not null";
ResultSet rs=stmt.executeQuery(qStr);
while (rs.next()) {
Vector detailVect=parseComments (rs.getString(2));
mdHash-_put (rs.getString(1),detailVect) ;
}
rs.close();
stmt.close();
con.close()?
}
catch (SOLException sqle) {
sqle.printStackTrace (};

private Vector parseComments (String comments) [

Vector detailTables=new Vector();

int begTag=comments.indexOf ("<detailTable>")+
"“<detailTable>".length();

int endTag=comments.indexof ("</detailTable>", begTag) ;

while (begTag >= "<detailTable>".length() && endTag >= 0) {
detailTables.add(comments.substring (begTag, endTag) .toUpperCase ().

70

15

20

2

30

35

40

45

50

55

}

public Vector getDetailTables (String tableName)
Vector detailTables=(Vector)mdHash.get (tableName.toUpperCase());

}

}

US 7,885,981 B2
209

trim())3

210

beqTfag=comments.indexOf ("<detailTable>",endTaq) +

"<detailTable>". length {);

endTag=comments.indexof ("</detailTable>",begTag) ;

return (detailTables) ;

if (detailTables == null) {
return(new Vector());

}

else [

return(detailTables);

public Set tables() {
return (mdHash.keySet ());

}
}

Schemalive/WEB-INF/classes/dbUtils/MasterDetailServlet.java

// $Revision: 2.4 §
// SDate: 2001/10/30 05:40:38 $

package dbUtils;

import
import
import
import
amport

amport

Public

java.io.*;
java.util.*;
java.sql.*;
javax.servlet.*;
javax.servilet-http.*;

adbUtils.*;

{

class MasterDetailServlet extends HttpServiet {

String dbConn=nuli;
String database=null;

private MasterDetail md;

public void init (ServletConfig config) {

)

public void doGet (HttpServletRequest reg, HttpServletResponse res)
String tableName=req.getParameter ("tableName") ;

database=config.getInitParameter ("database");
dbConn=config.getInitParameter ("dbConn") ;
md=MasterDetail.getInstance (database, dbConn)

String outputString=null;
if (tableName == null) {

}

outputString=showsSummary (req, res);

’

{

US 7,885,981 B2
211 212

else {
outputString=showDetail(req,res, tableName) ;

}

res.setContentType ("text/html");

PrintWriter out=nulil;

try {
out=res.getWriter();

}

catch (IOException ioe) {
ioe.printStackTrace ();

}

out.printin (outputString);

}

public String showSummary (HttpServletRequest req,
HttpServletResponse res) {
Set tables=md.tables();
Object({} tableSet=tables.toArray();
Arrays.sort (tableSet);

StringBuffer outputString = new StringBuffer ();

outputString~- append ("<HTML> \n\t"+
“<HEAD> "+
"<TITLE>MasterDetail</VTITLE>"+
m</HEAD>\n"

dz

outputString.append("\t<BODY bgcolor=\"#fFEFLE\">\n");

outputString-.append("\t\tMaster tables for "+databaset+": <br>\n");
outputString.append("\t\t<font size=\"-2\">Click table name to see "+
"detail tables.</font>\n");

outputString-.append("\t\t<TABLE border=\"1\">\n") ;

int columncCount=0;
for (int i=O;i<tableSet.length;i+t+) {
if (columnCount == 5) {
outputString. append ("\n\t\t\t</TR>\n");
columnCount=0;
}
if (columnCount == 0) {
outputString. append ("\t\e\t<TRo\n\e\c\eve") ;
}
String tableName=(String)tableSet [i];
outputString.append("<TD><A HREF=\"/Schemalive/dbUtils."+
"MasterDetailServlet?tableName="+
tableName+"\">"+tableNamet"</a></TD>\n"
dG
columnCount++;
}
while (columnCount < 5) {
_outputString.append ("\t\t\t\t<TD>énbsp;</TD>\n") ;
columnCount+t+;
if (columnCount == 6) {

outputString.append("\t\t\t</TR>\n") ;

US 7,885,981 B2
213 214

}
}
outputString. append ("\t\t</TABLE>\n") ;
outputString.append("\t</BODY>\n") ;
outputString.append ("</HTML>");

return (outputString. toString ())?;
}

public String showDetail (HttpServletRequest req, HttpServletResponse res,
String table) {
StringBuffer outputString = new StringBuffer ();

outputString. append ("<HTML>\n\t"+
"<HEAD> "+
"<TITLE>MasterDetail</TITLE>"+
"</HEAD>\n"

y?

outputString.append("\t<BODY bgcolor=\"#f£fFFFFF\">\n") ;
outputString.append("<A HREF=\"/Schemalive/dbUtils.MasterDetailServiet"
+

"\">Return to Master Table Listing</A><p>\n");
outputString.append("\t\tDetail tables for : “+tablet"<p>\n");
outputString.append("\t\t<TABLE border=\"1\">\n");
Vector detailTables=md.getDetailTables (table);
Enumeration esdetailTables.elements ();

while (e.-hasMoreFlements({)) {
outputString- append ("\t\t\t<TR>\n\t\t\t\t<TD>"+
(String) e.nextElement ()+
Ne /TD>\n\t\t\t</TR>\n");7

}

outputString- append ("\t\t\t</TR>\n");
outputString.append ("\t\t</TABLE>\n") ;
ocutputString. append ("\t</BODY>\n") ;
outputString.append ("</HTML>") ;
return (outputString.toString());

}

Schemalive/WEB-INF/classes/dbUtils/SQLUtil. java

// SRevision: 2.3 §
// $Date: 2001/10/30 01:35:53 $

package dbUtils;

import java.util.*;

import java.sqi.*;

import javax.sql.*;

import oracle.jdbc.driver.*;
import oracle.jdbc.pool.*;

import common.*;

US 7,885,981 B2
215 216

//import dbPoolutil Si;

public class SQLUtil {

public static final String version_dbUtils_SOLUtil_java =
"SRevision: 2.3 $";

//public static final String JDBCDriver = "weblogic.jdbc.pool.Driver";
//public static final String JDBCDriver = "“weblogic.jdbc20-pool.Driver";

//public static final String JDBCURL = "jdbc:weblogic:pool:oraclePool";
//public static final String JDBCURL = "jdbc20:weblogic:pool:oraclePool";
//public static final String JDBCURL = "jdbc:oracle:oci8:@orcl.thetick";
//public static final String user = "CNSLT_CRM"; // "schema";

//public static final String pwd = "CONSULTING"; // “sch3ma";

/fpublic static Driver oraDriver=null;

public static OracleConnectionCacheImpi ods=null;

public static String processSingleQuote (String str) {

}

int prevIindex=0;
aint curiIndex=0;

aif (str == null) {
return(str);

}
while ((curIndex=str.indexOf("'",prevIndex)) >= 0) {

str=str.substring (0, curIndex) +"'"+strc.substring (curIndex) ;
previndex=curindext2;

return(str);

public static Connection makeConnection() {

Connection con=null;

try {
//ift (oraDriver == null) {
if (ods == null) {

String JDBCURL=null;
String user=null;
String pwd=null;

Properties p = new Properties ();
p-load(ClassLoader.getSystemResourceAsStream (
"Connection.properties"));

JDBCURL = p.getProperty("JDBCURL") ;

user = p.getProperty ("user");

pwd = p.getProperty ("pwd");

Debug.doLog ("Connecting to: "+UDBCURL+", with: "+user+"/*****",
Debug.WARN) ;

ods = new OracleConnectionCachelImpl ();
ods .setURL(JDBCURL) ;

US 7,885,981 B2
217 218

ods. set U@Wr (user);
ods.setPassword (pwd) ;

ods.setMaxLimit (20);

//System.out.printin("oraDriver is null, setting to:

"4+ JIDBCDriver) ;7

//oraDriver= (Driver)

Class. forName (SQLUtil.JDBCDriver) .newInstance ();

} .
//con=DriverManager.getConnection (SQLUtil.JIDBCURL) ;
//con=oraDriver.connect (SQLUtil. IDBCURL, null);
con=ods.getConnection ();

}

catch (SQLException sqle) {
sqle.printStackTrace();

}

catch (Exception e) {
e.printStackTrace ();

}

return (con);

}

/*
public static Hashtable checkConnection (Connection con,
String connName) {

Hashtable h = new Hashtable();
Boolean b; .

if {con == null) {
DBConnectionManager connMgr=DBConnectionManager.getIinstance();
con=connMgr.getConnection (connName) ;
b=new Boolean (true);

}

else {

b=new Boolean (false);

}

h.put ("connection", con) ;

h.put ("needToClose",b);

return (h);

}

*/

public static void main(String[{] args) {

. System.out.printin ("orig Str: "targs[0])};
System.out.printin("new Str: "+processSingleQuote (args[0]));
System.out.printin("null Test: "+processSingleQuote (null));

}
Schemalive/WEB-INF/classes/dbUtils/TableDescriptor.java

// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 $

package dbUtils;

import
import
amport

import

import
import

public

US 7,885,981 B2
219 220

java.io. *;
java.sqi.*;
java.util.*;

common, *;

HTMLUtils.*;
javax.servlet.jsp.*;

class TableDescriptor implements java.io.Serializable {

public static final String version_dbUtils TableDescriptor java =
"$Revision: 2.3 $";

public static final int DisplayAl1NotNullable=0;
public static final int DisplayAl1Writable=1;

public static final int TABLE=0;
public static final int VIEW=1;

private String database;
private String table;
private String dbConnection;

private String where;
private String orderBy;
private String keyField;

private String viewSelect;
private int tdType;

private ResultSetMetaData rsmd;
private MetaData[] columns;

Private CustomDrillDown[] cdd;

private Hashtable foreignCDDs;
private CustomDropDown primaryCDD;

private static JspWriter out = null;

// BR list of fields to be shown. This is initialized because there will
// always be a default list of displayFields

private Vector displayFields=new Vector ();

private Vector formattedFields=new Vector ();

// What gets shown in a constraint picklist (space-delimited). This is
// not initialized because it may not be used.
private Vector constraintFields=null;

// AR hash reference to constraints where key is a String (referenceing
// a particular field) and value is a reference to another

// TableDescriptor Object. This is not initialized because it may not
// be used

private Hashtable constraints=null;

public TableDescriptor (String database, String table,

US 7,885,981 B2
221 222

String dbconnect MM) {
this (database, table, dbConnection, null);
} :

public TableDescriptor (String database, String table,
String dbConnection,JspWriter out) {

this.out=out;
this.database=database;
this.table=table;
this.dbConnection=dbConnection;

foreignCDDs=new Hashtable();

try {
Connection con = SQLUtil.makeConnection ();

if (con == null) {
throw new SOQLException("Can't get connection.");

}

Statement stmt = con.createStatement ();

// let's see if there a table comments for ordering the
// the rows
ResultSet rs =
stmt .executeQuery ("select comments from user_tab_comments"+
“ where table name='"+table.toUpperCase()+"' and "+
"comments is not null");
StringBuffer qStrBuff = new StringBuffer("SELECT * FROM "+table);
if (rs.next()) {
Stxing comments=rs.getString(1);
int endTag=0;
int begTag=comments.indexOf ("<cl>");
if (begTag >= 0) {
endTag=comments.indexOf ("</cl>");
qStrBuff = new StringBuffer ("SELECT ");
while (endTag >= 0) {
String column=comments.substring (begTagt+t"<cl>".length(),
endTag);
qStrBuff.append(columnt",");
begTag=comments.indexOf ("<cl>",endTag) ;
endTag=comments.indexOf ("</cl>",endTagt+1) ;
}
qStrBuff.deleteCharAt (qStrBuff.length{)-1);
qStrBuff.append(" FROM "4+table);

// parse for customdropdown
aif (0 < (endTag=comments.indexOf("</sql>"))) {
begTag=comments. indexOf ("<sql>")+"<sql>".length();
String customDropDownSOL=comments. substring (begTag, endTag),.
toUpperCase().trim();
if (Debug.areDebugging) {
Debug.doLog(getTable()+t": Setting Primary CDD to: "+
customDropDownSQL, Debug. INFO) ;
}
set PrimaryCbDD (customDropDownSQL) ;

}

}

US 7,885,981 B2
223 224

}
if (Debug.areDebugging) {
Debug.doLog("TableDesctiptor qStrBuff: "+qStrBuff, Debug.INFO);
}
// F111 in metaData
// More efficient query hack suggested by Rob
rs = stmt.executeQuery (qStrBuff.toString());

rsmd = new MetaData(rs.getMetaData());

// set the displayFields
setDefaultDisplayFields();
setDefaultFormattedFields();

cdd=new CustomDrillDown[displayFields.size()]?
setDefaultConstraintFields ();

// don't need the database connection anymore
rs.cliose();

stmt.close()j;
con.close();

catch {SQLException sqle} {

outputinfo ("<blockquote><pre>"tsqle+"</pre></blockquote>") ;
sgle.printStackTrace()};

catch (Exception e) {

e.printStackTrace ();

public String getDatabase() {

}

return (database);

public String getTable() {

}

return(table);

public String getDBConnection() {
return (dbConnection) ;

}

public int getTDType() {
return (tdType) ;

}

public void setTDType(int tdType) {
this.tdType=tdType;

}

public String getViewSelect() {
return (viewSelect) ;

}

public void setViewSelect (String viewSelect) {
this.viewSelect=viewSelect;

US 7,885,981 B2
225 226

}

public String getKeyField() {
return (keyField) ;
}

public boolean setKeyField(String keyField)
throws SQLException
{
// Make sure that the keyfield exists in this table
if (findColumnName (keyField) == 0) {
return (false);
}
this. keyField=keyField;
return (true) ;
}

public String getOrderBy() {
return (orderBy);

}

public boolean setOrderBy (String orderBy)
throws SQLException
{
// Make sure that the keyfield exists in this table
if (findColumnName (orderBy) == 0) {
return (false);
}
this.orderBy=orderBy;
return (true);

)

public String getWhere() {
return (where);

}

public void setWhere(String where) {
this .where=where;

}

public CustomDrillDown getCustomDrillDown (int index) {
if (index < 0 || index >= cdd.length) {
return(null);
)

return (cdd[index]});

public void setCustomDrillDown (CustomDrillDown cdd, int index) {
if (index >= 0 && index < this.cdd.length) {
this.cdd[index]=cdd;

public CustomDropDown getForeignCDD(String columnName) {
return ( (CustomDropDown) foreignCDDs. get (columnName) ) ;

}

public void setForeignCDD (String columnName, String sqlStr) {

US 7,885,981 B2
227 228

foreignCDDs. piywcolumnName, new CustomDrophiogs (ql $4 mE
}

public CustomDropDown getPrimaryCDD() {
return (primaryCDD);

}

public void setPrimaryCDD(String sglStr) {
primaryCDD=new CustomDropDown(sqliStr);
}

public void addFormattedField(String field) {
formattedFields.add(TableDescriptorDisplay.getFormattedLabel (field) );

}

public void addDisplayField(String field)
throws SQLException

// normalize field
String fieldUpper = field.toUpperCase();

// shouldn't already exist in the displayFields vector
if (displayFields.indexOf(fieldUpper) != -1) {

return;

}

// must be a valid field in the table

int index=0;

if ((index=findColumnName (fieldUpper)) == 0) {
return;

}

// must be writable
if ('rsmd.isWritable(index)) {
return;

}

// now we can add it
displayFiclds.add(fieldUpper);

public String getFormattedField(int index) {
return ( (String) formattedFields.elementAt (index) );?

}

public String getDisplayField(int index) {
_ return ( (String) displayFields,elementAt (index) );
}
public boolean isFormattedField(String formattedField) {
return (formattedFields.contains (formattedField) );

}

public boolean isDisplayField(String displayField) {
//normalize displayField
String displayFieldUpper=displayField.toUpperCase();

US 7,885,981 B2
229 230

return (display@Welds. contains (displayFiel upper). af
}

public void clearFormattedFields() {
formattedFields=new Vector();
}

public void clearDisplayFields() {
displayFields=new Vector();
}

public Enumeration formattedFields() {
return (formattedFields.elements ())7

)

public Enumeration displayFields() {
return (displayFields.elements());
}

public String removeFormattedField(int index) {
return ( (String) formattedFields. remove (index) );

}

public String removeDisplayField(int index) {
return ((String)displayFields.remove (index) );
}

public void addConstraintField(String field)
throws SQLException

{
// normalize field
String fieldUpper=field.toUpperCase();

// shouldn't already exist

if (constraintFields != null &&
constraintFields.indexOf (fieldUpper) != -1)
{
return;

// must be a valid field in the table
if (findColumnName (fieldUpper) == 0) {
return;

}

// must be in the display vector

if (displayFields.indexOf(fieldUpper) == -1) {
return;

}

if (constraintFields == null) {

constraintFields=new Vector();
}
constraintFields.addElement (fieldUpper) ;
}

public String getConstraintField(int index) {
return (

US 7,885,981 B2
231 232

(constrain®Welds==null)?
null:
(String) constraintFields.elementAt (index)

public boolean isConstraintField(String constraintField) {
//normalize constraintField
String constraintFieldUpper=constraintField.toUpperCase({);
return (constraintFPields.contains (constraintPieldUpper) );

}

public void clearConstraintFields({) {
if (constraintFields != null) {
constraintFields=new Vector ();

public Enumeration constraintFields() {
return ( .
(constraintFields==nulil)?
null:

constraintFields.elements ()

}

public void setDefaultConstraintFields ()
throws SQLException
{

if (getConstraintField(0) '= null) {
// constraintFields have already been set
return;

}

// this method will set constraint fields IF none

// have already been set according to the following:

ff} 1) If there are columns named: fixrst_name, middle_name,
/f and/or last_name they will all be added

/f 2) If any column ends with _name it will be added

f/f check for first, middle, and/or last:

boolean foundNamePart=false;

af (findColumnName ("FIRST NAME") != 0) {
addConstraintField ("FIRST NAME") ;
foundNamePart=true;

} .
if (findColumnName ("MIDDLE_NAME") t= 0) {
addConstraintField ("MIDDLE NAME") ;

foundNamePart=true;

}

if (findColumnName ("LAST_NAME") '= 0) {
addConstraintField("LAST NAME") ;
foundNamePart=true;

)

// if no name part was found, let's add the first column ending
// in _name .
if (!foundNamePart) {

US 7,885,981 B2
233 234

ResultSetMM@@eData rsmd=getMetaData() ;
String constraintFieldName;
for (int i=l; i<=rsmd.getColumnCount ();it+) {
if ((constraintFieldName=
rsmd.getColumnName (i)) .endsWith ("_NAME") )

addConstraintField(constraintFieldName);
break;

public String removeConstraintField(int index) {
return (
(constraintFields==null) ?
null:
(String) constraintFields. remove (index)

3

public ResultSetMetaData getMetaData() {
return (rsmd) ;
}

public int findColumnName (String name) throws SQLException {
for (int i=1l1;i<=<rsmd.getColumnCount ();it+) {
if (rsmd.getColumnName (i) .equalsIgnoreCase(name)) {
return (i);
}
}
return (0);

}

public void setDefaultFormattedFields()
throws SQLException
if
for (int i=1;i<=rsmd.getColumnCount ();it++) {
if (rsmd.isWritable(i)) {
addFormattedField (rsmd.getColumnName (i));

}

public void setDefaultDisplayFields ()
throws SQLException
{
setDefaultDisplayFields (TableDescriptor.DisplayAllWritable) ;

public void setDefaultDisplayFields (int mode)
throws SQLException
{
for (int i=1;i<=rsmd.getColumnCount ();itt+) {
if (rsmd.isNullable(i) != ResultSetMetaData.columnNullable &&
rsmd.isWritable(i))

US 7,885,981 B2
235 236

addDisp WWField(rsmd.getColumnName ([} fF ”

}

else if (mode == TableDescriptor.DisplayAllWritable &&
rsmd.isWritable (i) )

addDisplayField(rsmd.getColumnName (i) );

}

public TableDescriptor putConstraintForview (String columnName,
TableDescriptor td)
throws SQLException

String columnNameUpper=columnName. toUpperCase ();

if (constraints == null) {
constraints = new Hashtable();
}
return ( (TableDescriptor) constraints.put (columnNameUpper, td) );
}

public TableDescriptor putConstraint (String columnName,
TableDescriptor td)
throws SQLException

// normalize columnName
String columnNameUpper=columnName.toUpperCase ();

aint columnindex;
// Check to see if columnName exists
4f ((columnindex=findColumnName (columnNameUpper)) == QO) {
return(null);
}
// Make sure it is in the displayFields
if (displayFields.indexOf(columnNameUpper) < 0) {
return (null);
}
// Make sure that the key field exists and type matches
String foreignKeyField=td.getKeyField();
if (foreignKeyField == null) {
return(null);
}
aint foreignColumnindex=td. findColumnName (foreignKeyField);
int foreignColumnType=
td.getMetaData () .getColumnType (foreignColumnindex);
int columnType=rsmd.getColumnType (columnindex) ;
Af (columnType != foreignColumnType) {
return (null);

}

if (constraints == null) {
constraints = new Hashtable ();
}
//setDefaultConstraintFields (td);
return ( (TableDescriptor) constraints .put (columnNameUpper, td) );

US 7,885,981 B2
237

238

public TableDescM@M@tor getConstraint (String PoLorNeid MT:

//normalize columnName

String columnNameUpper=columnName.toUpperCase ();

return (
(constraints==null)?
null:

(TableDescriptor) constraints.get (columnNameUpper)

}

public TableDescriptor removeConstraint (String columnName) {

//normalize columnName

String columnNameUpper=columnName.toUpperCase ();

return ((TableDescriptor) constraints .remove (columnNameUpper) );

}

public Enumeration constraintKeys() {
return(constraints.keys())?

public Enumeration constraintBlements() {
return (constraints.elements());

}

public String getNullableString(int isNullable)

{

iff (isNullable == ResultSetMetaData.columnNullabile) {

return ("columnNullable");
}

else if (isNullable == ResultSetMetaData.columnNoNulls) {

return ("columnNoNulls");

}

else if (isNullable == ResultSetMetaData.columnNullableUnknown)

return ("columnNullableUnknown");

}
else {
return("Invalid isNullable value");

}

class MetaData implements ResultSetMetaData, java.io

private int columnCount;

private String[{] catalogNames;
private String[{] columnClassNames;
private int[] columnDisplaySizes;
private String[] columnLabels;
private String[] columnNames;
private int[] columnTypes;

private String[] columnTypeNames;
private int[] precisions;

private int[] scales;

private String[] schemaNames;
private String{] tableNames;
private boolean[) isAutoIncrements;
private boolean[] isCaseSensitives;
private boolean[) isCurrencies;

private boolean[) isDefinitelyWritables;

.Serializable

{

US 7,885,981 B2
239 240

private int{] Wrouiiaples;
private boolean[] isReadOnlys;
private boolean[]) isSearchables;
private boolean[] isSigneds;
private boolean[] isWritables;

public MetaData (ResultSetMetaData rsmd) {
try f{
columnCount = rsmd.getColumnCount ();

catalogNames=new String[columnCount});
columnClassNames=new -String[columnCount];
columnDisplaySizes=new int [(columnCount]J;
columnLabels=new String[columnCount] ;
columnNames=new String[columnCount] ;
columnTypes=new intf{columnCount];
columnTypeNames=new String{columnCount);
precisions=new int[{columnCount];
scales=new int[columnCount];
schemaNames=new String[columnCount];
tableNames=new String[columnCount];
isAutoIncrements=new boolean[{columnCount] ;
isCaseSensitives=new boolean[columnCount]);
isCurrencies=new booleanfcolumnCount];
isDefinitelyWritables=new boolean[columnCount];
isNullables=new int [{columnCount);
isReadOnlys=new boolean[columnCount];
isSearchables=new boolean[columnCcunt);
isSigneds=new boolean[columnCount];
isWritables=new boolean[columnCount]);

for (int i=O;i<columnCount;itt+) {

catalogNames [i}=rsmd.getCatalogName (i+1);
columnClassNames (i]="dunno";
//fpuggy bitch!
//rsmda.getColumnClassName (i+1);
columnDisplaySizes[ijJ=rsmd.getColumnDisplaySize (itl);
columnLabels[i])=rsmd.getColumnLabel (i+1);
columnNames [i]=rsmd.getColumnName (i+1);
columntypes [ijJ=rsmd.getColumntType (i4+1);
columnTypeNames [ijJ=rsmd.getColumnTypeName (i+1);
precisions [iJ=rsmd.getPrecision(itl);
scales[i]J=rsmd.getScale (itl);
schemaNames [iJ=rsmd.getSchemaName (i+1);
tableNames [iJ=rsmd.getTableName (itl);
isAutoiIncrements [iJ=rsmd.isAutoIncrement (i+1);
isCaseSensitives {il=rsmd.isCaseSensitive (itl);
isCuyrencies[i]=rsmd.isCurrency (itl);
isDefinitelyWritables[iJ=rsmd.isDefinitelyWritable (it+1);
isNullables[(iJ=rsmd.isNullable(itl);
isReadOnlys[(iJl=rsmd.isReadOnly(i+1);
isSearchables[i)=rsmd.isSearchable (itl);
isSigneds[{iJ=rsmd.isSigned(i+l);
isWritables[iJ=rsmd.isWritable(id41);
}
} .
catch (SOLException sqle) {

US 7,885,981 B2
241 242

sqle.pxrMM@StackTrace({);

}

public int getColumnCount() {
return (columnCount);

}

public String getCatalogName (int index) {
return (catalogNames[index-1]);

}

public String getColumnClassName(int index) {.
return (columnClassNames [index-1]);

}

public int getColumnDisplaySize(int index) {
return (columnDisplaySizes [index-1]);

}

public String getColumnLabel (int index) {
return (columnbabels[index-1)]);
}

public String getColumnName (int index) {
return (columnNames [index-1]});

}

public int getColumnType (int index) {
return (columntTypes [index-1]);
}

public String getColumnTypeName (int index) {
return (columnTypeNames [index-1]);

}

public int getPrecision(int index) {
return (precisions [index-1]);

}

public int getScale(int index) {
return (scales [(index-1]});

}

public String getSchemaName(int index) {
return (schemaNames [index-1});

}

public String getTableName (int index) {
return (tableNames [index-1]);
}

public boolean isAutoIncrement (int index) {
return (isAutoIncrements [index-1));
}

public boolean isCaseSensitive(int index) {
return (isCaseSensitives [index-1});

US 7,885,981 B2
243 244

}

public boolean isCurrency(int index) {
return (isCurrencies {index—-1});

}

public boolean isDefinitelyWritable (int index) {
return (isDefinitelyWritables [index-1]);

}

public int isNullable(int index) {
return (isNullables[index-1]);

}

public boolean isReadOnly(int index) {
return (isReadOnlys (index-1]J);

}

public boolean isSearchable(int index) {
return (isSearchables [index-1]);

}

public boolean isSigned(int index) {
return (isSigneds [index-1]);

}

public boolean isWritable(int index) {
return (isWritables [index-1]);
}
}

private void outputInfo(String infoStr) {
try {
if (Debuq.areDebugging) {
Debug. doLog (infoStr, Debug. INFO);
}
2£ (out f= null) {
out.printin(infoStr);
out. flush();
}
}
catch (IOException ioe) {
ioe.printStackTrace ();

}

Schemalive/WEB-INF/classes/dbUtils/ViewGenerator. java

//f $Revision: 2.3 §$
// $Date: 2001/10/30 01:35:53 §$

package dbUtils;
import java.io.*;

import java.sql.*;
import java.util.*;

US 7,885,981 B2
245 246

import common. *;

import javax.servlet.jsp.*;

//import dbPoolUtils.*;

public class ViewGenerator {
public static final String version_dbUtils ViewGenerator_java =
"$Revision: 2.3 $";

public static final int MaxNameLen = 30;

Private TableDescriptor td;
private StringBuffer columnList = new StringBuffer ();

private StringBuffer fromList = null;

private StringBuffer whereList = new StringBuffer ();
private StringBuffer orderByList = new StringBuffer();
private StringBuffer nextAlias = new StringBuffer ("A");
private StringBuffer firstAlias = new StringBuffer ();

private StringBuffer leftAlias = new StringBuffer();
private StringBuffer rightAlias = new StringBuffer({);

private boolean checkExist = false;
private JspWriter out = null;

private void outputinfo(String infoStr) {
try {
if (Debug.areDebugging) {
Debug.dobog (infoStr, Debug. INFO);
} .
if (out !'= null) {
out.printin(infoStr);
out.flush();

}
catch (IOException ioe) {
ioe.printStackTrace();

public ViewGenerator (TableDescriptor tdParm,JspWriter myOut) (
this (tdParm, true, false, myOut) ;
}

public ViewGenerator(TableDescriptor tdParm) {
this (tdParm,true, false,null);
}

public ViewGenerator (TableDescriptor tdParm, boolean executeSQL) {
this (tdParm, executeSQL, false,null);
}

public ViewGenerator (TableDescriptor tdParm,
boolean executeSQL, boolean myCheckExist,
JspWriter myOut)

out = myOut;
td = tdParm;

US 7,885,981 B2
247 248

checkExist = ™MheckExist;
fromList = new StringBuffer (td.getTable()+" A");

String qStxr="SELECT view_name FROM USER_VIEWS WHERE view_name = ‘"+
getViewName (td.getTable())+"' OR view _name = '"+td.getTable()4+"'";

if (checkExist) {

try {
Connection con = SQLUtil.makeConnection({);
Statement stmt = con.createStatement ();

ResultSet rs = stmt.executeQuery (qStr);
if (rs.next()) {
rs.close();

stmt.close();
con.close();
return;

}

else {
rs.close();
stmt.close();
con.close();?

}
catch (SQLException sqle) {
sqle.printStackTrace();

}

outputin£o("<blockquote>Generating view for table: "+td.getTable()+t
* named: “+getViewName (td. getTable())+"</blockquote>") ;

buildview ();

columnList=new StringBuffer (columnList.toString() .trim());
fromList=new StringBuffer (fromList.toString().trim());
whereList=new StringBuffer (whereList.toString().trim());
orderByList=new StringBuffer (orderByList.toString().trim());

if (executeSOL) {
executeViewSQL ();

public static String getViewName (String baseTable) {
String proposedName = baseTable+" VIEW";
proposedName = proposedName.substring (Math.max (0,
proposedName. length () -MaxNameLen) );
return (proposedName) ;

public String getViewSOL() {
return (getViewSQL (false) );

public String getViewSQL (boolean createView) {
String viewSOL="SELECT "+columnList+" FROM "+fromList;//+" WHERE
“"+whereList; .
if (whereList.length() > 0) {

US 7,885,981 B2
249 250

viewSQL+=""S@MERE “+whereList;

}

aif (createView) {
viewSQL="CREATE OR REPLACE VIEW "+getViewName (td.getTable())+" AS "+
viewSOL;

}

return (viewSQL) ;

private void executeViewSQL() {
try {
String viewSQL="CREATE OR REPLACE VIEW "+getViewName (td.getTable())+
" AS SELECT "+columnListt" FROM "+fromList;//+" WHERE "+whereList;
af (whereList.length() >0) {
viewSQL+=""WHERE "+whereList;
J

if (Debug.areDebugging) {

Debug.doLog("viewSOL: “tviewSQL, Debug. INFO) ;
}
Connection con SOLUtil-makeConnection();
Statement stmt = con.createStatement (});
stmt.executeQuery (viewSQL) ;
stmt.close();
con.close();

}

catch (SQLException sqle) {
outputInfo ("<blockquote><pre>"tsqlet"</pre></blockquote>");
sqle-printStackTrace ();

public static void main(String[] args) {
DataDictionary dd = DataDictionary.getinstance (args[0],arqgs[1]);
if ({args.length > 2) {
DataDictionaryTD ddtd=dd.getDataDictionaryTD (args [2])j;
if (ddtd != null) {
new ViewGenerator (ddtd);
}
else {
System.out.printin(args[{2]+" is a bad table name!");

}
else {
Set ddtdSet = dd.tables();
Object[] ddtdAry = ddtdSet.toArray();
for (int i=O;i<ddtdAry.length;it++) {
DataDictionaryTD ddtd=dd.getDataDictionaryTD(({(String) ddtdAry[i])};
ViewGenerator vg = new ViewGenerator (ddtqd);

private void buildView() {
Enumeration dfEnum=td.displayFields ();
while (dfEnum.hasMoreElements()) {
String columnName = (String) dfEnum.nextElement ();

US 7,885,981 B2
251 252

DataDictiom@=@™y dd =
DataDictionary.getInstance (td.getDatabase (),
td.getDBConnection());

TableDescriptor tdF = null;
String customColumnSQL = null;
TableDescriptor tdl = td.getConstraint (columnName) ;
if (tdl != null) {
tdF = dd.getDataDictionaryTD(tdl.getTable());

// check for custom column
CustomDropDown myCDD = td.getForeignCDD(columnName) ;
af (myCDD != null) {
customColumnSQL = myCDD.getSOLStr();
if (Debug.areDebugging) f{
Debug.doLog("Found custom column for "+
td.getTable()+"."+columnNamet+".", Debug. INFO);

}
TableDescriptor td2 = null;
if (columnName.endsWith ("ENTRY_DATE") || columnName.endsWith (
"LAST MODIFIED _DATE")) {
columnList.append ("TO CHAR(A."+columnNamet
") 'MM/DD/RRRR HH24:MI:SS") AS ");
columnList.append(columnNamet", “");
}
else if (columnName.endsWith(" DATE™)) {
columnList.append ("TO _CHAR(A."“+columnName+
",'MM/DD/RRRR') AS ");
columnList.append(columnNamet", ");
}
else if (columnName.endsWith("_FLAG")) {

columnList.append ("Show _Boolean(A."+columnName+") AS ")?
columnList.append (columnName.substring (0,
columnName.indexOf("_FLAG"})+", ")?
}
else if (customColumnSOL != null) {

// parse custoColumnmSQOL and add to columnList,
// fromList, whereList (and orderByList?)

// £ixrst, let's break it up
StringBuffer selectPart = new StringBuffer ();
StringBuffer fromPart = new StringBuffer ();
StringBuffer wherePart = new StringBuffer ();
StringBuffer orderByPart = new StringBuffer ()};
int begPart = customColumnSOL.indexoOf ("SELECT") +
"SELECT" .1length ();
int endPart = customColumnSOL.indexOf ("FROM");
selectPart.append(customColumnSQOL. substring (
begPart, endPart) .toUpperCase().trim());
begPart = endPart+"FROM".length ();
endPart customColumnSQL. indexOf ("WHERE");
if (endPart > begPart) {
fromPart.append (customColumnSQhL.substring (begPart,
endPart) .toUpperCase() .trim());
begPart = endPart+"WHERE”.length();
endPart =. customColumnSQL-.indexOf ("ORDER BY");

US 7,885,981 B2
253 254

if (@Meart > begpart) {
wherePart .append (customColumnsSOL. substring (begPart,
endPart) .toUpperCase()-trim());
begPart = endPart+"ORDER BY".length();
orderByPart. append (customColumnSOL. substring (
begPart) .toUpperCase().trim())7
}
else {
wherePart.append(customColumnSQL. substring (begPart).
toUpperCase() .trim());

}
else {
endPart = customColumnSQL.indexOf ("ORDER BY");
if (endPart > begPart) {
fromPart.append (customColumnSQL. substring (begPart,endPart) .
toUpperCase().trim());
begPart = end@Part+"ORDER BY".length(); :
orderByPart.append (customColumnSOL. substring (begPart) -
toUpperCase().trim())7
}
else {
fromPart.append (customColumnSOL. substring (begPart).
toUpperCase().trim());

if (Debug.areDebugging) {
Debug .doLog ("ViewGenerator.selectPart (324):
"+selectPart, Debug.INFO});

Debug .doLog("ViewGenerator.fromPart (325): "+fromPart, Debug.
INFO) ;

Debug.doLog("ViewGenerator.wherePart (326): "+wherePart, Debug.
INFO) ;

}

// now we need to map aliases
Hashtable aliasMap=new Hashtable ();

int prevComma = 0;
int curComma = 0;
String fromString = fromPaxrt.toString().trim()4+","%

while (0 < (curComma=fromString.indexOf(',',pxrevComma))) {
String keyAlias=null;
StringTokenizer st = new StringTokenizer (fromString.substring (
prevComma, curComma) );
while (st.hasMoreTokens()) {
keyAlias=st.nextToken ();
}
if (!aliasMap.containsKey(keyAlias)) {
aliasMap.put (keyAlias,"");
}
prevComma=curCommatil;
}

// now we can replace aliases in the different parts
//Enumeration-aliasEnum = aliasMap.keys();
Set aliasKeySet = aliasMap.keySet();

US 7,885,981 B2
255 256

object (MMliasKeyArray = aliasKeySepn poArray (}
Arrays.sort (aliasKeyArray); :

for (int 43=0;j}<aliasKeyArray.length;j+t+) {
String nAlias = getNextAlias().toString();
if (Debug.areDebugging) {
Debug.doLog ("ViewGenerator (339) - origAlias
([3]+
"maps to "+nAlias, Debug. INFO) ;

"taliasKeyArray

}
aliasMap.put (aliasKeyArray[j],nAlias);

}

StringBuffer[{] partAry=new StringBuffer{2);
partAry[0]=selectPart;
partAry[1)=wherePart;
for (int j=aliasKeyArray.length-1;j>=0;j--) {
String keyAlias = (String) aliaskKeyArray([31];
String valueString = (String) aliasMap.get (keyAlias) ;
for (int i=0;i<partAry.length;it++) {
int dot=0;
while (0 <=
(dot=partAry [i] .toString () .indexOf (keyAlias+".",dot))) {

if (Debug.areDebugging) {
Debug.doLog ("About to replace: “4+partAry[i].toString

() substring (dot,dot+1)+" with: “+valueString, Debug.
INFO);
}

partAry([i].replace (dot, dot+keyAlias-.length(),valueString

a
dott=valueString.length()+1;

}

// convert any INNER JOINs to OUTER JOINs...
int startJoin = 0;

int endJoin = wherePart.toString().indexOf("AND", startJoin);
while (O <= endJoin) { , .

String joinPart = wherePart.substring(startJoin, endJoin);

int equalSign = joinPart.indexOf ("=");

if ((@oinPart.indexOf(".") < equalSign) &&
(joinPart.lastIndexOf(".") > equalSign) &&
(joinPart.indexOf("(+)") == -1))

{
wherePart.insert(endJoin, "(+) "“);

endJoin += 4;

}
startJoin = endJoin + 3;
endJoin = wherePart.toString().indexOf("AND", staxrtdJoin);

if (startJoin < wherePart.length()) {

String joinPart = wherePart.substring(startJoin):
int equalSign = joinPart.indexOf ("=");
if ((joinPart.indexOf(".") < equalSign) «&&

(joinPart.lastIndexOf(".") > equalSign) &&
(joinPart.indexoOf ("(+)") == -1))

US 7,885,981 B2
257 258

wherePart.append(" (+)");

)

//f/ need to replace aliases in fromPart
fromPart=new StringBuffer (fromPart.toString().trim());

for (int j=aliasKeyArray.length-l;j>=0;j--) {

String keyAlias= (String) aliasKeyArray[}j]?

String valueStrings (String) aliasMap. get (keyAlias);

int preComma=0;

int postComma=0;

while (0 <= (postComma=fromPart.toString().indexOf(",',

precomma))) {
// find space before alias
int aliasLoc=fromPart.toString().substring (preComma,
postComma) .lastIndexOf(" "+keyAlias)+1;

if (aliasLoc > 0) {
fromPart.replace (aliasLoc+preComma,
aliasLoct+l+preComma, valueString) ;

}
preComma=postCommat+valueString.length()+1; // skip space

// get the last one
int aliasLoc=fromPart.toString().substring (preComma) .
lastiIndexOf(" "+keyAlias)+1; ,
if ({aliasLoc > 0) {
fromPart.replace (aliasLoc+preComma,aliasLoct+tpreCommatl,
valueString);

if (Debug.areDebugging) {
Debug .doLog ("ViewGenerator.selectPart (423):
"+selectPart, Debug. INFO);

Debug .doLog ("ViewGenerator.fromPart (424): “+fromPart, Debug.
INFO) ;

Debug .doLog ("ViewGenerator.wherePart (425): “+wherePart, Debug.
INFO) ;

)

// need to strip first column out of selectPart

// this is key that will give us the right match

// for each record

int comma = selectPart.toString()-.indexOf(',');

String keyPart = selectPart.toString().substring(0,comma);
selectPart.delete (0,commatl);

/f/ need to kill AS if it exists

int as = selectPart.toString().indexOf ("AS ")j

if (as > 0) {
selectPart=new StringBuffer (selectPart.toString (}.substring(0,
as));

}

// lop key off column name

int key = columnName.indexOf ("_KEY");

US 7,885,981 B2
259 260

select PSR .append(" AS "+
((key>0) 2?columnName.substring (0,key) :columnName) );

columnList.append(" "+selectPart+", ");

fromList.append(", "+fromPart);

whereList.append(" “+wherePart) 7

whereList.append(" AND A."“+columnName+" = "+keyPart+" (+) AND ");
}
else if (tdi != null) {

// look for custom column information

boolean foundName = false;

StringBuffer joinBuffer = new StringBuffer ();
try {

firstAlias = new StringBuffer (getNextAlias().toString());
rightAlias = new StringBuffer("");

while (!foundName) { .
ResultSetMetaData rsmdl = tdl.getMetaData();
for (int i=l; i <= rsmd1l.getColumnCount(); itt) {
if (xsmd1.qgetColumnName (i) -endsWith("_NAME") ) {
foundName = true;
break;
}
}

if ('foundName) {
String qStr="SELECT a.table_name, "+
"b.column_name FROM “+
“user constraints a, user_cons_columns b, “+
"user constraints c, user _cons_columns d "+

“WHERE. "+

"a.constraint_type='P' AND "+

"c.constraint_type='U'! "+

"AND c.table name ='"+tdl.getTable()+"' AND "+

"c.constraint_name = d.constraint_name AND "4+

“b.column_name = d.column_name AND “+

"b.constraint_name = a.constraint_name";
Connection con = SQOLUtil.makeConnection();
Statement stmt = con.createStatement();

ResultSet rs = stmt.executeQuery(qStr);
if (rs.next()) {
String tableName=rs.getString(1);
String keyFieldName=rs.getString (2);

td2=dd.getDataDictionaryTD(tableName) ;

fromList.append(", "“+tdl.getTable()+" "+
(leftAlias = ((rightAlias.length() == 0)?
firstAlias:rightAlias)));

whereList.append (leftAlias+","+keyFieldName+
"= "“+(rightAlias = getNextAlias())+"."+
td2.getKeyField()+" (+) AND "

}

US 7,885,981 B2
261 262

tdi=dd. getDataDictionarpypitd2 -qeG2g (1,0 4
}
else {

xrs.close()i

stmt.close();

con.close();
break;
}

rs.close();
stmt.close();

con.close ();

}

// now I am at a TD that has _NAME field(s)
boolean foundNamePart=false;

if

if

(tdl.findColumnName ("LAST NAME") != 0 &&
tdl.findColumnName ("FIRST NAME") ! 0 &&
td1.findColumnName ("MIDDLE NAME")

columnList.append ("Formatted _Name("+tnextAliast
"l."4+tdl.getKeyField()+") AS ");

int keyIndex=columnName.indexOf ("_KEY");

if (keyIndex >= 0) {
columnList.append(columnName.substring (0, keyIndex)+
", ")2

}

else {
columnList.append(columnNamet",");

} .

fromList.append(", "4+tdl.getTable()+" "+tnextAlias);

whereList.append("A."4+columnName+" = “+firstAliast" ."+
tdF.getKeyField()+" (+) AND ");

foundNamePart=true;

(!foundNamePart) {
ResultSetMetaData rsmd=tdl.getMetaData();
for (int i=1;i<=rsmd.getColumnCount();itt+) {
if (rsmd.getColumnName (i) .endsWith ("_NAME")) {
String localColumnName =
rsmd.getColumnName (i) .substring(0,
xrsmd.getColumnName (i) .indexOf ("_NAME") );7
int keyIndex = columnName.indexOf ("_KEY") ;
String asName = (keyIndex > 0)?
columnName. substring (0, keyIndex) :
columnName; :
columnList.append (nextAliast+"."+
rsmd.getColumnName (i)+" AS "4+
asNamet", ."
7
fromList.append(", “+tdl.getTable()+" "“+nextAlias);
whereList.append("A."+columnName+" = "+
firstAliasi"."+
tdF.getKeyField()+
" (+) AND "

US 7,885,981 B2
263 264

7
orderByList .append (localtcoluninNameys?
foundNamePart=true;

break;

}
if (!foundNamePart) {
columnList.append("A."+columnName+", ");

}
catch (SQLException sqle) {
sqle.printStackTrace ();

}
else [{
columnList.append("A."+columnNamet", ");

Lf (Debug.areDebugging) {

Debug.doLog ("ViewGenerator.columnbist (586):

"+columnList, Debug.INFO);

Debug .doLog ("ViewGenerator.fromList (587): “+fromList, Debug. INFO);
Debug .doLog ("ViewGenerator.whereList (588): "+twhereList, Debug.INFO);

columnList.delete(columnList.length()-2, columnList.length());
if (whereList.length() > 4)

whereList.delete (whereList-length()-5, whereList.length()}-1);

.

private StringBuffer getNextAlias() {
int stub = nextAlias.length()-1;
char lastChar[] = { nextAlias.charAt (stub) };

if (lastChar [0]

== 'Z")
nextAlias.replace (stub, stubtl, "AA");

else {

lastChar[O)++;
nextAlias.replace (stub, stubtl, new String(lastChar));

return (nextAlias);

Schemalive/WEB-INF/classes/HIMLUtils/Balloon.java

// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 $

package HTMLUtils;

import
import
import

import

java.io.*;
java.sqi.*;
java.util.*;

common. *?

US 7,885,981 B2
265 266

import javax.servleWW) sp.*;
public class Balloon implements java.io.Serializable {

public static final String version_HTMLUtils Balloon_java =
"SRevision: 2.3 $";
private static JspWriter out=null;

private Stxring id;
private String msg;
private int bSize;

public Balloon(String myiId,int myBSize,String myMsg) {
this (myId,myBSize,myMsg,null);
}

public Balloon (String myid,int myBSize,String myMsg,JspWriter myOut) {
id=myId;
bSize=myBSize;
msg=myMsg;
out=myOut;

outputinfoa ("Creating balloon with id: "+id+", bSize: "+bSize+
", msg: \n\t"+msg);

public String getID({}) {
return (id);
}

public int getBSize() {
return (bSize);
}

public String getMsg() {
return (msg);
}

private void outputiInfo(String infoStr) {
try {
if (Debuyg.areDebugging) {
Debug.doLog (infoStr, Debug. INFO);
}
i£ (out != null) ({
out.printin(infoStr);
out.flush();

}

catch (IOException ioe) {
ioe.printStackTrace();

Schemalive/WEB-INF/classes/HTMLUtils/BalloonHelp. java

// $Revision: 2.4 § ;
// $Date: 2001/10/30 08:26:33 $

US 7,885,981 B2
267 268

package HTMLUtils;

import java.io.*;

import java.sqli.*;

import java-.util.*;

import common.*;

import javax.servlet.jsp.*;
amport java.sql.*;

import dbUtils.*;

public class BalloonHelp implements ‘jjava.io.Serializable {

public static final String version_HTMLUtils_ BalloonHelp java =
"SRevision: 2.4 $"; ,

private static BalloonHelp instance;
private static JspWriter out = null;
private static boolean rebuild = false;

private static Hashtable balloonNavHash=new Hashtable();
private static Hashtable balloonTableHash=new Hashtable ();

private static String saveFile="BalloonHelp.save";

private BalloonHelp() {
anit ()3.

public static BalloonHelp refreshinstance (JspWriter myOut) {
out = myOut;
return (refreshiInstance());

public static BalloonHelp refreshInstance() {
rebuild=true;
return (getInstance());

}
public static synchronized BalloonHelp getiInstance() {
af (instance == null {{ rebuild) {
instance = new BalloonHelp();

rebuild=false;
}

return (instance);

private void init() {
/f Check to see if serialization file exists
FileInputStream filIn=null;
ObjectInputStream objIn=nuli;
try {
if (rebuild) {
thxow new FileNotFoundException();
}
filIn=new FileInputStream(saveFile);
objin=new ObjectInputStream(fillIn);
balloonNavHash= (Hashtable) objIn. readObject ();

US 7,885,981 B2
269 270

balloonTabWiash= (Hashtable) objin. readQbjre ct iL
objIn.close();
return;

}

catch (FileNotFoundException fnfe) {
outputiIn£o("<b>About to build BalloonHelp</b><br>");
buildBalloonHelp ();
this.serialize();

}

catch (IOException ioe) {
ioe.printStackTrace();

}

catch (ClassNotFoundException cnfe) {
enfe.printStackTrace();

private void serialize() {
ObjectOutputStream objOut=null;
FileOutputStream filOut=null;

try {
filOut = new FileOutputStream(saveFile);
objOut = new ObjectOutputStream(filOut) ;

objOut.writedObject (balloonNavHash);
objOut .writeObject (balloonTableHash) ;
objOut.flush();
objOut.close();

}

catch (IOException ioe) {
ioe.printStackTrace();

public Balloon getNavBalloon(String id) {
return ( (Balloon) balloonNavHash.get (id) );
} .

public Enumeration getNavBalloonIDs() {
return (balloonNavHash.keys ());

}

public Balloon getTableBalloon(String id) {
return ( (Balloon) balloonTableHash.get (id) );
}

public Enumeration getTableBalloonIDs() {
return (balloonTableHash.keys());
}

private void buildBalloonHelp() {
Connection con=null;
Statement stmt=null;
ResultSet rs=null;
try {
con = SQLUtil.makeConnection();
stmt = con.createStatement ();

}

US 7,885,981 B2

271 272
// get nav first
String qStr = "SELECT Help Object Name, PopUp Text FROM HELP_OBJECT "
+

tw

wv

;

"WHERE UPPER(Help_Object_Name) NOT LIKE '%.ASP

rs = stmt.executeQuery (qStr);
Balloon b=nuli;

outputInfo ("<blockquote>");
while (rs.next()) {

String id=rs.getString (1);
String tip=rs.getString (2);

if (id != null && tip != null) {
// nav
outputInfo("Creating nav balloon: “+id+" - "+tip+"<br>");

b = new Balloon (id,150,tip);
balloonNavHash.put (b.getID(),b);

xrs.close();

qstr =

"SELECT Help Schema_Table, Help _Schema_Column, PopUp Text FROM
HELP SCHEMA";

rs = stmt.executeQuery(qStr);

while (rs.next()) {
String idTable=rs.getString(1);
String idColumn=ers.getString (2);
String tip=rs.getString (3);

if (idTable != null && idColumn != null && tip != null) {
// data
outputiInfo("Creating data ballon: "+idTable.toUpperCase()t"."+
idColumn. toUpperCase ()+
- "+tipt+"<br>");
b = new Balloon (idTable. toUpperCase()+"."+idColumn.toUpperCase
(),150,tip);
balloonTableHash.put (b.getID()},b);

"

outputinfo ("</blockquote>");

catch (SQLException sqle) {

)

sqle.printStackTrace();

finally {

try {
rs.close();
stmt.close();
con.close();

}

catch (SQLException sqle) {
sqle.printStackTrace();

US 7,885,981 B2
273 274

}

private void outputiInfo(String infoStr) {
try {
if (Debug.areDebugging) {
Debug.doLog (infoStr, Debug. INFO) ;

}

if (out != null) {
out.printin(infoStr);
out.flush()7

}
catch (IOException ioe) f{
ioe.printStackTrace ();7
}

Schemalive/WEB-INF/classes/HTMLUtils/TableDescriptorDisplay.Jjava

// $Revision: 2.5 §$
f/f $Date: 2001/10/30 08:26:33 §$

package HTMLUtils;
import java.io.*;

import dbUtils.*;
import sessionUtils.*;

import java.sql.*;
import jJava.util.*;

import common.*;
//import dbPoolUtils.*;
public class TableDescriptorDisplay [

public static final String version_HTMLUtils TableDescriptorDisplay java =
"SRevision: 2.5 $";

public static final int AllUpper=1;

public static final int ForURL = 0;
public static final int ForForm = 1;
public static final int ForJavaScript = 2;

public static String getDisplayLabelView (TableDescriptor td,
String column)

{
int index=0;
StringBuffer displayLabelUpper=null;
ResultSetMetaData rsmd=null;

try {

US 7,885,981 B2
275 276

index=td. fWMicolumnName (column) ;

rsmd=td.getMetaData ();

displayLabelUpper=new StringBuffer (rsmd.getColumnName (index) );
}
catch (SQLException sqle) {

sqle.printStackTrace();
}

// does it exist?
if (index == 0) {
return (null);

return (getDisplayLabel (displayLabelUpper.toString()});

public static String getDisplayLabelEdit (TableDescriptor td,
String column,
String htmlElement,
LinkedList sessionStack,
String unqStr,
Integer usersKey,
Connection con)
throws SOLException

boolean keyField = false;
if (td.getKeyField() != null «&& td.getKeyField().toUpperCase () .equals(
column)) {
keyField = true;
}

int columnindex = -1;
try {
column index=td. findColumnName (column) ;
}
catch (SQLException sqle) {
sqle.printStackTrace();
}

StringBuffer displayLabel=
// new StringBuffer (getDisplayLabelView (td, column) );
new StringBuffer (td.getFormattedField (columniIndex-1));

/*
if (keyField) {
int numIndex=displayLabel.toString().lastIndexOf(" Number") ;
Lf (numIndex >= 0) {
displayLabel=new
StringBuffer (displayLabel.toString() .substring (0,numindex) +"
Key");

}
*/

ResultSetMetaData rsmd=td.getMetaData();

// deal with Required fields

US 7,885,981 B2
277 278

try {
if (csmd.isNullable(columnindex) !=
ResultSetMetaData.columnNullabie) {
displayLabel.insert (0,"<b>");
displayLabel.append ("</b>");

}

catch (SQLException sqle) {
sqle.printStackTrace (}7

}

// Deal with constraint fields
TableDescriptor tdl=null;

BalloonHelp bh=BalloonHelp.getiInstance ();
Balloon b=null;

if ((tdl=td.getConstraint (column)) != null) {
int numIndex=displayLabel.toString().indexOf(" Number");
if (numIndex >= 0) { .
displayLabel.delete (numIndex," Number". length () tnumindex) 7
}

aif ((((StackElement) sessionStack.getLast ()).getMasterColumn () ==
null) li
(! ((StackElement) sessionStack.getLast({)).getMasterColumn().equals
(column) ))

Statement sfmt=null;
ResultSet sf=null;

try {
simt = con.createStatement (ResultSet .TYPE_SCROLL_INSENSITIVE,
ResultSet.CONCUR READ ONLY);
sf = sfimt.executeQuery (
"SELECT "+

" DECODE (MAX (ABS (Can_Edit_ Flag)), NULL, 0,
MAX (ABS (Can_Edit_Flag))) AS Can Edit Flag, "+

" DECODE (MAX (ABS (Can_Add_Flag)), NULL, 0,
MAX (ABS (Can_Add_Flag))) AS Can_Add_Flag woe

"FROM “+

wad " PEOPLE, STAFF, USERS,
SECURITY_GROUP_USER, SECURITY_GROUP_TABLE, SECURITY_TABLE
wy

" PEOPLE, USERS, SECURITY _GROUP_USER,
SECURITY_GROUP_TABLE, SECURITY_TABLE “+

“WHERE "+

“" PEOPLE.Active_ Flag <> 0 AND "+

ff "  PEOPLE.People Key = STAFF.People_ Key AND "+
// "  STAFF.Staff_Key = USERS.Staff_Key AND "+

"PEOPLE. People_ Key = USERS.People_ Key AND "+
"USERS .Users Key = SECURITY_GROUP_USER.Users_Key AND "+

" : -SECURITY_GROUP_USER.Security Group Key =
SECURITY _GROUP_TABLE.Security Group_Key AND "+

US 7,885,981 B2
279 280

" SECURITY GROUP_TABLE.Security Table Key =
SECURITY _TABLE.Security Table Key AND "+

" SECURITY _TABLE.Security Table Name = '"+td1.
getTable()+™"' AND "4+
" SECURITY GROUP_USER.Users_Key = "+usersKey

i
sf.next();

b = bh.getNavBalloon("drillLink");

if (sf£.getBoolean(1) || sf.getBoolean(2)) {
displayLabel.insert (0,
"<A HREF=\""+
"Javascript:holdForPickList('"+

tdl.getTable()+"',"+htmlElement+", "4+

ungStrt™")\" "+

((b != null)?
“onMouseOver=\"setHang('"+b.getID({)+
“',event, this, 'dataLink'); "4

"return true;\" onMouseOut=\"clearHang(); return
true; \" "4+
"onClick=\"clearHang(); return true;\"

we

d+

ws uw
);
displayLabel.append("</A>");

}

catch (SQLException sqle) {
sqle.printStackTrace();
throw sqle;

}

finally {
try {
if (sf t= null)sf.close();
if (sfimt !=.null)sfmt.close();

}
catch (SQLException sgle) {
sqle.printStackTrace();

}
}

/*
if (((StackElement) sessionStack. getLast ()) .gqetMastexColumn ()
null) {
displayLabel.insert(0,"<A HREF=\""4+
"Javascript :holdForPickList ('"+
tdl1l.getTable()+"',"+htmiElementt", "+
ungStrt+
Ny \">t
dF
displayLabel .append("</A>");

It
il

}

else if

US 7,885,981 B2
281 282

(i ((StackEMMent) .
sessionStack.getLast ()).getMasterColumn().equals({column)) {
displayLabel.insert(0,"<A HREF=\""4
"Javascript :holdForPickList ('"+
tdl.getTable ()+"', "thtmlElement+", "+
ungStrt+
"y \t>"
dV;
displayLabel.append("</A>") ;
}
*f
}
b=bh.getTableBalloon (td.getTable().toUpperCase()+"."+column.toUpperCase
Ode

if (b t= null) {
displayLabel.insert(0,
"<A HREF=\"\" onClick=\"processAsterisk(); return false;\" "+

"CLASS=\"isTip\" "+

“onMouseOver=\"setHang ('"+b.getID()+

"* event,this, 'databink'); return true;\" "+
"onMouseOut=\"clearHang(); return true;\" "+
"><sup><font size=+1>*</font></sup></A>"

)
return (displayLabel.toString());

}

public static String getFormattedLabel (String label) {
StringBuffer retLabel=néew StringBuffer (qetDisplayLabel (label) );
// €ind all occurences. of customCaps

for (int i=0;i<CustomCaps.customCaps.length;itt+) {
aint customLoc=0;
// Check startsWith
if (retLabel.toString() .toUpperCase().startsWith (
(CustomCaps.customCaps[i]+" ") .toUpperCase()))

retLabel.replace(0,
CustomCaps.customCaps [i].length(),
CustomCaps.customCaps [i]);
customLoc+=CustomCaps.customCaps [i] .length();

}

// Check within

while ((customLoc=retLabel .toString() .toUpperCase () .indexOf (
(" “+CustomCaps.customCaps[iJ+" ").toUpperCase (),
customLoc)) >= 0)

retLabel.replace (customLoctl,
customLoct+1+CustomCaps.customCaps [(iJ].length(),
CustomCaps.customCaps[i]);
customLoc+=CustomCaps.customCaps[i].length()+2;

// check for endsWith
if (retLabel.toString().toUpperCase() .endsWith (
(" "+CustomCaps.customCaps[i]) .toUpperCase()))

customLoc=retLabel.toString() .toUpperCase () .lastIndexoOf (
(" "+CustomCaps.customCaps [(i]) .toUpperCase());

US 7,885,981 B2
283 284

xetLabe@™@eplace (customLocti, .
customLoct+i+CustomCaps.customCaps[i].length(),
CustomCaps.customCaps[i]);

}
else if (retLabel.toString() .toUpperCase() .equals (
CustomCaps.customCaps [i] .toUpperCase()))}

return (CustomCaps.customCaps[i]);

}
return (retLabel.toString());

}

public static String getDisplayLabel (String label,int upper) {
String str=getDisplayLabel (label);
return (str.toUpperCase ());

}

public static String getDisplayLabel (String label) {
// check for _KEY
int underScore=label.lastindexOf("_KEY");
if (underScore >= 0) {
label=label.substring(0,underScore)+"_ NUMBER";

// Strip _ FLAG

underScore=label.lastiIndexoOf("_ FLAG");

if (underScore >= 0) {
label=label.substring (0,underScore);

//lowercase it
StringBuffer displayLabelLower=
new StringBuffer (label.toLowerCase ()); ‘

//ceplace all '_' with *' ' and capitalize first letter
displayLabelLower.setCharAt (0, label.charAt(0));
int underScorePos=0;

while ((underScorePos=label.indexOf("_",underScorePos)) >= 0) {
GdisplayLabelLower.setCharAt (underScorePos,' ');
underScorePostt;
if (underScorePos < label-length()) {

displayLabelLower.setCharAt (underScorePos,
label.charAt (underScorePos) );

}
return (displayLabelLower.toString(});

public static String getDisplayFieldKeyEdit (TableDescriptor td,
String column,
String doProcess,
String value,
LinkedList sessionStack,
Connection con)

String s=null;
if (doProcess.equals("search")) {

US 7,885,981 B2
285 286

s="<input MMhe-\""+td.getDatabase () +"_JniFt 4
"__ "+column.toUpperCase()+"\" type=\"text\">";
}

// else if (doProcess.equals("return") || doProcess.equals("edit")) {
else if ((((StackElement) sessionStack.getLast ()).qetFormValues ().size()
> 0) Il

doProcess.equals ("edit") )

s=value+"\n<input name=\""+td.getDatabase()+"_ "+
td.getTable()+"__ “+column.toUpperCase()+"\" type=\""+
"Nhidden\" value=\""4valuet"\">">;
}
else if (doProcess.equals("add")) [{
Object seqVal=null;
if (td.getTable() -equals("SYNCHED KEY TABLE")) {
if (((StackElement) sessionStack.getLast()).getMasterColumn() !=
null) {

seqVal=((StackElement)
sessionStack.get (sessionStack.size()-2)).getCurrentKey();

}
else {
String qStr="Select "+td.getTable()+"_SEQ.nextval from DUAL";
try {
/fboolean needToClose=false;
//DBConnectionManager connMgr=null;
if (con == null) {
/ *
DBConnectionManager.getInstance();
con=connMgr.getConnection (td.getDBConnection());
needToClose=true;
*/
}
Statement stmt=con.createStatement ();7
ResultSet rs=stmt.executeQuery (qStr);
rs.next();
seqVal=rs.getObject(1);
rs.close();
stmt.close();
/*
if (needToClose) {
connMgr.freeConnection (td.getDBConnection(), con);
}
x/
}
catch (SQLException sqle) [{
sqle.printStackTrace();
}
}
s=seqVval+"\n<input name=\""+td.getDatabase()+"_ "+
td.getTable()+"_ "4+column.toUpperCase()+"\" type=\""+
"hidden\" value=\""4+seqValt"\">";
} .
return(s);
}

public static String getDisplayFieldEdit (TableDescriptor td,String column,

US 7,885,981 B2
287 288

String doProcM@M, String value, LinkedList'gSs3i of § {WR chadddcb it to os”

//see if we are on the key field
AL (td.getKeyField() != null && td.getKeyField() .toUpperCase () .equals (
column.toUpperCase())) {

return (getDisplayFieldKkeyEdit (td, column, doProcess, value, sessionStack
,con) );

}

else {
return (gqetDisplayFieldNkeyEdit (td, column, doProcess, value,
sessionStack,con));

}

public static String getDisplayFiel dNKeyEdit (TableDescriptor td,
String column,
String doProcess,
String value,
LinkedList sessionStack,
Connection con)

int index=0;

try 1{
index=td.findColumnName (column) ;

}

catch (SQLException sqle) {
sqle.printStackTrace (}?

}
ResultSetMetaData rsmd=null;

// first, determine if the field is in the displayFields Vector
af (!'td.isDisplayField(column)) {
return (column+" not found");

}

// bet's see if it has a constraint
TableDescriptor tdl=td.gcetConstraint (column);

if (tdi != null) {
//puild picklist

return (buildPickList (column, td, tdl,doProcess, value, sessionStack, con)
Vi
}
else {
/fouild normal field
return (buildNormal (td, index, doProcess, value, sessionStack));

}

private static String buildNoxrmal(TableDescriptor td, int index,
String doProcess, String value,
LinkedList sessionStack)

StringBuffer sb=new StringBuffer ();

US 7,885,981 B2
289 290

BalloonHelp bWBalloonHelp.getInstance () ,,

try {
ResultSetMetaData rsmd = td.getMetaData()?;

String fieldName = rsmd.getColumnName (index);

int precision = rsmd.getPrecision (index) ;

int scale = rsmd.getScale (index);

int displaySize = rsmd.getColumnDisplaySize (index);
String type = rsmd.getColumnTypeName (index) ;

Balloon b = bh.getTableBalloon(td.getTable().toUpperCase()+"."+
fieldName .toUpperCase());

sb.append ("<input name=\""+td.getDatabase()+"_ "+
td.getTable()+"_ "4+fieldNamet+"\" ");

if (b!=nuli) {
sb.append ("onMouseOver=\"setHang('"+b.getID()+
"' event,this, 'dataTable'); return true;\" “+
"onMouseOut=\"clearHang(); return true;\" "+
"onClick=\"clearHang(); return true;\" ");

sb. append ("type=\"");

if (fieldName.endswWith(" FLAG")) {
sb.append("checkbox\" value=\"");

if ('doProcess.equals("search") &&
value != null &&
!'value.equalis("") &&
Integer.parseInt (value.trim()) != 0)

sb.append("1\" CHECKED>") ;

}

else if (doProcess.equals("search")) {
sb.append("NOT LIKE\" "+

(value != null &6&
value.equals ("NOT LIKE") ?"CHECKED":"")+
">Yes <input name=\""+
td.getDatabase()+"_ "+
td.getTable()+"_ "+fieldNamet
"\" type=\"checkbox\" value=\"LIKE\" "+
(value != null && value.equals ("LIKE") ?"CHECKED":"") +
"SNoO "
dF
}
else {

sb.append("1\">");

}
else if (type.equals ("NUMBER")) {
if (precision == 0) {
precision = 10;
}
sb.append("text\" maxlength=\""+precision+
"\" size=\""+precisiont"\" ");

US 7,885,981 B2
291 292

sb. aWEnd ("value=\""+valuet"\"> "ft

);
}
else if (type.equals ("VARCHAR2")) {

if (displaySize < 100) {
sb.append("text\" maxlength=\""+displaySizet"\" "+

"size=\""+ ((displaySize>60) ?60:displaySize)+"\" "
i
sb.append ("value=\""+processDoubleQuote (value) +"\">");
} ;

else {
sb=new StringBuffer ("<textarea name=\""+
td.getDatabase()+"_ "+
td.getTable()+"_ “+fieldNamet

"\" COLS=\"60\" ROWS=\"S5\" WRAP=\"SOFT\"
onBlur=\"validateTextarea (this, '"+
td.getFormattedField(index-1)+"',"+displaySize+")\" ”

if (b!=null) {
sb.append ("onMouseOver=\"setHang('"+b.getiID()+
"t event,this, 'dataTable'); return true;\" "
7
sb.append ("onMouseOut=\"clearHang(); return true;\" ");
sb. append ("onClick=\"clearHang(); return true;\" ");

sb.append(">");
sb.append (processDoubleQuote (value));
sb.append("</textarea>\n") ;
} .
y
else if (type.equals("DATE")) {
sb.append ("text\" maxlength=\"10\" size=\"10\" ");
sb.append ("value=\""tvaluet"\" ");
// if (!doProcess.equals ("search")) {
sb. append ("onBlur=\"checkDate (this) \"");
// yj
sb.append (">");

sb.append("\n");
}
catch (SQLException sqle) {
sgqle.printStackTrace();
}
return(sb.toString());

private static String buildPickList (String fieldName,
TableDescriptor td,
TableDescriptor tdi,
String doProcess,
String value,
LinkedList sessionStack,
Connection con)

US 7,885,981 B2
293 294

//first, geneWMte sql

BalloonHelp bh=BalloonHelp.getInstance ();
Balloon b=bh.getTableBalloon(td.getTable().toUpperCase()+"."+fieldName.
toUpperCase ());
StringBuffer sb=
new StringBuffer ("<select name=\""+
td.getDatabase()+"_ "+
td.getTable()+"_ "+fieldNamet"\" "

if (b!=null) {
sb. append ("onMouseOver=\"setHang ('"+b.getID()+
"'t event, this, 'dataTable'); return true;\" "+
"onMouseOut=\"clearHang(); return true;\" "+
"onClick=\"clearHang(}7\" "
d:

sb.append (">");

if (((StackElemeént) sessionStack.getLast()).getMasterColumn() == null) {
sb. append("<option>\n");
}
else if (! ((StackElement) sessionStack.getLast()).getMasterColumn().
equals (fieldName)) {
sb.append("<option>\n");

boolean foundName=false;
boolean. foundNamePart=false;
boolean specialView= .
(td.getTable() .equals ("CUSTOM VIEW_PROTOTYPE 2") ||
td.getTable() .equals ("CUSTOM VIEW_PROTOTYPE_3") |]
td.getTable() .equals ("CUSTOM _VIEW_PROTOTYPE_1")
) ?true: false;

DataDictionary dd =
DataDictionary.getInstance (td.getDatabase(),
td.getDBConnection());

String tdlSaveTableName = tdl.getTable();

String fullQuery = (td.getForeignCDD(fieldName) != null) ?td.
getForeignCDD (fieldName) .getSQLStr():null;

StringBuffer selectPart = new StringBuffer();

StringBuffer fromPart = new StringBuffer();

StringBuffer wherePart = new StringBuffer ();

StringBuffer orderByPart = new StringBuffer();

if (Debug.areDebugging) {
Debug.doLog ("fieldName: "+fieldName, Debug.INFO);
Debug.doLog ("fullQuery: "+fullQuery, Debug. INFO);

try {
1£ (fullQuery != null) {
int begPart -fullQuery.indexOf ("SELECT") +"SELECT". length ();
int endPart = fullQuery.indexOf ("FROM");

i

US 7,885,981 B2
295 296

select PW .append (fullQuery. substrisol(pagpats Wars ce yey
toUpperCase()-trim());
begPart = endPart+" FROM". length ();
endPart = fullOvery.indexOf ("WHERE") ;
if (endPart > begPart) {
fromPart.append (fullQuery.substring (begPart,endPart) -
toUpperCase().trim())7
begPart = endPart+"WHERE"”.length ();
endPart = fullQuery.indexOf ("ORDER BY");
if (endPart > begPart) {
wherePart .append(fullQuery.substring (begPart,endPart).
toUpperCase() .trim());
begPart = endPart+"ORDER BY".length();
orderByPart.append (fullOuery.substring (begPart) .toUpperCase
() -trim());
}

else {

wherePart.append(fullQuery.substring (begPart) .toUpperCase ()
-trim())?

}
else {
endPart = fullQuery.indexOf ("ORDER BY");
if (endPart > begPart) {
fromPart.append(fullQuery. substring (begPart,endPart).
toUpperCase () .trim());
begPart = endPart+"ORDER BY". length();
orderByPart.append (fullQuery.substring (begPart) .toUpperCase
() .trim());
}
else { .
fromPart.append(fullQuery. substring (begPart) .toUpperCase().
trim());

1£ (Debug.areDebugging) {
Debug.doLog("selectPart: "“+twherePart, Debug.INFO);
Debug.doLog("fromPart: "“+fromPart, Debug.INEO) ;
Debug. doLog("wherePart: "+wherePart, Debug.INFO);
Debug.doLog("“orderByPart: "“+wherePart, Debug.INFO);

}
else {
selectPart.append (tdl.getTable()+"."+tdl.getKeyField());
fromPart.append(tdl.getTable());
if (specialView) {
orderByPart.append(tdl.getKeyField());

while (!specialView && !foundName) {
ResultSetMetaData rsmdl=tdl.getMetaData();
for (int i=l;i<=rsmdl.getColumnCount();it+) {
if (rsmdl.getColumnName (i) .endsWith("_NAME")) {
foundName=true;
break;

US 7,885,981 B2
297 298

if (!foundName) {

String gStr="select a.table_ name,b.column_name from "+
“user constraints a, user_cons_columns b, "+
“user constraints c, user_cons_columns d "+
"where "+
"a.constraint_type='P' and c.constraint_type='"U' "+
"and c.table_name='""+tdl.getTable()+"" and "4+
"ce. constraint name=d.constraint_name and "+
"b.column_name=d.column_name and "+
"b.constraint_name=a.constraint_name";

boolean needToClose=false;

if (con == null) {
/*
DBConnectionManager.getInstance{);
con=connMgr.getConnection(tdl.getDBConnection());
needToClose=true; . ;

*/

Statement stmt=con.createStatement ();

ResultSet rs=stmt.executeQuery(qStr);

if (!rs.next()) {
break;

}

Lf (rs.getString(1).startsWith("MICAH")) {
rs.next(); :

}

String tableName=rs.getString(1l);

String keyFieldName=rs.getString (2);

td=dd.getDataDictionaryTD(tdl.getTable());
tdl=dd.getDataDictionaryTD (tableName) ;

wherePart .append(td.getTable()+"."+keyFieldNamet"="+
tableNamet+"."4tdl.getKeyField()+" and ™);
fromPart.append(", "+tdl.getTable())7

rs.close();

stmt.close();

if (needToClose) {
//connMgr.freeConnection(tdl.getDBConnection(),con);

)

// now I am at a TD that has _NAME field(s)
foundNamePart=false; ;
if (!specialView && td1.findColumnName ("LAST NAME") != 0) {
selectPart.append(","+tdl.getTable ()+".LAST_NAME") ;
orderByPart .append (tdl.getTable()+".LAST_NAME,");
if (tdi .findColumnName ("FIRST_NAME") '= Q) {
selectPart.append(", "+tdl.getTable()+".FIRST_ NAME") ;
orderByPart.append(tdl.getTable()+". FIRST _NAME,");
}
if (tdi. findColumnName ("MIDDLE NAME") != 0) {
selectPart.append(", "+tdl.getTable() +".MIDDLE_NAME") ;

US 7,885,981 B2
299 300

OW cpypart.append (tdl.getTabe,(a +f - MIR WME.NAME, f')
}
foundNamePart=true;
}
if (tspecialview && !foundNamePart) {
ResultSetMetaData rsmd=tdl.getMetaData ();
for (int d=l;i¢=rsmd.getColumnCount ();it++) {
if (rvsmd.getColumnName (i) -endsWith ("_NAME")) {
selectPart.append(", "+rsmd.getColumnName (i) );
orderByPart.append (rsmd.getColumnName (i));
break;

}
else if (foundName) {
orderByPart.deleteCharAt (orderByPart.length()-1);

StringBuffer gStrBuf=new StringBuffer ("SELECT "+selectPart+" FROM WE
fromPart);

if (( (StackElement) sessionStack. getLast ())}.getMasterColumn () ‘=
null) {

aif ({ (StackElement) sessionStack. getLast ()).getMasterColumn().-
equals (fieldName)) {

if ( ((StackElement) sessionStack.get (sessionStack.size()—2)).-
getTableName () .equals ("CUSTOM _VIEW_PROTOTYPE_1") tl
( (StackElement) sessionStack. get (sessionStack.size()-2)).

getTableName {) .equals ("CUSTOM_VIEW_PROTOTYPE 2") |
( (StackElement) sessionStack.get (sessionStack.size()~-2)).
getTableName () .equals ("CUSTOM_VIEW_PROTOTYPE_ 3") )

if (fullQuery == null) {
wherePart.append (td1SaveTableName+"."+fieldName+"="+ ((
StackElement) sessionStack.get (sessionStack.size()-2)).
getCurrentKey()+" AND ")7

}

else {
wherePart.append(" AND A."+£ieldNamet+"="4 ((StackElement)
sessionStack.get (sessionStack. size ()-2)) .getCurrentKey

Qo)?

}
else {
if (fullQuery == null) {
wherePart .append( ((StackElement) sessionStack.get (
sessionStack.size()-2)) .getTableName ()+"."+
fieldName+"="+4 ((StackElement) sessionStack.get (
sessionStack.size()-2)).getCurrentKey()+" AND "

}

else {
wherePart-.append(" AND A"+"."+fieldNamet"="+ ((
StackElement) sessionStack.get (sessionStack.size()~2)).
getCurrentKey ());

US 7,885,981 B2

301 302
}
if (wherePart.length() != 0) {
if (fullQuery == null) {

wherePart.delete (wherePart.length()—-5,wherePart.length()-1);

}
qStrBuf.append(" WHERE "+wherePart);

}

Af (fullQuery == null) {
String sortOrderName = null;
ResultSetMetaData rsmd = tdl.getMetaData ();
for (int i=1;i<=rsmd.getColumncount ();i++) {
String curColName = rsmd.getColumnName (i);
if (curColName.endsWith("SORT_ORDER") {|
curColName.endsWith ("SORT_KEY") )

sortOrderName = curColName;
break;
j
}
if (sortOrderName != null) {
if (orderByPart.length() == 0) {

orderByPart.append({tdlSaveTableNamet+”"."+sortoOrderName) ;
}

else {
ordexrByPart.insert (0,td1SaveTableNamet+"."+sortOrderName+","
\;
}
}
}
if (orderByPart.length() != 0) {

qStrBuf.append(" ORDER BY “torderByPart);
}

if (Debug.areDebugging) {
Debug.doLog("TableDescriptorDisplay gStrBuf:
"+qStrBuf, Debug. INFO) ;
}
boolean needToClose=false;
//DBConnectionManager connMgr=null;
if (con == null) {
/*
DBConnectionManager.getInstance ();
con=connMgr.getConnection(tdl.getDBConnection());
needToClose=true;
*/
}
Statement stmt=con.createStatement ();
ResultSet rs=stmt-.executeQuery (qStrBuf.toString());
ResultSetMetaData rsmd=rs.getMetaData();
while (rs.next()) {
String optVal=rs.getString (1);
String curTableName = td.getTable();
sb.append ("<option value=\"");

US 7,885,981 B2
303 304

if (cuNblename- equals ("custom vie ao oar emit ad ¥
curtableName.equals ("CUSTOM | VIEW PHO i ho 5
curTableName.equals ("CUSTOM_ VIEW_ PROTOTYPE 3"))

sb.append(rs.getString(1));
}
else {
sb.append(optVal);
}
sb.append("\" "+

(optVal.equals (value) ?"SELECTED":"") +
won
dF
if (foundNamePart && rsmd.getColumnCount () == 4) {

String lastName = rs.getString(2);i
String firstName = rs.getString (3);
String middleName = rs.getString (4);

String apStr=(lastName == null?"":lastNamet+", “)+
(firstName == null?"":firstNamet+" ")+
(middleName == null?"":middleName) ;

sb.append(apStr);
}
else if (('foundName) && (fullQuery == null)) {
sb.append(rs.getString(1))7
}
else {
for (int i=?;i<=rsmd.getColumnCount();it+) {
af (vs.getString(i) != null) {
sb.append(rs.getString(i)+" ")?
}
}
sb.deleteCharAt (sb.length ()-1);
}
sb.append("\n");
}
rs.close();
stmt.close();
if (nmeedToClose) {
//connMgr. freeConnection (tdl.getDBConnection(),con);

}

catch (SQLException sqle) {
sqle.printStackTrace ()7

}

sb.append("</select>\n");

return(sb.toString());
}

public static String getOrderBy(TableDescriptor td) {
StringBuffer orderByBuff=new StringBuffer ();
boolean foundNamePart=false;
try {
if (td. findColumnName ("LAST NAME") != 0) {
orderByBuff.append("LAST_NAME,");

US 7,885,981 B2
305 306

foundNa@@Part=true;

aif (td. findColumnName ("FIRST_NAME") '= 0) {
orderByBuff.append("FIRST_NAME,");
foundNamePartstrue;

if (td.findColumnName ("MIDDLE_NAME") != 0) {
orderByBuff.append ("MIDDLE_NAME, ") ;
foundNamePart=true;

if (!foundNamePart) {f{
ResultSetMetaData rsmd = td.getMetaData ();
String nameColumn;
for (int i=1;i<=rsmd.getColumnCount ();i++) {

Lf ((nameColumn=rsmd. getColumnName (i)) .endsWith ("_NAME")) {
orderByBuff.append (nameColumn); :
foundNamePart=true;
break;

}
else {
orderByBuff.deleteCharAt (orderByBuff.length()~-1);
}
}
catch (SQLException sqle) {
sqle.printStackTrace();
}
if (foundNamePart) {
return (orderByBuf£f.toString());
}
else {
return ("");

public static String displayStack(LinkedList 1, String ungStr) {
StringBuffer stackListBuff=new StringBuffer ("<TABLE width=\"1l0O0O%8\" "+
“celipadding=\"0\" "4+
"cellspacing=\"0\">\n");7
stackListBuff.append ("<TR><TD align=\"left\" valign=\"bottom\">\n");
String targetName=null;
String doProcess=null;
int i=0;
BalloonHelp bh = BalloonHelp.getInstance ();
Balloon b = bh.getNavBalloon("stackLink");
String bString =
((b!=null) ?
" onMouseOver=\"setHang ('"+b.getID() +
"' event, this, 'mavLink'); return true;\" "+
"onMouseOut=\"clearHang(); return true;\" "t
"onClick=\"clearHang(); return true;\" ":
weer
di
while (1 != null && i < l.size()) {
StackElement se=(StackElement)1l.get(i)i
targetName="AddEditForm.jsp";

US 7,885,981 B2
307 308

if (se WWceMode() .equals ("browse") ) {th
targetName="Browse.jsp";
doProcess="browse";
}
else if (se.getMode(}).equals("add")) {
doProcess="insert";
}
else if (se.getMode().equals("edit")) {
doProcess="updateékeyValue="+se.getCurrentKey ();
}
else if (se. getMode () -equals ("search") ) {
if (se.getTableName () -equals ("CUSTOM VIEW_PROTOTYPE_ 3") ) {
doProcess="revised";
}
else {
doProcess="filter";

}

stackListBuff.append("<A HREF=\""+btargetName+"?tableName="+
se.getTableName ()+"&mode="+sc.getMode ()+
"<doProcess="+doProcesst"&stackLevel="+it
"sung="+ungStre"\" "+
bStringt
wo

\;

stackListBuff.append (TableDescriptorDisplay.getDisplayLabel (
se.getTableName()) .toUpperCase ()+
" ["+se.getMode().toUpperCase()+")}</A> ~--agt;\n"

Ltt;

if (1 != null) {
stackbistBuff = new StringBuffer (stackListBuff.substring (0,
stackListBuff£.length()-7));
}
stackListBuff.append("</TD><TD valign=\"bottom\" align=\"right\">")7
stackListBuff.append ("</TD></TR></TABLE>");
return(stackListBuff.toString());
}

public static String displayNavbar (String origTableName,String ungStr,
boolean canBrowseFlag,boolean canAddFlag,boolean isFiltered) {

BalloonHelp bh = BalloonHelp.getInstance();
Balloon b = null;

StringBuffer navbarBuff=new StringBuffer ();
navbarBuff.append("<b>"+TableDescriptorDisplay.getFormattedLabell (
origTableName)+"</b> options: \n")};
if (canBrowseFlag) {
b=bh.getNavBalloon ("navFullBrowseLink") 7
navbarBuff.append("<font size=\"2\"><strong>"+
"<A HREF=\"Browse.jsp?tableName="+
origTableNamet+" &mode=browseé&doProcess=fullLista"t+
"ung="+ungStrt+
myn wy

US 7,885,981 B2
309 310

((b != WF1)?
"onMouseOver=\"setHang ('+b.getID()+
"t event,this, 'navLink'); return true;\" "+
"onMouseOut=\"clearHang(); return true;\" "4+
“onClick=\"clearHang(); return true;\" ":

)t+

">FULL&nbsp; BROWSE</A></strong></font>"
de

if ((tisFiltered) && ((!canAddFlag) || origTableName. equals (
"CUSTOM VIEW_PROTOTYPE_1") 11]
origTableName.equals ("CUSTOM _VIEW_PROTOTYPE 2") {| origTableName.

equals ("CUSTOM VIEW PROTOTYPE 3")))

navbarBuff.append(" or");
}
else {
navbarBuff.append(",");

if (isFiltered) {
b=bh.getNavBalloon("navFilteredBrowseLink");
navbarBuff.append(" <font size=\"2\"><strong>"+
"<A HREF=\"Browse.jsp?tableName="+
origTableName+" Gmode=browse&doProcess=filiteré&"+
“ung="+ungStr+

my wa

((b '= null)?
"onMouseOver=\"setHang ('"+b.getID()+
"'t event,this, 'navLink'); return true;\" "+
“onMouseOut=\"clearHang(); return true; \" "+

"onClick=\"clearHang(); return true;\" ":

)+

">FILTERED&nbsp; BROWSE</A></strong></font>,"

b=bh.getNavBalloon ("navNewSearchLink") ;

navbarBuff.append(" <font size=\"2\"><strong>"+
"<A HREF=\"AddkditForm. jsp?tableName="+
origTableNamet+" &mode=search&doProcess=new&"+
"ung="+unqStrt

a \ cts w +

((b != null)?
"onMouseOver=\"setHang('"+b.getID()+
"T event, this, 'navbLbink'); return true;\" "+
“onMouseOut=\"clearHang(); return true;\" "+
“onClick=\"clearHang(); return true;\" ":
sy

)+

"SNEW&nbsp; SEARCH</a></strong></font>"

US 7,885,981 B2
311 312

de

if (aisFiltered) {
b=bh .getNavBalloon ("navRevisedSearchLink") ;
navbarBuff.append(",");

if ((!canAddFlag) || origTableName.equals (
"CUSTOM VIEW_PROTOTYPE_1") }]| origTableName. equals (
"“CUSTOM_VIEW_PROTOTYPE 2") || origTableName. equals (

"CUSTOM_VIEW_PROTOTYPE_3")) {
navbarBuff.append(" or");

}

navbarBuff.append(" <font size=\"2\"><strong>"+
"<A HREP=\"AddEditForm. jsp?tableName="+ :
origTableNamet" &mode=search&doProcess=revised&"+
"ung="4+unqgStr+

wy ha

((b '= null)?
"onMouseOver=\"setHang('"+b.getID{()+
"' event, this, 'navLink'); return true;\" "+
"“onMouseOut=\"clearHang(); return true;\" "+
"onClick=\"clearHang(); return true;\" ":

)+

" DREVISED&nbsp; SEARCH</a></strong></font>”

if (! ((!canAddFlag) || origTableName.equals ("CUSTOM_VIEW_PROTOTYPE_1")
1] origTableName.equals ("CUSTOM VIEW_PROTOTYPE_2") | {| origTableName.

equals ("COSTOM_VIEW_PROTOTYPE_3")) ) ¢{

b=bh.getNavBalloon ("navAddLink") ;

if (canBrowseFlag) {
navbarBuff.append(", or");

)

navbarBuff.append(" <font size=\"2\"><strong>"+
"<AR HREP=\"AddEditForm.jsp?tableName="+
origTableName+" &mode=add&doProcess=inserté"+
"ung="+ungStr+

Ww \ e wy

{({(b '= null)?
“"onMouseOver=\"setHang('"+b.getID()+
"',event,this, 'navLink'); return true;\" "+
"onMouseOut=\"clearHang(); return true;\" "+
"onClick=\"clearHang(); return true;\" ":
wer

)+

"DADD</a></strong></font>\n"

return navbarBuff.toString();

public static String getNoCache(int forType) {

US 7,885,981 B2
313 314

long curDate"3w java.util.Date () .getTimerh)i

if (forType == TableDescriptorDisplay.ForForm) {

return ("<input type=\"hidden\" name=\"ung\"
value=\" "tourDatet™\">") :

}

else if (forType == TableDescriptorDisplay.ForJavaScript)

return(""+curDate);

}

else { // (forType == TableDescriptorDisplay.ForURL)

]

return ("unq="+curDate) ;

=

public static String processDoubleQuote (String str) {

StringBuffer retStrBuf = new StringBuffer ();

int prevQuote=0;

}

Schema

int curQuote=0;

while ((curQuote=str-indexOf('"',prevQuote)) >= 0) {
retStrBuf.append(str.substring (prevQuote,curQuote) );
retStrBuf.append ("&quot;");
prevQuote = curQuotetl;

}

retStrBuf.append(str.substring (prevOuote) );

return (retStrBuf.toString());

live/WEB-INF/classes/sessionUtils/ManageSession.java

// $Revision: 2.3 §$

// $Da
packag

import
import

import
import

public

public static final String version_sessionUtils_ ManageSession java

te: 2001/10/30 01:35:53 §
e sessionuUtils;

javax.servlet.*;
javax.servlet .http.*;

java.util.*;
java.io.*;

class ManageSession {

"SRevision: 2.3 $";

public static int getCurSequence (HttpSession session) {

Integer curSequence =
(Integer) session.getAttribute ("sessionSequence");
1£ (curSequence != null) {
return (curSequence.intValue());
}
else {
ManageSession.updateSequence (session);
return(1);

{

US 7,885,981 B2
315 316

public static imewupaatesequence (HttpSession-sigs sli on} aR

Integer curSequence = (Integer) session. getAttribute ("sessionSequence") ;
int nextSequence;
if (curSequence == null) i

nextSequence=1;
}
else {
nextSequence = curSequence.intValue()+1;

}

session.setAttribute ("sessionSequence”,new Integer (nextSequence) );
return (ManageSession.getCurSequence (session) );

}

public static boolean checkSequence (HttpSession session,int sequence) {
if (sequence != ManageSession.getCurSequence(session)) {|
return (false);
}
else {
return (true);

}
Schemalive/WEB-INF/classes/sessionUtils/StackElement. java

// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 $

package sessionUtils;

import java.util.*;
import java.io.*;

public class StackElement implements Serializable [

public static final String version_sessionUtils StackElement java =
"$Revision: 2.3 $";

private Hashtable formValues=new Hashtable();
private Hashtable searchParams=new Hashtable({);
private String mode=null;

private String tableName=null;

private String searchString=null;

private String currentKey=null;

private String focusField=null;

private String masterColumn=null;

private int rowPointer=0;

public StackElement() {

}

private synchronized void writeObject (java.io.ObjectOutputStream out)
throws IOException {

out.defaultWriteObject();

out.writeObject (formValues);

out.writeObject (searchParams);

US 7,885,981 B2
317 318

out.writeOb 3 SQ (mode):
out.writeObject (tableName) ;
out.writeObject (searchString) ;
out.writeObject (currentKey);
out.writeObject (focusField);
out.writeObject (masterColumn);
}
private synchronized void readObject (java.io.ObjectInputStream in)
throws IOException, ClassNotFoundException {
in.defaultReadObject ();

formValues= (Hashtable) in.readobject ();
searchParams=(Hashtable)in.readObject ();
mode= (String) in.readobject ();
tableName= (String) in.readObject ();7
searchString=(String)in.readObject ();
currentKey= (String) in-.readObject ()7
focusField= (String) in.readObject ();
masterColumn= (String) in.readObject ();

)

// get accessor methods
public String getCurrentKey() {
return (currentKey) ;?

)

public String getSearchString() {
return (searchString);.

}

public String getTableName() {
return (tableName);

}

public String getMode() {
return (mode);

}

public String getFocusField() {
return (focusField) ;
}

public Hashtable getSearchParams () {
return (searchParams) ;

}

public Hashtable getFormValues() {
return (formValues);

}

public String getMasterColumn() {
return (masterColumn) ;

}

public int getRowPointer() {
return (rowPointer);

)

US 7,885,981 B2
319 320

/f/set accessor mWFhods

public void setCurrentkey (String myCurrentKey) {
currentKey=myCurrentKey;

}

public void setSearchString (String mySearchString) {
searchString=mySearchString;

)

public void setTableName (String myTableName) {
tableName=myTableName;

}

public void setMode(String myMode) {
mode=myMode;

}

public void setFocusField(String myFocusField) i
focusField=myFocusField;

}

public void setSearchParams (Hashtable mySearchParams) {
searchParams=mySearchParams;

}

public void setFormValues (Hashtable myFormValues) {
formValues=myFormValues;

}

public void setMasterColumn (String myMasterColumn) {
masterColumn=myMasterColumn;

}

public void setRowPointer(int myRowPointer) {
rowPointer=myRowPointer;

}

//Specific settings for the hashtables
public boolean searchParamsContains (Object 0) {
return (searchParams.contains (0));

}

public boolean formValuesContains (Object o) {
return (formValues.contains (0));

}

. public Enumeration searchParamsElements() {
return (searchParams.elements ());

}

public Enumeration formValuesElements() {
return (formValues.elements ());

}

public Object searchParamsGet (Object key) {
return (searchParams.get (key) );

US 7,885,981 B2
321 322

public Object formValuesGet (Object key) {
return (formValues.get (key) );
}

public Enumeration searchParamsKeys() {
return (searchParams.keys ());

}

public Enumeration formValuesKeys() {
return (formValues.keys());

}

public Object searchParamsPut (Object key, Object value) {
return (searchParams .put (key, value) );

}

public Object formValuesPut (Object key,Object value) {
return (formValues .put (key, value) );
)

public void copyFormToSearch() {
// Hashtable formValues=se.getFormValues(j;
//f Hasntable searchParams=new Hashtable ();
this.searchParams=new Hashtable();
deepClone (this.searchParams, this.formValues);
// setSearchParams (searchParams);

public void copySearchToForm() {
// Hashtable formValues=new Hashtable ()};
this.formValues=new Hashtable();
// Hashtable searchParams=se.getSearchParams ();
deepClone (this. formValues, this.searchParams) ;
// setFormValues (formValues);

public void deepClone(Hashtable dst,Hashtable src) {
// Hashtable dst=new Hashtable({);
Enumeration srcKkeys=src. keys ()7
while (srcKeys.hasMoreElements()) {
Object srcKey=srcKeys.nextElement ();
Object srcVal=sre.get (srekey) ;
dst.put (srcKey,srcVal);
}
// veturn (dst);

}
Schemalive/WEB-INF/classes/sessionUtils/StackTag. java

// $Revision: 2.5 $
// $Date: 2001/10/30 08:26:33 $

package sessionUtils;

import javax.servlet.*;
import jJavax.servlet.http.*;

US 7,885,981 B2
323 324

import javax. servl SW} sp.*;
import javax.servlet.jsp.tagext.*;

import java.util.*;
import java_.io.*;

import dbUtils.*;
// import dbPoolUtils.*;

import common. *;
public class StackTag extends BodyTagSupport [

public static final String version_sessionUtils StackTag_java =
"$Revision: 2.5 SS"?

private String mode=null;
private String tableName=null;
private String stackLevcl=-null;
private String database=null;
private String dbConn=null;

public int doStartTag() {
pageContext.setAttribute ("StackError","");

pageContext.setAttribute ("stackIinfo","");

// Check mode to determine what to do

/*

if (mode.equals("add")) {

buildaAdd ();

}

else if (mode.equals("edit") || mode.equals ("hold") ) {
buildEdit ();

}
clse if (mode.equals("search")) {
buildSearch ()7 :

}
*/
if (mode.equals ("add") || mode.equals("edit") || mode.equals ("search") )
{
buildAddEdit (mode);
}
else if (mode.equals("browse")) {
buildBrowse ();7
}
else {

pageContext.setAttribute ("stackBrror", "StackError: mode "+
mode+" not recognized");

}

return (EVAL BODY TAG);

public int doAfterBody() {
try {
BodyContent body = getBodyContent ()}?
JspWriter out= hody.getEnclosingWriter ();

US 7,885,981 B2
325 326

out.print Bay. getString());
}
catch (IOException ioe) {
ioe. printStackTrace ();
}
return (SKIP BODY);
}

public int endEndTag() {
return (BVAL_PAGBE) i
}

private void buildaAddEdit (String mode) |

LinkedList sessionStack=getSessionStack ();
boolean pushFlag = false;
if (isPush()) {
StackElement se=new StackElement ()7
sessionStack.add (se)?
pushFlag = true;
/{ se.setMode ("edit");
// se.setTableName (tableName);
}

ClearStackChildren(sessionStack) ;
StackElement se=(StackElement) sessionStack.getLast();
se.setMode (mode) ;
if ((se.getTableName() != null) &&
(!se.getTableName().equals (tableName))) {
se.setRowPointer (0);
se.setSearchString (null);
se.setSearchParams (new Hashtable());
}
se.setTableName (tableName) ;
se.setCurrentKey (pageContext.getRequest ().getParameter ("keyValue”) );

setMasterColumn(sessionStack, se, pushFlag);

pageContext.setAttribute ("stackInfo", "buildAddEdit (\""+modet"\") for "+
tableName);
j

private void buildBrowse() {
Lf (Debug.areDebugging) {
Debug.doLog ("In buildBrowse()...", Debug. INFO);
}

LinkeaList sessionStack=getSessionStack();
boolean pushFlag = false; .
if (isPush()) {
StackElement se=new StackElement ()};
sessionStack.add(se);
pushFlag = true;
// se.setMode ("browse") ;
// se.setTableName (tableName) ;
}

clearStackChildren(sessionStack);

US 7,885,981 B2
327 328

StackElement. Wr= (StackElement) sessionSlapkygeplagty{
se.setMode ("browse") 7
if ((se.getTableName() != null) &&
(!se.getTableName().equals(tableName))) {
se.setRowPointer (0);
se.setSearchString (null);
se.setSearchParams (new Hashtable({));
}
se.setTableName (tableName) ;
se.setCurrentKey (null);
// This is probably a hack, and should really be happening elsewhere
(?).-.
se.setFormValues (new Hashtable());

setMasterColumn(sessionStack, se, pushFlag);

String doProcess=
pageContext.getRequest () .getParameter ("doProcess");
String curTableName=se.getTableName ();

if (Debug.areDebugging) {
Debug. doLog("curTableName: “+curTableNamet" tableName: "+tableName,
Debug.INFO) ;

se.setMode ("browse");
if ((doProcess != null && doProcess.equals("fullList")) ||
'tableName.equals (curTableName) )

// frag any filters
se.setSearchParams (new Hashtable());
se.setSearchString (null);
se.setTableName (tableName) ;

}

pageContext.setAttribute ("stackinfo", "buildBrowse () for "+
tableName);
}

private boolean isPush() { ;
int curStackhLevel=getSessionStack().size()-l;
return (getStackLevelint() > curStackLevel);

}

private LinkedList getSessionStack() {
HttpSession session=pageContext.getSession();

LinkedList sessionStack=
(LinkedList) session.getAttribute("sessionStack");

if (sessionStack == null) {
if (Debug.areDebugging) {
Debug.doLog("Need to create LinkedList...",Debug. INFO);
} :
sessionStack = new LinkedList()?;

session.setAttribute ("sessionStack", sessionStack);
StackElement se=new StackElement ();
sessionStack.add (se) ;

se.setMode ("browse");

}

US 7,885,981 B2
329 330

se.setTablWWame (tableName) ;
}

return (sessionStack) ;

private int getStackLeveliInt() {

int curStackLevel=getSessionStack().size()-1;

if (Debug.areDebugging) {
Debug .doLog ("curStackLevel="4+curStackLevel+"\nstackLevel="+
stackLevelt+"\n",
Debug. INFOQ) ;

if (stackLevel == null |} stackLevel-.indexOf('@') >= Q) {
return (curStackLevel) ;

if (stackLevel.indexOf('+") >= 0) {
return (curStackLeveltl);
5
else if (stackLevel.indexOf('-') >= 0) {
return ((curStackLevel~-1 < 0)?0:curStackLevel-1);

} -

try {
curStackLevel=Integer.parseiInt (stackLevel);

}

catch (NumberFormatException nfe) {
curStacklLevel=Q;

,

return (curStackLevel) ;

public void setMode (String myMode) {

}

mode=myMode;

public void setTableName (String myTableName) [

}

tableName=myTableName;

public void setStackLevel (String myStackLevel) {

i)

stackLevel=myStackLevel;

public void setDatabase(String myDatabase) {

}

database=myDatabase;

public void setDbConn (String myDbConn) {|

}

dbConn=myDbConn;

public String getMode() {

}

return (mode) ;

public String getTableName() {

US 7,885,981 B2
331 332

return (tablenaMe) ;
}

public String getStackLevel() [
return (stackLevel);

}

public String getDatabase() {
return (database);

}

public String getDbConn() {
return (dbConn);

}

public static String getParentTableName (LinkedList sessionStack) {
return (get ParentTableName (sessionStack, sessionStack.size()-1))ji
}

public static String getParentTableName (LinkedList sessionStack,
int stackLevel) {
if (stackLevel > sessionStack.size() |] stackLevel < 1) {
return("");
} .
return( ((StackElement) sessionStack.get (stackLevel-1)) .getTableName ());
}

private void setMasterColumn(LinkedList sessionStack, StackElement se,
boolean pushFlag) {
if (sessionStack.size() > 1) {
StackElement
pe= (StackElement) sessionStack.get (sessionStack.size()-2);

MasterDetail md=MasterDetail.getInstance (database, dbConn);
Vector detailTables=md.getDetailTables (pe.getTableName () )7
Enumeration dtEnum=detailTables.elements ();
se.setMasterColumn (null);
while (dtEnum.hasMoreElements()) {
String detailTable= (String) dtBnum.nextElement ();
if (Debug.areDebugging) {
Debug.doLog("table: "4+tableName+", detailTable: "+detailTable,
Debug.INFO);

int dot=detailTable.indexOf('.');
if (detailTable.startsWith (tableNamet+".")) {
se.setMasterColumn (detailTable.substring({(dottl));
if (pushFlag &£& (pe.getTableName () .equals (
“CUSTOM _VIEW_PROTOTYPE_1") | 1 pe.getTableName () .equals (
"CUSTOM VIEW PROTOTYPE 2") |]
pe.getTableName () .equals ("CUSTOM_VIEW_PROTOTYPE_3")))
{
pe.setCurrentKey (pageContext .getRequest () .getParameter (
"parentKey")});
}
break;

US 7,885,981 B2
333 334

}
private void clearStackChildren(LinkedList sessionStack) {
int curbevel=getStackLevelint ();
while (sessionStack.size()-1 > curLevel) {
sessionStack.removeLast ();
}

Schemalive/WEB-INF/classes/sessionUtils/StackTagExtraInfo.java

/* $Revision: 2.3 $ */
/* SDate: 2001/10/30 01:35:53 § */

package sessionUtils;

import javax.servlet.jsp.*;
import javax.serviet.jsp.tagext.*;

public class StackTagExtraiInfo extends TagExtrainfo {

public static final String version _sessionUtils StackTagBxtraInfo_java =
"SRevision: 2.3 8";

public Variableinfof[} getVariableiInfo (TagData data) {.
return( new VariableiInfo[] {
new Variableinfo ("stackError", "String", true, VariableInfo.AT_ BEGIN),
new VariableInfo("stackInfo", "String", true, VariableInfo.AT_BEGIN),
Me
}
Schemalive/WEB-INF/classes/tagUtils/ViewTag.java

// SRevision: 2.3 §$
// $Date: 2001/10/30 01:35:53 $

package tagUtils;

import javax.servlet.*;

import javax.servlet.http.*;

import javax.servlet.jsp.*7

import javax.serviet.jsp.tagext.*;

import dbUtils.*;

public class ViewTag extends TagSupport {
private String entryPoint;
private String dbName;
private String dbConn;

public int doStartTag() {

ServiletRequest request=pageContext.getRequest ();

US 7,885,981 B2
335 336

HttpSession SWsion=pageContext.getsessidady,

String tableName=request.getParameter ("tableName”) ;
String keyField=request.getParameter ("keyField");
String keyVal=request.getParameter ("keyVal");

String doProcess=request.getParameter("doProcess") ;
String stackLevel=request.getParameter ("stackLevel") ;

pageContext.setAttribute ("tableName",
(tableName==null) ?"null";:tableName) ;

pageContext.setAttribute ("keyField",
(keyField==null) ?"null”:keyField) ;

pageContext.setaAttribute ("keyval",
(keyVal==null) ?"null":keyVal);

pageContext.setAttribute ("doProcess",
(doProcess==null) ?"null":doProcess) ;

pageContext.setAttribute ("stackLevel",
(stackLevel==null1) ?"@":stackLevel);

if ((String) session.getAttribute("returnTable") != null) {
session. removeAttribute ("returnTable");

1f (( (String) pageContext.getAttribute ("tableName"))-equals("null")) {
pageContext.setAttribute ("tableName",entryPoint.toUpperCase());
}
else {
pageContext.setAttribute ("tableName",
( (String) pageContext.getAttribute ("tableName") }).toUpperCase());

tableName= (String) pageContext.getAttribute ("tableName") ;

DataDictionary dd = DataDictionary.getInstance (dbName, dbConn) ;

if (dd.getDataDictionaryTD(tableNamet" View") != null) {
pageContext.setAttribute ("origTableName",tableName) ;
pageContext.setAttribute ("tableName", tableName+" VIEW");

}

else {
pageContext.setAttribute ("origlableName",tableName) ;

return (EVAL BODY INCLUDE) ;

public void setDefaultEntryPoint (String entryPoint) {

this.entryPoint=entryPoint;

public void setDbName (String dbName) {

this.dbName=dbName;

public void setDbConn(String dbConn) {

this.dbConn=dbConn;

US 7,885,981 B2
337 338

Schemalive/WEB-LNE /wrasses/tagUtils/ViewTagExtrbihfd!. jaur

// $Revision: 2.3 $
// $Date: 2001/10/30 01:35:53 §

package tagUtils;

import javax.servlet.jsp.*;
import javax.servlet.jsp.tagext.*?

public class ViewYagExtraInfo extends TagkxtralInfo {

public VariableInfo[]} getVariableInfo(TagData data) {
return( new VariableInfo[] {

new VariableiInfo ("tableName", "String", true, VariableInfo.AT_BRGIN),
new VariableiInfo("keyField", "String", true, VariableInfo.AT_ BEGIN),
new VariableInfo("keyVal", "String", true, VariableInfo.AT_BEGIN),
new Variableinfo ("doProcess", "String", true, VariableInfo.AT_ BEGIN),
new VariableInfo("stackLevel", "String", true, Variableinfo.AT_BEGIN),
new :
VariableiInfo ("origTableName", "String", true, VariableiInfo.AT_BEGIN),

}
Schemalive/WEB-INF/taglib/stack.tld

<?xml version="1.0" encoding="1S0-8859-1" ?>

<!DOCTYPE taglib
PUBLIC "-//Sun Microsystems, Inc.//DTD JSP Tag: Library 1.1//EN"
“http://java.sun.com/j2ee/dtds/web-jsptaglib_1]_1.dtd">

<taglib>
<tlibversion>1.0</tlibversion>
<jspversion>1.1</jspversion>

<tag>
<name>stack</name>
<tagclass>sessionUtils.StackTag</tagclass>
<teiclass>sessionUtils.StackTagExtraiInfo</teiclass>
<bodycontent>JSP</bodycontent>
<attribute>
<name >mode</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<name>tableName</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<name>stackLevel</name>
<required>false</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute> :
<name>database</name>

US 7,885,981 B2
339 340

<required3Wue</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
<attribute>
<name>dbConn</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>
</attribute>
</tag>
</taglib>

Schemalive/WEB-INF/taglib/view.tld

<?xml version="1.0" encoding="IS0O-8859-1" ?>

<!DOCTYPE taglib
PUBLIC “-//Sun Microsystems, Inc.//DTD JSP Tag Library 1.1//EN"
"http: //java.sun.com/j2ee/dtds/web-jsptaglib_1_1.dtd">

<taglib>
<tlibversion>1 .0</tlibversion>
<jspversion>1.1</jspversion>

<tag>

<name>setVars</name>

<tagclass>tagUtils.ViewTag</tagclass>

<teiclass>tagUtilis.ViewTagExtraInfo</teiclass>

<bodycontent>JISP</bodycontent>

<attribute>
<name>defaultEntryPoint</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>

</attribute>

<attribute>
<name>dbName</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>

</attribute>

<attribute>
<name>dbConn</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>

</attribute>

</tag>
</taglib>

US 7,885,981 B2

341

Run-Time Environment for the Schemalive
Reference Implementation

Overview

The Schemalive Reference Implementation (SRI) is a web
application which conforms to Sun Microsystems’ J2EE
(Java 2 Enterprise Edition) Platform, which in turn incorpo-
rates the JSP (Java Server Pages) 1.2, Servlet 2.3, and JDBC
(Java Database Connectivity) 2.0 specifications on which the
SRI explicitly depends. More information on the structure of
web applications can be found at http://jcp.org/aboutJava/
communityprocess/first/jsr053/index.html. The web applica-
tion can be placed in any J2EE-compliant container (1.e.,
application-server software), including such products as
BEA WebLogic, Macromedia JRun, and Apache Tomcat.

Directory Structure

A root directory named Schemalive is required; the sys-
tem’s JSP files and static content (1.e., images) are located in
this directory. A subdirectory Schemalive/WEB-INF is also
required, and must contain a file named web.xml, which is the
deployment descriptor (see below) for the application. Sup-
porting classes for the JSP are located in a subdirectory Sche-
malive/WEB-INF/classes. The web.xml references the appli-
cation’s custom tag libraries (see below) through tag library
descriptor files. These XML descriptors are located in a sub-
directory Schemalive/WEB-INF/taglib, and have a .tld file
extension. Following is a tree diagram for the SRI directory
structure:

+Schemalive
-AddEditForm.jsp
—BalloonHelp.jsp
-Browse.jsp
—DataDictionary.jsp
-DoAddEdit.jsp
—-DoViewGenerator.jsp
-Error500.jsp
—ExpiredSession.jsp
—OutOfSequence.3sp
-showSession.jsp
+common
—EmptyParamCheck.jsp
-EntryPoints.jsp
-GlobalFooter.jsp
-GlobalHeaderHTML. jsp
-GlobalHeaderJavascript.jsp
-GlobalHeaderVARS jsp
+images
-logo.gif
-logo-width.gif
+WEB-INF
-web.xml
+classes
—Connection.properties
+common
—Debug-class
+dbUtils
—CustomCaps.class
-CustomDrillDown.class
-CustomDropDown.class
—CustomDropDownComponent.class
-DataDictionary.class
—DataDictionaryServlet.class
-DataDictionaryTD.class
-MasterDetail.class
-MasterDetailServlet.class
-SQLUtil.class
-TableDescriptor.class
-ViewGenerator.class
+HTMLUtils
-Balloon.class
-BalloonHelp.class
-TableDescriptorDisplay.class

10

15

20

25

30

35

40

50

55

65

342

-continued

+sessionUtils
—ManageSession.class
-StackElement.class
-StackTag.class
—StackTagExtralnfo.class

+tagUtils
-ViewTag.class
-ViewTagExtraInfo.class

+taglib
-stack.tld
-view.tld

Deployment Descriptor

The deployment descriptor (web.xml) is an XML (eXten-
sible Markup Language) file which contains all pertinent
configuration information for running the web application.
The SRI relies on the following portions of the deployment
descriptor: servlet definitions; tag library references; and
security constraints. The XML parsing rules for this file are
contained in a DTD (Document Type Definition) which can
be found at http:/java.sun.com/j2ee/dtds/web-app_2 _
2.dtd. Refer to the JSP specification (above) for more infor-
mation on deployment descriptors.

Servlet Definitions

The SRI incorporates a number of utility servlets (server-
side Java applets which conform to the CGI specification).
Servlets are identified in a <servlet> section within web.xml.
A name is assigned to each servlet (which is used in creating
aservlet mapping, described below), and this name is equated
with the appropriate class-file name (specified relative to the
Schemalive/WEB-INF/classes subdirectory). For example, a
given servlet might be identified as follows:

<servlet>
<servlet-name>DataDictionaryServlet</servlet-name>
<servlet-class>
dbUtils. DataDictionaryServlet
</servlet-name>
</servlet>

By this definition, the following path should exist:
Schemalive/WEB-INF/classes/dbUtils/DataDictionary-
Servlet.class
Note that the <servlet-name> does not represent the actual
URL (Uniform Resource Locator) for the servlet; a separate
mapping from <servlet-name> to URL occurs in a <servlet-
mapping> section:

<servlet-mapping>
<servlet-name>DataDictionaryServlet</servlet-name>
<url-pattern>DataDictionary Servlet</servlet-name>
</servlet-mapping>

By this definition (and assuming the root directory is Sche-
malive), the URL:
http://<host name>:<port>/Schemalive/DataDictionary-
Servlet
would cause the J2EE container to execute the code found
in
Schemalive/WEB-INF/classes/dbUtils/DataDictionary-
Servlet.class
Tag Library References

US 7,885,981 B2

343

A tag library contains Java code that implements custom
HTML tags for use within JSPs. When the JSP engine
encounters such tags, it makes corresponding Java calls into
the tag libraries. For more information, refer to the JSP speci-
fication.

A <taglib> section within web.xml maps a URI (as used
from within the JSP) to a tag library descriptor (which con-
tains information about the associated class name, method
calls, tag parameters). Below is a sample <taglib> section:

<taglib>
<taglib-wri>view</taglib-uri>
<taglib-location>WEB-INF/taglib/view.tld</taglib-location>
</taglib>

See http://java.sun.com/j2ee/dtds/web-jsptaglib_1_1._
1.dtd for the XML DTD for taglib.

The following is the contents of Schemalive/WEB-INF/
taglib/view.tld:

<taglib>
<tlibversion>1.0</tlibversion>
<jspversion>1.2</jspversion>
<tag>
<name>setVars</name>
<tagclass>tagUtils. ViewTag</tagclass>
<teiclass>tagUtils. View TagExtralnfo</teiclass>

<bodycontent>JSP</bodycontent>

<attribute>
<name>defaultEntryPoint</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>

</attribute>

<attribute>
<name>dbName</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>

</attribute>

<attribute>
<name>dbConn</name>
<required>true</required>
<rtexprvalue>true</rtexprvalue>

</attribute>

</tag>
</taglib>

The important part are the <name>, <tagclass>, and
<attribute> tags. The classes referenced in <taglclass> must
lie along the J2EE-container’s CLASSPATH (note that the
SCHEMALIVE/WEB-INF/classes directory is automati-
cally included in the CLASSPATH). Combined with <taglib-
uri>, there is enough information now to use the custom tag
within a JSP. One such invocation would look like this:

<view:setVars defaultEntryPoint=* <%= entryPoints[0] %>” dbName=*
<%= dbName %>” dbConn=* <%= dbConnName %>">
</view:setVars>

Notice the use of <taglib-uri>, <name>, and <attributes>
within the custom tag. Also, it is perfectly legal to use JSP
inline variables, such as <%=entryPoints[0] %>, as the
example shows.

Security Constraints

web.xml contains information about how the SRI web
application should handle security. This includes specifying
what to secure, and how—as well as who can access the

10

15

20

25

30

35

40

45

50

55

60

65

344

application (which is governed by the role names to which the
user is assigned). The assignment of users to roles, however,
is the responsibility of the J2EE container, and is handled
differently by the different containers. The <security-con-
straint> section controls what is protected, and establishes the
corresponding role name, while the <login-config> section
establishes the user-authentication method. Here is a sample:

<security-constraint>
<web-resource-collection>
<web-resource-name>Schemalive<:/web-resource-name>
<url-pattern>/*</url-pattern>
<http-method>GET</http-method>
<http-method>POST</http-method>
</web-resource-collection>
<auth-constraint>
<role-name>Schemalive</role-name>
</auth-constraint>
</security-constraint>
<login-config>
<auth-method>BASIC</auth-method>
<realm-name>Schemalive</realm-name>
</login-config>

Within the <web-resource-collection< section, the <url-
pattern> tag protects the entire application (.e., “/*’’) for the
GET and POST methods. The <auth-constraint> tag refer-
ences a role named Schemalive; somewhere within the con-
tainer’s configuration, this role is defined and a set of userids
and passwords associated with it. The <login-config> section
establishes BASIC as the authentication method; this is what
will cause the userid/password prompt to pop-up when first
accessing the site.

Connection Pooling

The SRI accomplishes database connectivity through the
use of connection pooling, as defined in the JDBC 2.0 speci-
fication. (For documentation, see http://java.sun.com/j2se/
1.3/docs/guide/jdbc/index.html.)

In connection pooling, a specified number of connections
are pre-made to the underlying RDBMS (Oracle, in the ref-
erence implementation) at container start-up time. Connec-
tions are “borrowed’”—that is, checked in and out of this
pool—by program threads on an as-needed basis, without
being opened, initialized, closed each time. This provides a
dramatic improvement in the application’s performance. The
mechanics of the connection pool are largely hidden from the
software; the standard API calls for opening and closing
connections are used, although in actuality the corresponding
connections are merely being checked in and out of the pool.
The particular interfaces used for connection pooling can be
found in the API documentation at http://java.sun.com/prod-
ucts/jdbc/jdbc20.stdext.javadoc/. (The pertinent classes are
javax.sql.ConnectionPoolDataSource and javax.sql.Pooled-
Connection.)

A static handle to the connection pool is managed through
the dbUtils. SQLUtil class, which is implemented in

Schemalive/WEB-INF/classes/dbUtils/SQLUtil java.
This class obtains handles to pool connections using the
Oracle JDBC 2.0 driver interface; the Javadocs for this API
can be found at http://download.oracle.com.otn/utilities-
_drivers/jdbe/817/javadoc.tar.

A file named Schemalive/WEB-INF/classes/Connection-
-properties will need to be customized for each particular
installation JOBCURL contains a (properly formatted) string
to reference the Oracle database-server instance. The SRI
currently references the Type 2 JDBC driver, and the corre-
sponding URL is in the formaljdbx.oracle.oci.8.@<ns

US 7,885,981 B2

345

name>. The user and pwd properties refer to the credentials
the SRI will use for database access; if/when these values
need to change, the server must be restarted in order for those
changes to take effect.

Run-Time Maintenance

To enhance system performance (by reducing the need for
real-time database queries), the SRI maintains two caches of
information.

The first is called the DataDictionary, and contains all of
the metadata derived by interrogating the schema (compris-
ing table and column names, column datatypes and sizes,
referential-integrity constraints, check constraints, and view
definitions). The second is called BalloonHelp, and contains
all of the help information specified in the base-tables
HELP_OBJECT and HELP_SCHEMA.

When changes are made to the schema structure, or to the
records in the help tables, these cached objects must (vari-
ously) be refreshed. This can be done dynamically, without
having to restart the container.

The DataDictionary is rebuilt by referencing the JSP Data-
Dictionary.jsp. There are three options when rebuilding the
DataDictionary: Only, Views (with check), and Views (with-
out check). The “Only” option simply rebuilds the DataDic-
tionary object (.e., re-interrogates the database) without
rebuilding any (system-generated) views. The other two

15

20

346

modes regenerate these views on the fly; the “with check”
mode checks to see if a given view (for a corresponding table)
already exists, and rebuilds the view only if it is not found.
The “without check” option does a brute-force rebuild of all
system-generated views, regardless of whether or not they are
already defined.

Note that while the DataDictionary is being rebuilt (which
can be a lengthy process, depending on the size of the
schema), users will be blocked from accessing the applica-
tion.

BalloonHelp is rebuilt by referencing the JSP Balloon-
Help.jsp. The current contents of the BalloonHelp object are
displayed along with a link to rebuild. When the link is
clicked, the cached object is refreshed from the base-tables.

Changes that are stored to these cached objects are imme-
diately reflected within the application.

Summary

Because of its adherence to various open-standard specifi-
cations, the SRI is not dependent on any one container, but
rather, can operate in any J2EE compliant container. The only
customization that should be required to run the SRI in a
particular environment are the variables (mentioned above
and) defined within the Schemalive/WEB-INF/classes/
dbUtils/SQLUtil java.file.

US 7,885,981 B2
347 348

REM ***** CreateScRM™@Ma.sql

REM *****

REM *****

REM ***** SAMPLE SCHEMALIVE SCHEMA FOR CONSULTANCY CRM -- CREATE TABLES
REM ***** v0.5

REM ***** 10/30/01

CONNECT INTERNAL/ORACLE@ORA816;

DROP USER CNSLT_CRM CASCADE;

DROP TABLESPACE CNSLT_CRM INCLUDING CONTENTS;

CREATE TABLESPACE CNSLT_ CRM DATAFILE 'd:\orant\database\cnslt_crm.dat' S125
10M REUSE AUTOBXTEND ON MAXSIZE UNLIMITED;

CREATE USER "CNSLT CRM" IDENTIFIED BY "CONSULTING" DEFAULT TABLESPACE
"CNSLT_CRM";

GRANT "CONNECT" TO "CNSLT_CRM";

GRANT "RESOURCE" TO "CNSLT_CRM";

GRANT "DRA" TO "CNSLT_CRM";

CONNECT CNSLT_CRM/CONSULTING@ORA81 6;

CREATE TABLE USERS (
Users Key NUMBER (*,0) PRIMARY KEY NOT NULL

CREATE TABLE CONTRACTUAL RELATIONSHIP (

Contractual Relationship Key NUMBER (*,0) PRIMARY KEY NOT NULL,
Contractual Relationship Name VARCHAR2 (50) NOT NULL,
Description VARCHAR2 (255),
Entered_By Users Key NUMBER (*,0) REFERENCES
USERS (Users_Key) NOT NULL,
Entry Date DATE DEFAULT SYSDATE NOT NOLL,
Modified By Users_Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
dM:
CREATE SEQUENCE CONTRACTUAL RELATIONSHIP_SEQ INCREMENT BY 1 START WITH 1

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

CREATE TABLE PRIORITY (

Priority Key NUMBER (*,0) PRIMARY KEY NOT NULL,
Priority Name VARCHAR2 (50) NOT NULL,
Description VARCHAR2 (255),
Entered_By_Users Key NUMBER (*,0) REFERENCES
USERS (Users _Key) NOT NULL,
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified_By Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL, .
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
di
CREATE SEQUENCE PRIORITY_SEQ INCREMENT BY 1 START WITH 1 = NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

US 7,885,981 B2

349 350
CREATE TABLE REGION (
Region_Key NUMBER (*,0) PRIMARY KEY NOT NULL,
Region_Name VARCHAR2 (50) NOT NULL,
Description VARCHAR2 (255),
Entered_By_Users_Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Entry_Date DATE DEFAULT SYSDATE NOT NULL,
Modified By Users_Key NUMBER (*,0) REFERENCES
USERS (Users_Key) NOT NULL,
Last_Modified_ Date DATE DRFAULT SYSDATE NOT NULL
de
CREATE SEQUENCE REGION_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE REGION IS
'<detailTables>
«detailTable>
COUNTRY .Region_Key
</detailTable>
<detailTable>
OPPORTUNITY -Region_Key
</detailYable>
</detailTables>';

CREATE TABLE COUNTRY (

Country Key : NUMBER (*,0) PRIMARY KEY NOT NULL,
Country Name VARCHAR? (50),
Region Key NUMBER (*,0) REFERENCES
REGION (Region_Key) NOT NULL,
Entered By Users Key NUMBER (*,0) REFERENCES
USERS {Users Key) NOT NULL,
Entry Date : DATE DEFAULT SYSDATE NOT NULL,
Modified By Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
bast _Modified_Date DATE DEFAULT SYSDATE NOT NULL
dF
CREATE SEQUENCE COUNTRY_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE COUNTRY IS
*<detailTables>
<detailTable>
cI?ty.Country Key
</detailTable>
<detailTable>
STATE_OR_PROVINCE.Country Key
</detailTable>
</detailTables>';

CREATR TABLE STATE OR PROVINCE (

State_Or Province_Key NUMBER (*,0) PRIMARY KEY NOT NULL,
State_Or_Province_ID VARCHAR2 (2),

State _Or_Province_Name VARCHAR2 (50) NOT NULL,

Country Key NUMBER (*,0) REFERENCES

COUNTRY (Country Key) NOT NULL,
Entered _By Users Key .- NUMBER (*,0) REFERENCES

US 7,885,981 B2
351 352

USERS (Users_K@W NOT NOLL,

Rntry Date DATE DEFAULT SYSDATE NOT NULL,
Modified_By_Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Last _Modified Date DATE DEFAULT SYSDATE NOT NULL
de
CREATE SEQUENCE STATE_OR_PROVINCE_ SEQ INCREMENT BY 1 START WITH 1

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE STATE _OR_PROVINCE IS
'<hints>
<detailTables>
<detailTable>
CITY.State_Or_ Province_Key
«</detailTable>
</detailTables>
<fhints>';

CREATE TABLE CITY (

City Key NUMBER (*,0) PRIMARY KEY NOT NULL,
City Name VARCHAR2 (SQ) NOT NULL,
State Or Province Key NUMBER (*,0) REFERENCES
STATE_OR_PROVINCE (State _Or_Province_Key),
Country Key NUMBER (*,0) REFERENCES
COUNTRY (Country Key) NOT NULL,
Entered _ By Users_Key NUMBER (*,0) REFERENCES
USBRS (Users Key) NOT NULL,
Entry. Date ‘ DATE DEFAULT SYSDATE NOT NULL,
Modified_By_Users_Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
Ve
CREATE SEQUENCE CITY SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE-. CACHE 10 NOORDER;
COMMENT ON TABLE CITY IS
‘<hints>
<sql>
SELECT
A.City Key,
A.City_Name |
DECODE (B.State_Or Province_ID,

NOLL,
DECODE(B.State_or Province Name, NOLL,
DECODE (C.Country_Name, NULL, NULL,
vet ', NULL,
at an NULL,
re, '* |} C.Country Name),

free
td

DECODE (C.Country Name, NULL, NULL,
rrts) NULL,
rroo?) NOD,
‘rt, '' ||] ¢.Country Name),
1s at
t
DECODE (C.Country_ Name, NULL, NULL,
rrr, NULL,
‘rot NULL,
he | C.Country Name),

"', “' |} B.State_or Province _Name

US 7,885,981 B2

353

),

wrae
’

DECODE (B.State_or_Province_Name,
NULL,

DECODE (C.Country Name,
fren NULL,

reoe, NULL,
c.Country Name),

wey at 1

vend

DECODE (C.Country Name,
tree NULL,

we ty NULL,
c.Country Name),

mrpote in|

DECODE (C.Country_ Name,
verry NULL,

ttoetr

re tt WW

ye

yuojwe
,

DECODE (B.State_or_ Province _Name,
NULL,

DECODES (C.Country_Namc,
sere) NULL,

oe red]

ered

DECODE (C.Country_Name,
treet) NULL,

DBCODE (C.Country_ Name,

tyet. NULL,

vr, ot

repre yy

ur, eet t|
ds

tr t4 1]

) AS City
FROM

CITY A,
WHERE

STATE_OR_PROVINCE B,

, NULL,
c.Ccountry Name),
B.State_or_ Province Name

NULL,
C.Country Name),

, NULL,
c.Country_ Name),

, NULL,
c.Country Name),
B.State_or Province_Name

NULL,

NULL,

B.State_Or_Province_ID

COUNTRY

354

NULL,

NULL,

NULL,

NULL,

NULL,

NULL,

NULL, NULL,

NULL, NULL,

Cc

A.State' or Province _Key = B.State_or_Province Key (+)

AND
A.Country Key =
ORDER BY
2
</sql>
</hints>';

c.Country Key

CREATE TABLE COMPANY (
Company _Key
Company_Name
NDA_Flag
Contractual Relationship Key

CONTRACTUAL _RELATIONSHTP (Contractual _ Relationship | Key)

Priority Key

(+)

NUMBER (*,0) PRIMARY KEY NOT NULL,
VARCHAR2 (50) NOT NULL,

NUMBER (1,0) DEFAULT 0 NOT NULL,
NUMBER (*,0) REFERENCES

NOT NULL,

NUMBER (*,0) REFERENCES

US 7,885,981 B2

355 356
PRIORITY (Priomm™my Key) NOT NULL,
Address_1 VARCHAR2 (80),
Address_2 VARCHAR2 (80),
Ccity_Key NUMBER (*,0) REFERENCES
CITY (City_Key),
State_Or_Province_Key NUMBER (*,0) REFERENCES
STATE_OR_PROVINCE (State_Or_Province_ Key),
Postal_Code VARCHAR2 (10),
Country Key NUMBER (*,0) REFERENCES
COUNTRY (Country Key),
Phone VARCHAR2 (80),
Company URL VARCHAR2 (255),
Notes VARCHAR2 (4000),
Entered By Users Key NUMBER (*,0) REFERENCES
USERS (Users_Key) NOT NULL,
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified_By Users Key NUMBER(*,0) REFERENCES
USERS (Users Key) NOT NULL,
Last_Modified_Date DETE DBFAULT SYSDATE NOT NULL
v;
CREATE SEQUENCE COMPANY _SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE COMPANY IS
'chints>
<detailTables>
<detailTable>
PEOPLE .Company_ Key
</detailTable>
</detailTables>
</fhints>';

CREATE TABLE PEOPLE (

People Key NUMBER(*,0) PRIMARY KEY NOT NULL,

Last_Name VARCHAR2 (30) NOT NULL,

First_Name , VARCHAR2 (30) NOT NULL,

Middle Name VARCHAR2 (30),

Company Key NUMBER (*,0) REFERENCES
COMPANY (Company Key) CONSTRAINT nn_company NOT NULL,

Job Title VARCHAR2 (50),

Salutation_Name VARCHAR2 (30),

Address_1 VARCHAR2 (80),

Address 2 VARCHAR2 (80),

City_Key NUMBER (*,0) REFERENCES
CITY (City_Key) CONSTRAINT nn_city NOT NULL,

State_Or_Province_Key NUMBER (*,0) REFERENCES
STATE_OR_PROVINCE (State_Ox_ Province _Key),

Postal_Code VARCHARZ (10),

Country ey NUMBER (*,0) REFERENCES
COUNTE.. (Countsy_Key) CONSTRAINT nn_country NOT NULL,

Work_Phense VARCHAR? (80),

Cell_Phone VARCHAR2 (80),

Work _PFax VARCHARZ (80),

Work_Pager VARCHAR? (80),

Work Email VARCHAR? (80),

Active_Flag NUMBER(1,0) DEFAULT 0 NOY NULL,

Login_ID VARCHAR2 (30),

Notes VARCHAR2 (1000),

US 7,885,981 B2

357

Entered By Us erWMey
USERS (Users_Key) NOT NULL,
Entry Date
Modified By Users Key
USERS (Users Key) NOT NULL,
Last_Modified Date
7
CREATE SEQUENCE PBOPLE_SEQ INCREMENT BY 1
MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

CREATE TABLE OPPORTUNITY STATUS (
Opportunity Status Key
Opportunity Status_Name
Description
Entered_By Users Key

USERS (USers Key) NOT NULL,
Entry Date
Modified_By Users Key

USERS (Users Key) NOT NULL,
Last_Modified_ Date

dv;

CREATE SEQUENCE OPPORTUNITY_STATUS SEQ INCREMENT BY 1
NOCYCLE CACHE 10

NOMAXVALUE MINVALUE 1

CREATE TABLE OPPORTUNITY (

Opportunity Key
Opportunity Title
Opportunity Date
Contact_Person Key

PEOPLE (People Key) NOT NUL,
Region_Key

REGION (Region_Key)
Revenue Potential
Profit Potential
Amount_Spent_YTD
Probability Of Success

(Probability Of Success BETWEEN 0 AND
Referred By Key

PEOPLE (People Key) NOT NULL,
Opportunity Status_Key

NOT NULL,

358

ME RENCES

NUMEBALT HO)” i

DATE DEFAULT SYSDATF NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

START WITH 1 NOMAXVALUE

NUMBER(*,0) PRIMARY KEY NOT NULL,
VARCHAR2 (50) NOT NULL,

VARCHAR2 (255),

NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

START WITH 1
NOORDER;

NUMBER (*,0) PRIMARY KEY NOT NULL,
VARCHAR2 (50) NOT NULL,

DATE NOT NULL,

NUMBER (*,0) REFERENCES
NUMBER(*,0) REFERENCES
NUMBER (*,2),
NUMBER (*,2),
NUMBER (*,2),
NUMBER (2, 0)
99),
NUMBER (*, 0)

NOT NULL CHECK

REFERENCES

NUMBER (*,0) REFERENCES

OPPORTUNITY STATUS (Opportunity Status Key) NOT NULL,

Notcs
Entered_By Users_Key
USERS (Users Key) NOT NULL,
Entry Date
Modified By Users Key .
USERS (Users Key) NOT NULL,
Last_Modified_Date
d:

CREATE SEQUENCE OPPORTUNITY _ SEQ INCREMENT BY 1

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE OPPORTUNITY IS
'<hints>
<sql>
SELECT
A.Opportunity Key,:

VARCHAR2 (4000),
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

START WITH 1 NOMAXVALUE

US 7,885,981 B2

359

A.OpportuniW® Title
FROM
Opportunity A
WHERE
A.Opportunity Key IS NOT NULL
ORDER BY
1
</sqi>
<detailTables>
<detailTable>
CONTACT EVENT.Opportunity Key
</detailTable>
<detailTable>
OPPORTUNITY_TYPE.Opportunity Key
</detailTable>
</detailTables>
<fnints>';

CREATE TABLE CONTACT_TYPE(
Contact_Type Key
Contact_Type Name
Description
Entered By Users_Key
USERS (Users Key) NOT NULL,
Entry Date
Modified_By Users Key
USERS (Users Key) NOT NULL,
Last_Modified_Date
yi
CREATE SKHQUENCE CONTACT _TYPE_SEQ INCREMENT
MINVALUB 1 NOCYCLE CACHE 10 NOORDER;

CREATE TABLE CONTACT EVENT (
Contact_Event_Key
Contact_Event_Title
Opportunity Key
OPPORTUNITY (Opportunity_Key) NOT NULL,
Contact_Type Key

360

NUMBER (*,0) PRIMARY KEY NOT NULL,
VARCHAR2 (50) NOT NOLL,

VARCHAR2 (255),

NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

BY 1 START WITH 1 NOMAXVALUE

NUMBER (*,0) PRIMARY KEY NOT NULL,
VARCHAR2 (255) -

CONTACT_TYPE (Contact_Type_Key) NOT NULL,

Previous_Event_Key
CONTACT_EVENT (Contact _Event_Key),
Event_Date
Notes
Entered By Users Key
USERS (Users_Key) NOT NULL,
Entry _ Date
Modified_By Users Key
USERS (Users Key) NOT NULL,
Last_Modified_Date
de

CREATE SEQUENCE CONTACT_EVENT_SEQ INCREMENT BY 1

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE CONTACT_EVENT 1s
'<detailTables>
<detailTable> .

NUMBER (*,0) REFERENCES
NUMBER (*,0) REFERENCES
NUMBER (*,0) REFERENCES

DATE,
VARCHAR2 (4000),
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL
START WITH

1 NOMAXVALUE

CONTACT_PARTICIPANTS.Contact_Event_Key

US 7,885,981 B2

361

</aetailTable®
</detailTables>';

CREATE TABLE CONTACT_PARTICIPANTS (

Contact_Participant_Key
Contact_FEvent_Key

362

NUMBER (*,0) PRIMARY KEY NOT NULL,
NUMBER (*,0) REFERENCES

CONTACT EVENT (Contact_Event_Key) NOT NULL,

People Key

PEOPLE (People Key) NOT NULL,
Entered _By_Users_Key

USERS (Users_Key) NOT NULL,
Entry Date
Modified_By_Users_ Key

USERS (Users_Key) NOT NULL,
Last_Modified_Date

Va

NUMBER(*,0) REFERENCES
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

CREATE SEQUENCE CONTACT PARTICIPANTS SEQ INCREMENT BY 1 START WITH 1

NOMAXVALUEB MINVALUE 1 NOCYCLE CACHE 10
COMMENT ON TABLE CONTACT PARTICIPANTS IS

‘'<detailTables>
<detailTable>

NOORDER;

FOLLOW_UP_ACTIONS.Contact_Participant_Key

</detailTable>
</detailTables>';

CREATE TABLE FOLLOW_UP_ACTIONS (
FOLLOW_UP_Actions Key
Contact_Participant_Key

NUMBER (*,0) PRIMARY KEY NOT NULL,
NUMBER (*,0) REFERENCES

CONTACT_ PARTICIPANTS (Contact_Participant_Key) NOT NULL,

Description
Due_Date
Completed_Datc
Entered By Users_Key

USERS (Users Key) NOT NULL,
Entry Date
Modified_By_Users_Key

USERS (Users _Key) NOT NULL,
Last_Modified_ Date

\e

VARCHAR2 (255),

DATE, —

DATE,

NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

CREATE SEQUENCE FOLLOW_UP_ACTIONS_SEQ INCREMENT BY 1 START WITH 1
_NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

CREATE TABLE PRODUCTS AND SERVICES (

Products_And_Services_Key
Products_And_Services_Name
Description
Entered _By Users Key

USERS (USers_Key) NOT NULL,
Entry_Date
Modified By_Users Key

USERS (Users Key) NOT NULL,
Last_Modified_Date

GF

NUMBER (*,0} PRIMARY KEY NOT NULL,
VARCHAR2 (50) NOT NULL,

VARCHAR2 (255),

NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL,
NUMBER (*,0) REFERENCES

DATE DEFAULT SYSDATE NOT NULL

CREATE SEQUENCE PRODUCTS_AND SERVICES SEQ INCREMENT BY 1 START WITH 1
NOMAXVALUE MINVALUE 1: NOCYCLE CACHE 10 NOORDER;

US 7,885,981 B2

363 364
CREATE TABLE OPPORTUNITY TYPE (
Opportunity Type Key NUMBER (*,0) PRIMARY KEY NOT NULL,
Opportunity Key NUMBER (*,0) REFERENCES
OPPORTUNITY (Opportunity Key) NOT NULL,
Products And Services Key NUMBER (*,0) REFERENCES
PRODUCTS_AND_SERVICES (Products _And_Services_ Key} NOT NULL,
Entered_By Users_Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL, ;
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified By Users Key NUMBER (*,0) REFERENCES
USBRS (Users Key) NOT NULL,
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
7 .
CREATE SEQUENCE OPPORTUNITY_TYPE_SEQ INCREMENT BY 1 START WITH i

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

ALTER TABLE USERS ADD (

~- Users_Key NUMBER (*,0Q) PRIMARY KEY NOT NULL,
People Key NUMBER (*,0) UNIQUE REFERENCES
PEOPLE (People Key) CONSTRAINT nn_people NOT NULL,
Login 1D VARCHARZ2 (30) NOT NULL,
Entered By Users Key . NUMBER (*,0) NOT NULL CONSTRAINT
fk_users to_entered_by REFERENCES USERS(Users_ Key),
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified _By Users Key : . NUMBER (*,0) NOT NULL CONSTRAINT
fk_users to_modified_by REFERENCES USERS (Users Key), .
Last _Modificd Date DATE DEFAULT SYSDATR NOT NULL
i
CREATE SEQUENCE USERS_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
ALTER TABLE USERS DISABLE CONSTRAINT nn_people;
ALTER TABLE USERS DISABLE CONSTRAINT £k_users_to_entered by;
ALTER TABLE USERS DISABLE CONSTRAINT fk_users_to_modified_by;
INSERT INTO USERS
(Users_Key, Login_ID, Entered By Users Key, Modified_By Users Key)
VALUES
(USERS SEQ.NextVal, 'DEVONSHIRE\mpk", USERS SEQ.NextVal,
USERS_SEQ.NextVal);
ALTER TABLE USERS ENABLE CONSTRAINT fk_users_to_entered_by;
ALTER TABLE USERS ENABLE CONSTRAINI fk_users_to_modified by;
COMMENT ON TABLE USERS IS
'<hints>
<detailTables>
<detailTable>
SECURITY GROUP_USER.Users Key
</detailTable>
</detailTables>
</hints>';
ALTER TABLE PEOPLE DISABLE CONSTRAINT nn_company;
ALTER TABLE PEOPLE DISABLE CONSTRAINT nn_city;
ALTER TABLE PEOPLE DISABLE CONSTRAINT nn_country?
INSERT INTO PEOPLE
(People Key, Last_Name, First_Name, Middle Name, Active_Flag,
Entered_By Users Key, Modified_By Users Key)
VALUES .
(PEOPLE _SEQ-.NextVal, 'Kaufman', ‘Michael’, 'Philip', 1, (SELECT

US 7,885,981 B2
365 366

MIN(Users Key) WHOM USERS), (SELECT MIN (Usets REW) ~ FRI USERS Ma)
UPDATE USERS SET People_Key = (SELECT MIN(People_Key) FROM PEOPLE) WHERE
Users Key = (SELECT MIN(Users_Key) FROM USERS);

ALTER TABLE USERS ENABLE CONSTRAINT nn_people;

CREATE TABLE SECURITY_TABLE (

Security Table_Key NUMBER(*,0) PRIMARY KEY NOT NOLL,
Security Table Name VARCHAR2 (50} UNIQUE NOT NULL,
Entered By Users_Key NUMBER (*,0) REFERENCES
USERS (Users_Key) NOT NULL,
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified _By_Users_Key NUMBER (*,0) REFERENCES
USERS (Users _Key) NOT NULL,
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
dV?
CREATE SEQUENCE SECURITY_TABLE_SEQ INCREMENT BY 1 START WITH 1

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE i0 NOORDER;
COMMENT ON TABLE SECURITY TABLE IS
'<hints> :
<detailTables>
<detailTable>
SECURITY_GROUP_TABLE.Security_Table_Key
</detailvable>
</detailTables>
</hints>';

CREATE TABLE SECURITY_GROUP (

Security _Group_Key NUMBER(*,0) PRIMARY KEY NOT NULL,
Security Group Name VARCHAR2 (50) UNIQUE NOT NULL,
Entered By Users Key NUMBER (*,0) REFERENCES
USERS (Users _Key) NOT NOLL,
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified By Users_Key NUMBER (*,0) REFERENCES
USERS (USers_Key) NOT NULL,
Last _Modified_Date DATE DEFAULT SYSDATE NOT NULL
de
CREATE SEQUENCE SECURITY_GROUP_SEO INCREMENT BY 1 START WITH 1

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
COMMENT ON TABLE SECURITY_GROUP Is
‘<detailTables>
<detailTable>
SECURITY_GROUP_USER.Security Group key
</detailTable>
<detailTable>
SECURITY_GROUP_TABLE.Security Group_Key
</detailTable>
</detailTables>';

CREATE TABLE SECURITY_GROUP_USER (

Security Group_User Key NUMBER (*,0) PRIMARY KEY NOT NULL,
Security Group_Key NUMBER (*,0) REFERENCES
SECURITY_GROUP (Security _Group_Key) NOT NULL,
Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Entered By Users Key : NUMBER (*,0) REFERENCES

USERS (Users Key) NOT NOLL,

US 7,885,981 B2

367 368
Entry Date DATEQE A0p tT] WPSOATE NEG NOBLE
Modified_By Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NOLL,
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
ye
CREATE SEQUENCE SECURITY_GROUP_USER_SEQ INCREMENT BY 1 START WITH 1

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 WNOORDER;

CREATE TABLE SECURITY_GROUP_TABLE (

Security _Group_Table_ Key NUMBER (*,0) PRIMARY KEY NOT NULL,
Security _Group_Key NUMBER (*,0) REFERENCES
SECURITY_GROUP (Security Group Key) NOT NULL,
Security Table Key NUMBER (*,0) REFERENCES
SECURITY_TABLE (Security Table Key) NOT NULL,
Can_Browse Flag NUMBER (1,0) DEFAULT 0 NOT NULL,
Can Edit_Flag NUMBER(1,0) DEFAULT 0 NOT NULL,
Can_Add_ Flag NUMBER (1,0) DEFAULT 0 NOT NULL,
Can_Delete_Flag NUMBER (1,0) DEFAULT 0 NOT NULL,
Entered By Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified By Users Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Last_Modificd_ Date DATE DEFAULT SYSDATE NOT NULL
de
CREATE SEQUENCE SECURITY_GROUP_TABLE SEQ INCREMENT BY 1 START WITH 1

NOMAXVALUE MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

INSERT INTO SECURITY TABLE
(Security Table Key, Security _Table_ Name, Entered_By Users Key,
Modified_By_ Users_Key)

SELECT .
SECURITY TABLE SEQ.NextVal, Table Name, (SELECT MIN(Users Key) FROM
USERS), (SELECT MIN(Users Key) FROM USERS)

FROM
USER_TABLES;

INSERT INTO SECURITY_GROUP
(Security Group_Key, Security Group_Name, Entered_By Users _Key,
Modified By Users Key)

VALUES
(SECURITY _GROUP_SEQ.NextVal, ‘'Administrator', (SELECT MIN(Users_ Key) FROM
USERS), (SELECT MIN(Users Key) FROM USERS));

INSERT INTO SECURITY GROUP
(Security Group_Key, Security Group_Name, Entered_By Users Key,
Modified_By Users Key)

VALUES
(SECURITY_GROUP_SEQ.NextVal, 'Regular', (SELECT MIN(Users_Key) FROM
USERS), (SELECT MIN(Users_ Key) FROM USERS));

INSERT INTO SECURITY _GROUP_USER
(Security Group User Key, Security Group_Key, Users Key,
Entered By Users_Key, Modified_By Users Key)

VALUES
(SECURITY GROUP_USER_SEQ.NextVal, (SELECT MIN (Security Group Key) FROM
SECURITY_GROUP), (SELECT MIN(Users_Key) FROM USERS), (SELECT

US 7,885,981 B2
369 370

MIN (Users Key) WHOM USERS), (SELECT MIN (User KeU) -FEWRNGSERS) IG)

INSERT INTO SECURITY_GROUP_TABLE
(Security Group_Table Key, Security Group_Key, Security Table Key,
Can Browse Flag, Can_Edit_Flag, Can_Add_Flag, Can _Delete_ Flag,
Entered_By Users Key, Modified_by Users_Key)

SELECT
SECURITY _GROUP_TABLE_SEOQ.NextVal, (SELECT MIN (Security Group Key) FROM
SECURITY GROUP), Security _Table_Key, 1, 1, 1, 0, (SELECT MIN(Users_Key)
FROM USERS), (SELECT MIN (Users_Key) FROM USERS)

FROM
SECURITY_TABLE;

INSERT INTO SECURITY _GROUP_TABLE
(Security_Group_Table Key, Security _Group_ Key, Security_Table_ Key,
Can Browse Flag, Can_Edit_Flag, Can_Add_Flag, Can_Delete_Flag,
Enlered By Users_Key, Modified _By_Users_Key)

SELECT
SECURITY GROUP _TABLE_SEQ.NextVal, (SELECT MAX (Security _Group_Key) FROM
SECURITY_GROUP), Security Table Key, 1, 0, O, O, (SELECT MIN(Users Key)
FROM USERS), (SELECT MIN(Users_ Key) FROM USERS)

FROM
SECURITY_TABLE;

CREATE TABLE HELP_SCHEMA (

Help Schema_Key NUMBER ({*,0) PRIMARY KEY NOT NULL,
Help Schema_Table VARCHAR2 (30),
Help_Schema_Column . VARCHAR2 (30),
PopUp_ Text VARCHAR2 (4000),
Entered By Users Key . NUMBER (*,0) REFERENCES
USERS (Users_Key) NOT NULL, :
Entry_Date DATE DEFAULT SYSDATE NOT NULL,
Modified By Users _Key NUMBER (*,0) REFERENCES
USERS (Users Key) NOT NULL,
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
:
CREATE SEQUENCE HELP_SCHEMA_SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;

CREATE TABLE HELP OBJECT (

Help Object _Key NUMBER(*,0) PRIMARY KEY NOT NULL,
Help Object _Name VARCHAR2 (255),
PopUp_Text VARCHAR2 (4000),
Entered _ By Users Key NUMBER (*,0} REFERENCES
USERS (Users Key) NOT NULL,
Entry Date DATE DEFAULT SYSDATE NOT NULL,
Modified By Users Key NUMBER(*,0) REFERENCES
USERS (Users Key) NOT NULL,’
Last_Modified_Date DATE DEFAULT SYSDATE NOT NULL
di
CREATE SEQUENCE HELP_OBJECT SEQ INCREMENT BY 1 START WITH 1 NOMAXVALUE

MINVALUE 1 NOCYCLE CACHE 10 NOORDER;
INSERT INTO HELP_OBJECT
(Help Object Key, Help Object_Name, PopUp Text, Entered By Users_Key,
Modified_By Users Key)
VALUES

US 7,885,981 B2
371 372

(HELP_OBJECT_SEW@MextVal, ‘stackLink', 'Theg@ {(iifks" iF Eaee YY Gagaqerca args IT.
"stack" of pending table-sessions (which result from following drill-down
and/or master/detail links). You can "jump" back up to any previous stack-—
level (and abandon all intervening levels) by clicking on the
corresponding link.', (SELECT MIN(Users Key) FROM USERS), (SELECT

MIN (Users Key) FROM USERS));

INSERT INTO HELP OBJECT
(Help Object_Key, Help_Object_Name, PopUp_Text, Entered_By _Users_Key,
Modified_By_Users_Key)

VALUES
(HELP_OBJECT_SEQ.NextVal, 'powerAddCheckbox', 'When enabled, "power add”
locks you into ADD mode for the current table (rather than returning you
to BROWSE mode after you add the current record) .<p>This is useful when
you need to add multiple records to the same table.<p>When you turn "power
add” on, it remains on only until you leave ADD mode, navigate to another
table, or explicitly turn it off.', (SELECT MIN(Users_Key) FROM USERS),
(SELECT MIN (Users Key) FROM USERS));

INSERT INTO HELP_OBJECT
(Help Object_Key, Help _Object_Name, PopUp Text, Entered_By Users Key,
Modified By Users Key)

VALUES
(HELP _OBJECT_SEQ.NextVal, ‘navAddLink', 'Adds a new record to this
table.', (SELECT MIN(Users Key) FROM USERS), (SELECT MIN(Users_ Key) FROM
USERS) );

INSERT INTO HELP OBJECT
(Help Object_Key, Help _Object_Name, PopUp Text, Entered By Users _ Key,
Modified By Users Key)

VALUES ;
(BELP_OBJECT_SEQ.NextVal, ‘navFullBrowselLink', 'Browse the current table
in its entirety (removing any filters currently in effect).', (SELECT
MIN (Users Key) FROM USERS), (SELECT MIN(Users Key) FROM USERS) }>;

INSERT INTO HELP OBJECT
(Help_Object_Key, Help Object_Name, PopUp_Text, Entered_By Users Key,
Modified By Users Key}

VALUES
(HELP_OBJECT_SEQ.NextVal, ‘drillLink’, ‘Allows you Lo "drill down" to the
underlying table for the dropdown to the right. If the dropdown shows a
value, this link will edit the corresponding record. If the dropdown is
empty, this link will add a new record to the corresponding table.',
(SELECT MIN (Users Key} FROM USERS), (SELECT MIN(Users_Key) FROM USERS));

INSERT INTO HELP OBJECT
(Help Object _Key, Help_Object_Name, PopUp Text, Entered By Users Key,
Modified_By Users Key)

VALUES
(HELP_OBJECT SEQ.NextVal, ‘editLink', 'Takes you to EDIT mode for this
record.', (SELECT MIN(Users_ Key) FROM USERS), (SELECT MIN(Users_Key) FROM
USERS) );

INSERT INTO HELP _OBJECT
(Help Object_Key, Help_Object_Name, PopUp Text, Entered By _Users_Key,
Modified_By Users Key)

VALUES ~
(HELP OBJECT SEQ.NextVal, 'navNewSearchLink', 'Specify a new search filter

US 7,885,981 B2
373 374

(from scratch) WM this table.', (SELECT MINGUS ETS. KAM, FROM OSS) ies
(SELECT MIN (Users_Key) FROM USERS));

INSERT INTO HBLP_OBJECT
(Help Object_Key, Help_Object_Name, PopUp_Text, Entered_By Users Key,
Modified By Users_Key)

VALUES
(HELP _OBJECT_SEQ.NextVal, 'navFilteredBrowseLink', 'Browse the current
table without resetting any current filters.', (SELECT MIN(Users_ Key) FROM

USERS), (SELECT MIN(Users Key) FROM USERS) );

INSERT INTO HELP OBJECT
{Help Object_Key, Help _Object_Name, PopUp_Text, Entered_By Users Key,
Modified By Users Key)
VALUES :
(HELP OBJECT _SEQO.NextVal, ‘'expressEditCheckbox', 'When enabled, "express
edit” will skip directly from SEARCH mode to EDIT mode (bypassing BROWSE
mode) if your search finds exactly one matching record.<p>This also
applies when master/detail drill-downs find exactly one child record.<p>
Once you turn "express edit" on, it remains on until you explicitly turn
it of f.', (SELECT MIN(Users Key) FROM USERS), (SELECT MIN(Users Key) FROM
USERS) )¢

INSERT INTO HELP OBJECT
(Help Object _Key, Help Object_Name, PopUp Text, Entered By Users Key,
Modified_By Users_Key)
VALUES
(HELP OBJECT _SEQ.NextVal, '‘quickDrop', ‘Restarts your session on the
-selected table (in either BROWSE or SEARCH mode, according to your
selection from the radio buttons above).', (SELECT MIN(Users Key) FROM
USERS), (SELECT MIN (Users Key) FROM USERS));

INSERT INTO HELP OBJECT
(Help Object_Key, Help_Object_Name, PopUp_Text, Entered_By_Users_Key,
Modified_By Users_Key)

VALUES
(HELP OBJECT _SBQ.NextVal, 'quickLink', ‘Restarts your session on this
table (in either BROWSE or SEARCH mode, according to your selection ‘from
the radio buttons to the left).', (SELECT MIN(Users_Key) FROM USERS),

(SELECT MIN (Users Key) FROM USERS));

INSERT INTO HELP OBJECT
(Help Object_Key, Help Object Name, PopUp_Text, Entered By Users Key,
Modified By Users Key)

VALUES
(HELP OBJECT_SEQ.NextVal, '‘mdLink', ‘Allows you to "drill down" to a
detail (or child) table for the current (master, or parent) table.<p>When
you drili-down to a child table, your entire working context is
constrained so that only records belonging to the current master-table
record are visible.', (SELECT MIN(Users Key) FROM USERS), (SELECT
MIN(Users Key) FROM USERS)); ~

INSERT INTO HELP OBJECT
(Help Object _Key, Help Object_Name, PopUp Text, Entered By Users Key,
Modified_By Users Key)

VALUES
(HELP_OBJECT_SEQ.NextVal, 'navRevisedSearchLink', ‘Revise the current
search filter for this table.', (SELECT MIN (Users Key) FROM USERS),

US 7,885,981 B2
375 376

(SELECT MIN(Us&M Key) FROM USERS));

CREATE OR REPLACE FUNCTION FORMATTED NAME {RecordID IN NUMBER) RETURN
VARCHAR2 AS
CURSOR cl IS SELECT DISTINCT LAST_NAME, FIRST _NAME, MIDDLE_NAME FROM
PEOPLE WHERE People Key = RecordID;
retval VARCHAR2 (32767);
BEGIN
retval := ''?
FOR nameé_rec IN cl LOOP
retval := name_rec.LAST_NAME lt ot, ' |] name rec.FIRST_NAME [|] ' ' 1)
name_rec.MIDDLE_NAME;
END LOOP;
RETURN retval;
EXCEPTION
WHEN NO_DATA_FOUND THEN
RETURN retval;
END FORMATTED NAME;

CREATE OR REPLACE FUNCTION SHOW BOOLEAN (BooleanValue IN NUMBER) RETURN
VARCHAR2 AS
BEGIN
IF (BooleanValue <> 0) THEN RETURN '<center>&times;</center>'; END IF;
RETURN '';
END SHOW_BOOLEAN;

REM ***** Must complete data-entry for “lead user" before executing following
modifications:

-~+- ALTER TABLE PEOPLE ENABLE CONSTRAINT nn_company;

---~ ALTER TABLE PEOPLE ENABLE CONSTRAINT nn_city;

--- ALTER TABLE PEOPLE ENABLE CONSTRAINT nn_country,;

US 7,885,981 B2

377

We claim:

1. A method for operating a server comprising a processor
for automatically generating an end-user interface for work-
ing with the data within a relational database defined within a
relational DBMS whose data is stored in machine-readable
media and which is accessible to said server, wherein said
relational database comprises a plurality of tables, constraints
and relationships stored in said DBMS in accordance with a
data model comprising said tables and their column-comple-
ments and datatypes, said constraints, and the relationships
across said tables, and wherein said relational database may
be of any arbitrary size or complexity, said method compris-
ing

(a) providing an output stream from said server, for user
display and input devices, defining a user interface para-
digm comprising a set of modes for interacting with a
given database table, said modes comprising create,
retrieve, update and delete, and a corresponding display
format for each mode;

(b) causing said server to scan said database and apply a
body of rules to determine the table structures, con-
straints and relationships of said data model, and store
representations thereof in machine-readable media
accessible to said server; and

(c) causing said server to use said representations to con-
struct a corresponding client application for access
through said user display and input devices, wherein
said client application provides a connection to said
database, provides displays of the table contents of said
database for each of said modes in accordance with the
display formats of said paradigm, integrates into each
said mode display processes for representing, navigat-
ing, and managing said relationships across tables, for
selecting among said modes, and for navigating across
said tables and interacting in accordance the selected
mode with the data in the tables that are reached by said
navigation, while observing and enforcing relational
interdependencies among data across said tables.

2. The method of claim 1, further comprising incorporating
within said client application components for revealing and
enforcing non-relational constraints defined within said data-
base for each individual table-column.

3. The method of claim 1, wherein said relational interde-
pendencies are embodied in referential-integrity constraints
within the underlying database.

4. A computer-implemented system for automatically gen-
erating an end-user interface for working with the data within
arelational database defined within a relational DBMS whose
data is stored in machine-readable media and which is acces-
sible to said system, wherein said relational database com-
prises a plurality of tables, constraints and relationships in
accordance with a data model comprising said tables and their
column-complements and datatypes, said constraints, and the
relationships across said tables, and wherein said relational
database may be of any arbitrary size or complexity, said
system comprising a server comprising a processor, said
server further comprising:

(a) machine-readable routines to provide an output stream

for user display and input devices, defining a user inter-

5

10

15

20

25

30

35

45

50

55

378

face paradigm comprising a set of modes for interacting
with a given database table, said modes comprising cre-
ate, retrieve, update and delete, and a corresponding
display format for each mode;

(b) machine-readable routines for scanning said database
and applying a body of rules to determine the table
structures, constraints and relationships of said data
model, and for storing representations thereof; and

(c) machine-readable routines for using said representa-
tions to construct a corresponding client application,
wherein said client application provides a connection to
said database, provides displays of the table contents of
said database for each of said modes in accordance with
the display formats of said paradigm, integrates into
each said mode display processes for representing, navi-
gating, and managing said relationships across tables,
for selecting among said modes, and for navigating
across said tables and interacting in accordance the
selected mode with the data in the tables that are reached
by said navigation, while observing and enforcing rela-
tional interdependencies among data across said tables.

5. Acomputer-readable storage medium containing a set of

instructions for a general purpose computer, for automati-
cally generating an end-user interface for working with the
data within a relational database, wherein said relational data-
base comprises a plurality of tables, constraints and relation-
ships in accordance with a data model comprising said tables
and their column-complements and datatypes, said con-
straints, and the relationships across said tables, and wherein
said relational database may be of any arbitrary size or com-
plexity, said set of instructions comprising:

(a) a routine for providing a user interface paradigm com-
prising a set of modes for interacting with a given data-
base table, said modes comprising create, retrieve,
update and delete, and a corresponding display format
for each mode;

(b) a routine for scanning said database and applying a
body of rules to determine the table structures, con-
straints and relationships of said data model, and for
storing representations thereof; and

(c) a routine for using said representations to construct a
corresponding client application, wherein said client
application provides a connection to said database, pro-
vides displays of the table contents of said database for
each of said modes in accordance with the display for-
mats of said paradigm, integrates into each said mode
display processes for representing, navigating, and man-
aging said relationships across tables, for selecting
among said modes, and for navigating across said tables
and interacting in accordance the selected mode with the
data in the tables that are reached by said navigation,
while observing and enforcing relational interdependen-
cies among data across said tables.

6. The computer-readable medium of claim 5, wherein said

set of instructions are integrated with an RDBMS also pro-
vided in machinereadable form.
